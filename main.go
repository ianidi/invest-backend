package main

import (
	"log"
	"net/http"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-contrib/gzip"
	_ "github.com/ianidi/exchange-server/docs" // docs generated by ./swag init -p pascalcase
	"github.com/ianidi/exchange-server/internal/graphqlgin"
	"github.com/ianidi/exchange-server/internal/job"
	"github.com/ianidi/exchange-server/internal/jwt"
	"github.com/ianidi/exchange-server/internal/redis"
	_ "github.com/ianidi/exchange-server/internal/timezone"
	"github.com/spf13/viper"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"github.com/gin-gonic/gin"
	"github.com/ianidi/exchange-server/api/member"
	"github.com/ianidi/exchange-server/api/operator"
	"github.com/ianidi/exchange-server/internal/db"
	//"github.com/ianidi/exchange-server/internal/s3"
)

func init() {
	viper.SetDefault("connection", "postgresql://exchange:hKG9VDtF1@188.225.74.11/exchange")
	viper.SetDefault("port", ":4000")
	viper.SetDefault("jwt_secret", "BC84B9F32DB&F$D^V&ID")
	viper.SetDefault("redis_host", "188.225.74.11:6379")
	viper.SetDefault("redis_password", "deew76G76%$^Dgwd7^*YDdw%^&*dwgd")
	viper.SetDefault("pdf_host", "http://188.225.74.11:4005")
	viper.SetDefault("aws_key_sns", "AKIAYL5MKVMMRLSRYEOJ")
	viper.SetDefault("aws_secret_sns", "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")
	viper.SetDefault("aws_region_sns", "eu-central-1")
	viper.SetDefault("s3_endpoint", "hb.bizmrg.com")
	viper.SetDefault("s3_bucket", "invest")
	viper.SetDefault("s3_key", "i2hmSCXvnmLrq7USRjMEMG")
	viper.SetDefault("s3_secret", "2V4WdFhFvAwpcA47VCe7j7nZNbkV48MsRrF4vTcHc3hF")
	viper.SetDefault("s3_cdn_url", "https://invest.hb.bizmrg.com/") //upload.acces-plateforme.online

}

//Comments describing API endpoints for Swagger - used for automatic generation of Swagger UI - edit with caution - learn more https://swaggo.github.io/swaggo.io/declarative_comments_format/general_api_info.html
//
// @title exchange API
// @version 1.0
// @description Server
// @termsOfService http://swagger.io/terms/

// @contact.name Ivan Anidi
// @contact.url https://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:4000
// @BasePath /

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
func main() {
	db := db.Init()
	defer db.Close()

	//Init redis pool and subscription
	redis.InitRedis()

	service := jwt.Init()

	gin.SetMode(gin.ReleaseMode)

	r := gin.New()

	// logger, _ := zap.NewProduction()
	// r.Use(ginzap.Ginzap(logger, time.RFC3339, true))
	// r.Use(ginzap.RecoveryWithZap(logger, true))

	// gin.DisableConsoleColor()

	// //Record log to file
	// f, _ := os.OpenFile("log.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	// gin.DefaultWriter = io.MultiWriter(f, os.Stdout)

	r.Use(gzip.Gzip(gzip.DefaultCompression))

	//CORS settings - learn more https://github.com/gin-contrib/cors
	r.Use(cors.New(cors.Config{
		// AllowAllOrigins:  true,
		AllowOrigins:     []string{"https://acces-plateforme.online", "http://localhost:3000", "http://localhost:4000", "https://manager.acces-plateforme.online", "https://invest.onrender.com"},
		AllowMethods:     []string{"POST", "GET", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Authorization", "Content-Type", "x-requested-with", "Filename", "Accept", "Category", "RecordID", "DNT", "Referer", "User-Agent"},
		ExposeHeaders:    []string{"Content-Length", "Content-Type", "Authorization"},
		AllowCredentials: true,
		MaxAge:           12 * time.Hour,
	}))

	r.Use(graphqlgin.GinContextToContextMiddleware())

	// err = otp.SendSMS("+79997727421", fmt.Sprintf("Your code is %s", "583745"))
	// if err != nil {
	// 	fmt.Println(err)
	// }

	//Update rates
	job.RegisterJob(&job.RatesJob{})

	//Serve static files
	//r.Use(static.Serve("/static", static.LocalFile("/var/server/static", true)))

	/*
				  General information:

		 			Almost all endpoints are identical:

		 			/: id - get a record from the database by its ID
		 			/ - get all records from the database. Available sorting types: offset - start with n records, limit - output n records
					/add - add a new entry
		 			/update - update record data by its ID
					/delete - delete a record from database by its ID
	*/

	/*
		Endpoints available without authorization
	*/
	groupPublic := r.Group("/") //, jwt.TokenAuthNoErrorMiddleware(service)
	{
		groupPublic.GET("/query", graphqlgin.GraphqlHandler(service, false)) //Websocket subscriptions endpoint
		groupPublic.GET("", graphqlgin.PlaygroundHandler())

		groupPublic.POST("/query", graphqlgin.GraphqlHandler(service, false))

		auth := groupPublic.Group("/auth")
		{
			auth.POST("/signin", service.Signin)
			auth.POST("/signup", service.AuthSignup)
			auth.POST("/signup/resend", service.AuthSignupResend)
			// 2fa sms resend
			auth.POST("/reset", service.AuthReset)
			auth.POST("/verify", service.AuthVerify) //Verify signup / reset using email
			auth.POST("/refresh", service.Refresh)
		}
	}

	/*
		Endpoints for members who are logged in
	*/
	groupMember := r.Group("/", jwt.TokenAuthMiddleware(service))
	{
		auth := groupMember.Group("/auth")
		{
			auth.POST("/logout", service.Logout)
		}

		// 	auth.POST("/phone/add", public.AuthPhoneRequest)
		// 	auth.POST("/phone/verify", public.AuthPhoneRequest)

		// 	Change phone
		// 	Change email
		// 	auth.POST("/verify", public.AuthVerify) //Verify change email / phone

		// 	Enable 2fa
		// 	Disable 2fa

		// 	signup {
		// 		contract signature (new account only) + mark contract as signed
		// 		Request adding phone to account (new account only + contract signed only)
		// 		Verify adding phone (new account only) + mark phone as tied (+ mark signup as complete if account has password set)
		// 		Set up a password (new account only + phone tied only + manually created) + mark signup as complete + mark password as set
		// 	}
		// }

		groupMember.POST("/upload", member.Upload)
		groupMember.DELETE("/upload", member.Upload)
		groupMember.GET("/upload", member.Upload)

		// FilePond options
		// router.HandleFunc("/filepond", controllers.Options).Methods("OPTIONS")

		// FilePond submit
		// router.HandleFunc("/filepond/confirm", controllers.SubmitStore).Methods("POST")

		// groupMember.POST("/query", graphqlgin.GraphqlHandler(service, true))
		// Профиль пользователя: получить, обновить данные
		profile := groupMember.Group("/profile")
		{
			profile.GET("", member.ProfileGet)
			profile.POST("/update", member.ProfileUpdate)
			profile.POST("/avatar/upload", member.Upload)
			profile.POST("/notifications", member.ProfileNotifications)
			profile.POST("/password", member.ProfilePassword)
			//profile.POST("/image", member.ImageUpload)
			email := profile.Group("/email")
			{
				email.POST("/update", member.EmailUpdate)
				email.POST("/verify", member.EmailVerify)
			}
		}
		groupMember.GET("/news", member.NewsGet)
		groupMember.GET("/info", member.InfoGet)
		groupMember.GET("/info/init", member.InfoGetInit)
		//groupMember.GET("/asset", member.AssetGet)
		//groupMember.GET("/history", member.HistoryGet)
		//groupMember.GET("/fave", member.FaveGet)
		//groupMember.GET("/wallet", member.WalletGet)
		//groupMember.GET("/balance", member.BalanceGet)
		groupMember.POST("/experience", member.ExperienceUpdate)
		alert := groupMember.Group("/alert")
		{
			alert.POST("", member.AlertNew)
			alert.POST("/open", member.AlertOpen)
		}
		groupMember.POST("/fave", member.FaveUpdate)
		groupMember.POST("/trade", member.TradeNew)
		trade := groupMember.Group("/trade")
		{
			trade.POST("/new", member.TradeNew)
			tradeClose := trade.Group("/close")
			{
				tradeClose.POST("", member.TradeClose)
				tradeClose.POST("/bulk", member.TradeCloseBulk)
			}
		}
		balance := groupMember.Group("/balance")
		{
			balance.POST("/deposit", member.BalanceDeposit)
			balance.POST("/withdraw", member.BalanceWithdraw)
		}
	}

	groupOperator := r.Group("/operator", jwt.TokenAuthMiddleware(service), operator.Middleware())
	{
		member := groupOperator.Group("/member")
		{
			member.GET("/:id", operator.MemberGetByID)
			member.GET("", operator.MemberGet)
			member.POST("/create", operator.MemberCreate)
			member.POST("/update", operator.MemberUpdateByID)
			member.DELETE("/delete", operator.MemberDeleteByID)
		}
		asset := groupOperator.Group("/asset")
		{
			asset.GET("/:id", operator.AssetGetByID)
			asset.POST("/update", operator.AssetUpdateByID)
			asset.GET("", operator.AssetGet)
		}
		trade := groupOperator.Group("/trade")
		{
			trade.GET("", operator.TradeGet)
		}
		withdraw := groupOperator.Group("/withdraw")
		{
			withdraw.GET("", operator.WithdrawGet)
			withdraw.POST("/update", operator.WithdrawUpdate)
		}
		deposit := groupOperator.Group("/deposit")
		{
			deposit.GET("", operator.DepositGet)
			deposit.POST("/update", operator.DepositUpdate)
		}
		settings := groupOperator.Group("/settings")
		{
			settings.GET("", operator.SettingsGet)
			settings.POST("/update", operator.SettingsUpdate)
		}
		news := groupOperator.Group("/news")
		{
			news.GET("/:id", operator.NewsGetByID)
			news.GET("", operator.NewsGet)
			news.POST("/add", operator.NewsAdd)
			news.POST("/update", operator.NewsUpdateByID)
			news.DELETE("/delete", operator.NewsDeleteByID)
		}
	}

	//Swagger API docs
	swagger := r.Group("/swagger", gin.BasicAuth(gin.Accounts{"eun3denw": "fnj43jnfi3"}))
	{
		swagger.GET("/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	}

	//Run server
	log.Printf("listening on %s\n", viper.GetString("port"))
	s := &http.Server{
		Addr:    viper.GetString("port"),
		Handler: r,
	}
	s.ListenAndServe()
}
