// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"io"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/ianidi/exchange-server/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
	Subscription() SubscriptionResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Alert struct {
		AlertID       func(childComplexity int) int
		AssetID       func(childComplexity int) int
		Price         func(childComplexity int) int
		TimestampOpen func(childComplexity int) int
	}

	Appointment struct {
		AppointmentID    func(childComplexity int) int
		DateCreated      func(childComplexity int) int
		DateDue          func(childComplexity int) int
		Description      func(childComplexity int) int
		LeadID           func(childComplexity int) int
		Status           func(childComplexity int) int
		TimestampCreated func(childComplexity int) int
		TimestampDue     func(childComplexity int) int
		Title            func(childComplexity int) int
		Type             func(childComplexity int) int
	}

	Balance struct {
		Amount         func(childComplexity int) int
		AmountNegative func(childComplexity int) int
		BalanceID      func(childComplexity int) int
		CurrencyID     func(childComplexity int) int
		MemberID       func(childComplexity int) int
	}

	BankDetails struct {
		BankAccountNumber      func(childComplexity int) int
		BankAccountType        func(childComplexity int) int
		BankBic                func(childComplexity int) int
		BankBranch             func(childComplexity int) int
		BankBranchAddress      func(childComplexity int) int
		BankBranchCity         func(childComplexity int) int
		BankBranchCountry      func(childComplexity int) int
		BankBranchZip          func(childComplexity int) int
		BankDetailsID          func(childComplexity int) int
		BankIban               func(childComplexity int) int
		BankIfsc               func(childComplexity int) int
		BankName               func(childComplexity int) int
		BankRoutingNumber      func(childComplexity int) int
		BankSWIFTCorrespondent func(childComplexity int) int
		BankSwift              func(childComplexity int) int
		BankTransferCaption    func(childComplexity int) int
		BeneficiaryAddress     func(childComplexity int) int
		BeneficiaryCity        func(childComplexity int) int
		BeneficiaryCompany     func(childComplexity int) int
		BeneficiaryCountry     func(childComplexity int) int
		BeneficiaryFirstName   func(childComplexity int) int
		BeneficiaryLastName    func(childComplexity int) int
		BeneficiaryZip         func(childComplexity int) int
		Title                  func(childComplexity int) int
	}

	Campaign struct {
		CampaignID       func(childComplexity int) int
		DateCreated      func(childComplexity int) int
		Description      func(childComplexity int) int
		TimestampCreated func(childComplexity int) int
		Title            func(childComplexity int) int
	}

	Category struct {
		CategoryID func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	Checklist struct {
		ChecklistID      func(childComplexity int) int
		Complete         func(childComplexity int) int
		DateCreated      func(childComplexity int) int
		LeadID           func(childComplexity int) int
		Position         func(childComplexity int) int
		TimestampCreated func(childComplexity int) int
		Title            func(childComplexity int) int
	}

	Comment struct {
		CommentID        func(childComplexity int) int
		Content          func(childComplexity int) int
		DateCreated      func(childComplexity int) int
		DateEdited       func(childComplexity int) int
		LeadID           func(childComplexity int) int
		MemberID         func(childComplexity int) int
		TimestampCreated func(childComplexity int) int
		TimestampEdited  func(childComplexity int) int
	}

	Contract struct {
		Content    func(childComplexity int) int
		ContentRaw func(childComplexity int) int
		ContractID func(childComplexity int) int
		Current    func(childComplexity int) int
		OfferID    func(childComplexity int) int
		Template   func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	CreationResponse struct {
		RecordID func(childComplexity int) int
	}

	Currency struct {
		CurrencyID func(childComplexity int) int
		Symbol     func(childComplexity int) int
		Title      func(childComplexity int) int
	}

	Deal struct {
		Amount            func(childComplexity int) int
		ContractID        func(childComplexity int) int
		CurrencyID        func(childComplexity int) int
		DateCreated       func(childComplexity int) int
		DateEnd           func(childComplexity int) int
		DatePaid          func(childComplexity int) int
		DateSigned        func(childComplexity int) int
		DateStart         func(childComplexity int) int
		DateVerified      func(childComplexity int) int
		DealID            func(childComplexity int) int
		Duration          func(childComplexity int) int
		MemberID          func(childComplexity int) int
		OfferID           func(childComplexity int) int
		SignatureFilename func(childComplexity int) int
		SignatureURL      func(childComplexity int) int
		Status            func(childComplexity int) int
		VerificationCode  func(childComplexity int) int
	}

	Faq struct {
		Answer   func(childComplexity int) int
		Faqid    func(childComplexity int) int
		Position func(childComplexity int) int
		Question func(childComplexity int) int
	}

	Info struct {
		Change        func(childComplexity int) int
		Event         func(childComplexity int) int
		ID            func(childComplexity int) int
		MemberID      func(childComplexity int) int
		Rate          func(childComplexity int) int
		RateBuy       func(childComplexity int) int
		RateSell      func(childComplexity int) int
		Sentiment     func(childComplexity int) int
		SentimentType func(childComplexity int) int
		Value         func(childComplexity int) int
	}

	Interest struct {
		AmountFrom   func(childComplexity int) int
		AmountTo     func(childComplexity int) int
		DurationFrom func(childComplexity int) int
		DurationTo   func(childComplexity int) int
		Interest     func(childComplexity int) int
		InterestID   func(childComplexity int) int
		OfferID      func(childComplexity int) int
	}

	Invest struct {
		BankDetailsID func(childComplexity int) int
		CategoryID    func(childComplexity int) int
		CurrencyID    func(childComplexity int) int
		Description   func(childComplexity int) int
		Document      func(childComplexity int) int
		Faq           func(childComplexity int) int
		InvestID      func(childComplexity int) int
		OfferID       func(childComplexity int) int
		Photo         func(childComplexity int) int
		Status        func(childComplexity int) int
		Subtitle      func(childComplexity int) int
		Title         func(childComplexity int) int
	}

	Invoice struct {
		Amount           func(childComplexity int) int
		CurrencyID       func(childComplexity int) int
		DateCreated      func(childComplexity int) int
		DatePaid         func(childComplexity int) int
		DealID           func(childComplexity int) int
		InvoiceID        func(childComplexity int) int
		MemberID         func(childComplexity int) int
		OfferID          func(childComplexity int) int
		Status           func(childComplexity int) int
		TimestampCreated func(childComplexity int) int
		TimestampPaid    func(childComplexity int) int
	}

	Lead struct {
		Address1         func(childComplexity int) int
		Address2         func(childComplexity int) int
		Birthday         func(childComplexity int) int
		CampaignID       func(childComplexity int) int
		Citizenship      func(childComplexity int) int
		City             func(childComplexity int) int
		Country          func(childComplexity int) int
		CurrencyID       func(childComplexity int) int
		DateCreated      func(childComplexity int) int
		Email            func(childComplexity int) int
		FamilyStatus     func(childComplexity int) int
		FirstName        func(childComplexity int) int
		Gender           func(childComplexity int) int
		IP               func(childComplexity int) int
		LastName         func(childComplexity int) int
		LeadID           func(childComplexity int) int
		MaidenName       func(childComplexity int) int
		ManagerID        func(childComplexity int) int
		MemberID         func(childComplexity int) int
		Phone            func(childComplexity int) int
		Status           func(childComplexity int) int
		StreetName       func(childComplexity int) int
		StreetNumber     func(childComplexity int) int
		TimestampCreated func(childComplexity int) int
		Zip              func(childComplexity int) int
	}

	ManagerOffer struct {
		BankDetailsID func(childComplexity int) int
		CurrencyID    func(childComplexity int) int
		InvestID      func(childComplexity int) int
		MemberID      func(childComplexity int) int
		OfferID       func(childComplexity int) int
		Status        func(childComplexity int) int
		Title         func(childComplexity int) int
	}

	ManagerSearch struct {
		ManagerID func(childComplexity int) int
		Title     func(childComplexity int) int
	}

	Media struct {
		Category func(childComplexity int) int
		Created  func(childComplexity int) int
		Filename func(childComplexity int) int
		InvestID func(childComplexity int) int
		MediaID  func(childComplexity int) int
		MemberID func(childComplexity int) int
		Position func(childComplexity int) int
		Title    func(childComplexity int) int
		URL      func(childComplexity int) int
	}

	Member struct {
		Address1           func(childComplexity int) int
		Address2           func(childComplexity int) int
		Birthday           func(childComplexity int) int
		Citizenship        func(childComplexity int) int
		City               func(childComplexity int) int
		Country            func(childComplexity int) int
		Created            func(childComplexity int) int
		CurrencyID         func(childComplexity int) int
		Email              func(childComplexity int) int
		EmailNotifications func(childComplexity int) int
		Eur                func(childComplexity int) int
		FamilyStatus       func(childComplexity int) int
		FirstName          func(childComplexity int) int
		Gender             func(childComplexity int) int
		IP                 func(childComplexity int) int
		Image              func(childComplexity int) int
		LastName           func(childComplexity int) int
		LeverageAllowed    func(childComplexity int) int
		MaidenName         func(childComplexity int) int
		ManagerID          func(childComplexity int) int
		ManagerRole        func(childComplexity int) int
		MemberID           func(childComplexity int) int
		Phone              func(childComplexity int) int
		Role               func(childComplexity int) int
		Status             func(childComplexity int) int
		StopLossAllowed    func(childComplexity int) int
		StreetName         func(childComplexity int) int
		StreetNumber       func(childComplexity int) int
		TakeProfitAllowed  func(childComplexity int) int
		Usd                func(childComplexity int) int
		Zip                func(childComplexity int) int
	}

	Mutation struct {
		CancelDeal                               func(childComplexity int, input model.RecordRequest) int
		InvoiceSendToEmail                       func(childComplexity int, input model.InvoiceSendToEmailRequest) int
		ManagerActivateOffer                     func(childComplexity int, input model.RecordRequest) int
		ManagerAssignBankDetailsToOffer          func(childComplexity int, input model.ManagerAssignBankDetailsToOfferRequest) int
		ManagerAssignInvestToOffer               func(childComplexity int, input model.ManagerAssignInvestToOfferRequest) int
		ManagerAssignLeadToManager               func(childComplexity int, input model.ManagerAssignLeadToManagerRequest) int
		ManagerAssignManager                     func(childComplexity int, input model.ManagerAssignManagerRequest) int
		ManagerAssignMemberToOffer               func(childComplexity int, input model.ManagerAssignMemberToOfferRequest) int
		ManagerCancelOffer                       func(childComplexity int, input model.RecordRequest) int
		ManagerCreateAppointment                 func(childComplexity int, input model.ManagerCreateAppointmentRequest) int
		ManagerCreateBankDetails                 func(childComplexity int, input model.ManagerCreateBankDetailsRequest) int
		ManagerCreateCampaign                    func(childComplexity int, input model.ManagerCreateCampaignRequest) int
		ManagerCreateCategory                    func(childComplexity int, input model.ManagerCreateCategoryRequest) int
		ManagerCreateChecklist                   func(childComplexity int, input model.ManagerCreateChecklistRequest) int
		ManagerCreateComment                     func(childComplexity int, input model.ManagerCreateCommentRequest) int
		ManagerCreateContract                    func(childComplexity int, input model.ManagerCreateContractRequest) int
		ManagerCreateCurrency                    func(childComplexity int, input model.ManagerCreateCurrencyRequest) int
		ManagerCreateInterest                    func(childComplexity int, input model.ManagerCreateInterestRequest) int
		ManagerCreateInvest                      func(childComplexity int, input model.ManagerCreateInvestRequest) int
		ManagerCreateLead                        func(childComplexity int, input model.ManagerCreateLeadRequest) int
		ManagerCreateOffer                       func(childComplexity int, input model.ManagerCreateOfferRequest) int
		ManagerDeactivateOffer                   func(childComplexity int, input model.RecordRequest) int
		ManagerDragMedia                         func(childComplexity int, input model.DragRequest) int
		ManagerDuplicateAndAssignContractToOffer func(childComplexity int, input model.ManagerDuplicateAndAssignContractToOfferRequest) int
		ManagerDuplicateContract                 func(childComplexity int, input model.ManagerDuplicateRequest) int
		ManagerDuplicateInvest                   func(childComplexity int, input model.ManagerDuplicateRequest) int
		ManagerDuplicateOffer                    func(childComplexity int, input model.ManagerDuplicateRequest) int
		ManagerEditAppointment                   func(childComplexity int, input model.ManagerEditAppointmentRequest) int
		ManagerEditBankDetails                   func(childComplexity int, input model.ManagerEditBankDetailsRequest) int
		ManagerEditCampaign                      func(childComplexity int, input model.ManagerEditCampaignRequest) int
		ManagerEditCategory                      func(childComplexity int, input model.ManagerEditCategoryRequest) int
		ManagerEditChecklist                     func(childComplexity int, input model.ManagerEditChecklistRequest) int
		ManagerEditComment                       func(childComplexity int, input model.ManagerEditCommentRequest) int
		ManagerEditContract                      func(childComplexity int, input model.ManagerEditContractRequest) int
		ManagerEditCurrency                      func(childComplexity int, input model.ManagerEditCurrencyRequest) int
		ManagerEditInvest                        func(childComplexity int, input model.ManagerEditInvestRequest) int
		ManagerEditInvoice                       func(childComplexity int, input model.ManagerEditInvoiceRequest) int
		ManagerEditLead                          func(childComplexity int, input model.ManagerEditLeadRequest) int
		ManagerEditMedia                         func(childComplexity int, input model.ManagerEditMediaRequest) int
		ManagerEditOffer                         func(childComplexity int, input model.ManagerEditOfferRequest) int
		ManagerRemoveAppointment                 func(childComplexity int, input model.RecordRequest) int
		ManagerRemoveCampaign                    func(childComplexity int, input model.RecordRequest) int
		ManagerRemoveChecklist                   func(childComplexity int, input model.RecordRequest) int
		ManagerRemoveComment                     func(childComplexity int, input model.RecordRequest) int
		ManagerRemoveInterest                    func(childComplexity int, input model.RecordRequest) int
		ManagerRemoveLead                        func(childComplexity int, input model.RecordRequest) int
		ManagerRemoveManager                     func(childComplexity int, input model.RecordRequest) int
		ManagerRemoveMedia                       func(childComplexity int, input model.RecordRequest) int
		MemberEmailUpdate                        func(childComplexity int, input model.MemberEmailUpdateRequest) int
		MemberPersonalUpdate                     func(childComplexity int, input model.MemberPersonalUpdateRequest) int
		MemberPhoneUpdate                        func(childComplexity int, input model.MemberPhoneUpdateRequest) int
		OfferGeneratePdf                         func(childComplexity int, input model.RecordRequest) int
		OfferInitDeal                            func(childComplexity int, input model.OfferInitDealRequest) int
		OfferPhoneVerify                         func(childComplexity int, input model.OfferPhoneVerifyRequest) int
		OfferPhoneVerifyResend                   func(childComplexity int, input model.RecordRequest) int
		OfferSign                                func(childComplexity int, input model.OfferSignRequest) int
		PhoneVerify                              func(childComplexity int, input model.PhoneVerifyRequest) int
		RemoveDeal                               func(childComplexity int, input model.RecordRequest) int
		Reset                                    func(childComplexity int, input model.ResetRequest) int
		ResetComplete                            func(childComplexity int, input model.ResetCompleteRequest) int
		SignIn                                   func(childComplexity int, input model.SignInRequest) int
		SignUp                                   func(childComplexity int, input model.SignUpRequest) int
		ValidateField                            func(childComplexity int, input model.ValidateFieldRequest) int
		Verify                                   func(childComplexity int, input model.VerifyRequest) int
		VerifyResend                             func(childComplexity int, input model.VerifyResendRequest) int
	}

	Offer struct {
		BankDetailsID func(childComplexity int) int
		Contract      func(childComplexity int) int
		CurrencyID    func(childComplexity int) int
		Description   func(childComplexity int) int
		Faq           func(childComplexity int) int
		InvestID      func(childComplexity int) int
		MemberID      func(childComplexity int) int
		OfferID       func(childComplexity int) int
		Status        func(childComplexity int) int
		Subtitle      func(childComplexity int) int
		Title         func(childComplexity int) int
	}

	OfferPdf struct {
		URL func(childComplexity int) int
	}

	OfferSignResult struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Timeout func(childComplexity int) int
	}

	PhoneVerifyResponse struct {
		Timeout func(childComplexity int) int
	}

	Query struct {
		Alert                          func(childComplexity int) int
		BalanceList                    func(childComplexity int) int
		BankDetailsByInvoiceID         func(childComplexity int, input *model.RecordRequest) int
		CategoryList                   func(childComplexity int) int
		ContractByOfferID              func(childComplexity int, input model.RecordRequest) int
		ContractList                   func(childComplexity int) int
		CurrencyList                   func(childComplexity int) int
		DealByOfferID                  func(childComplexity int, input model.RecordRequest) int
		DealList                       func(childComplexity int) int
		InterestByDealID               func(childComplexity int, input *model.RecordRequest) int
		InterestByOfferID              func(childComplexity int, input *model.RecordRequest) int
		InterestListByOfferID          func(childComplexity int, input *model.RecordRequest) int
		Invest                         func(childComplexity int, input model.RecordRequest) int
		InvestByOfferID                func(childComplexity int, input *model.RecordRequest) int
		Invoice                        func(childComplexity int, input model.RecordRequest) int
		InvoiceByDealID                func(childComplexity int, input *model.RecordRequest) int
		ManagerAppointment             func(childComplexity int, input model.RecordRequest) int
		ManagerAppointmentList         func(childComplexity int, input *model.ListRequest) int
		ManagerAppointmentListByLeadID func(childComplexity int, input *model.RecordRequest) int
		ManagerBankDetails             func(childComplexity int, input model.RecordRequest) int
		ManagerBankDetailsByOfferID    func(childComplexity int, input *model.RecordRequest) int
		ManagerBankDetailsList         func(childComplexity int, input *model.ListRequest) int
		ManagerCampaign                func(childComplexity int, input model.RecordRequest) int
		ManagerCampaignList            func(childComplexity int, input *model.ListRequest) int
		ManagerCategory                func(childComplexity int, input model.RecordRequest) int
		ManagerCategoryList            func(childComplexity int, input *model.ListRequest) int
		ManagerChecklist               func(childComplexity int, input model.RecordRequest) int
		ManagerChecklistList           func(childComplexity int, input *model.ListRequest) int
		ManagerComment                 func(childComplexity int, input model.RecordRequest) int
		ManagerCommentList             func(childComplexity int, input *model.ListRequest) int
		ManagerCommentListByLeadID     func(childComplexity int, input *model.RecordRequest) int
		ManagerContract                func(childComplexity int, input model.RecordRequest) int
		ManagerContractList            func(childComplexity int, input *model.ListRequest) int
		ManagerContractListByOfferID   func(childComplexity int, input *model.RecordRequest) int
		ManagerCurrency                func(childComplexity int, input model.RecordRequest) int
		ManagerCurrencyList            func(childComplexity int, input *model.ListRequest) int
		ManagerDeal                    func(childComplexity int, input model.RecordRequest) int
		ManagerDealByContractID        func(childComplexity int, input *model.ManagerDealByContractIDRequest) int
		ManagerDealList                func(childComplexity int, input *model.ListRequest) int
		ManagerDealListByOfferID       func(childComplexity int, input model.RecordRequest) int
		ManagerInterestListByOfferID   func(childComplexity int, input *model.RecordRequest) int
		ManagerInvest                  func(childComplexity int, input model.RecordRequest) int
		ManagerInvestByOfferID         func(childComplexity int, input *model.RecordRequest) int
		ManagerInvestList              func(childComplexity int, input *model.ListRequest) int
		ManagerInvoiceByDealID         func(childComplexity int, input *model.RecordRequest) int
		ManagerLead                    func(childComplexity int, input model.RecordRequest) int
		ManagerLeadList                func(childComplexity int, input *model.ListRequest) int
		ManagerManager                 func(childComplexity int, input model.RecordRequest) int
		ManagerManagerList             func(childComplexity int, input *model.ListRequest) int
		ManagerMediaByInvestID         func(childComplexity int, input model.ManagerMediaByInvestIDRequest) int
		ManagerMember                  func(childComplexity int, input model.RecordRequest) int
		ManagerMemberByOfferID         func(childComplexity int, input model.RecordRequest) int
		ManagerOffer                   func(childComplexity int, input model.RecordRequest) int
		ManagerOfferList               func(childComplexity int, input *model.ListRequest) int
		ManagerSearchBankDetails       func(childComplexity int, input *model.SearchRequest) int
		ManagerSearchContract          func(childComplexity int, input *model.SearchRequest) int
		ManagerSearchCurrency          func(childComplexity int, input *model.SearchRequest) int
		ManagerSearchInvest            func(childComplexity int, input *model.SearchRequest) int
		ManagerSearchManager           func(childComplexity int, input *model.SearchRequest) int
		ManagerSearchMember            func(childComplexity int, input *model.SearchRequest) int
		ManagerSearchMemberNoManager   func(childComplexity int, input *model.SearchRequest) int
		Member                         func(childComplexity int) int
		Offer                          func(childComplexity int, input model.RecordRequest) int
		OfferByInvoiceID               func(childComplexity int, input model.RecordRequest) int
		OfferList                      func(childComplexity int) int
		TXList                         func(childComplexity int) int
	}

	Result struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	SignInResponse struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Token   func(childComplexity int) int
	}

	Subscription struct {
		NewInfo func(childComplexity int) int
	}

	Tx struct {
		Amount            func(childComplexity int) int
		AmountNegative    func(childComplexity int) int
		CurrencyID        func(childComplexity int) int
		DateComplete      func(childComplexity int) int
		DateCreated       func(childComplexity int) int
		MemberID          func(childComplexity int) int
		Status            func(childComplexity int) int
		TimestampComplete func(childComplexity int) int
		TimestampCreated  func(childComplexity int) int
		Txid              func(childComplexity int) int
	}

	Upload struct {
		Category func(childComplexity int) int
		Created  func(childComplexity int) int
		Filename func(childComplexity int) int
		MemberID func(childComplexity int) int
		URL      func(childComplexity int) int
		UploadID func(childComplexity int) int
	}

	ValudationStatus struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
	}

	VerifyResendResponse struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Timeout func(childComplexity int) int
	}

	VerifyResponse struct {
		Message func(childComplexity int) int
		Status  func(childComplexity int) int
		Token   func(childComplexity int) int
	}
}

type MutationResolver interface {
	MemberPersonalUpdate(ctx context.Context, input model.MemberPersonalUpdateRequest) (*model.Result, error)
	MemberPhoneUpdate(ctx context.Context, input model.MemberPhoneUpdateRequest) (*model.Result, error)
	MemberEmailUpdate(ctx context.Context, input model.MemberEmailUpdateRequest) (*model.Result, error)
	ManagerCreateBankDetails(ctx context.Context, input model.ManagerCreateBankDetailsRequest) (*model.CreationResponse, error)
	ManagerCreateInvest(ctx context.Context, input model.ManagerCreateInvestRequest) (*model.CreationResponse, error)
	ManagerCreateOffer(ctx context.Context, input model.ManagerCreateOfferRequest) (*model.CreationResponse, error)
	ManagerCreateInterest(ctx context.Context, input model.ManagerCreateInterestRequest) (*model.CreationResponse, error)
	ManagerCreateCategory(ctx context.Context, input model.ManagerCreateCategoryRequest) (*model.CreationResponse, error)
	ManagerCreateContract(ctx context.Context, input model.ManagerCreateContractRequest) (*model.CreationResponse, error)
	ManagerCreateCurrency(ctx context.Context, input model.ManagerCreateCurrencyRequest) (*model.CreationResponse, error)
	ManagerCreateLead(ctx context.Context, input model.ManagerCreateLeadRequest) (*model.CreationResponse, error)
	ManagerCreateComment(ctx context.Context, input model.ManagerCreateCommentRequest) (*model.CreationResponse, error)
	ManagerCreateChecklist(ctx context.Context, input model.ManagerCreateChecklistRequest) (*model.CreationResponse, error)
	ManagerCreateAppointment(ctx context.Context, input model.ManagerCreateAppointmentRequest) (*model.CreationResponse, error)
	ManagerCreateCampaign(ctx context.Context, input model.ManagerCreateCampaignRequest) (*model.CreationResponse, error)
	ManagerAssignMemberToOffer(ctx context.Context, input model.ManagerAssignMemberToOfferRequest) (*model.Result, error)
	ManagerAssignInvestToOffer(ctx context.Context, input model.ManagerAssignInvestToOfferRequest) (*model.Result, error)
	ManagerDuplicateAndAssignContractToOffer(ctx context.Context, input model.ManagerDuplicateAndAssignContractToOfferRequest) (*model.Result, error)
	ManagerAssignBankDetailsToOffer(ctx context.Context, input model.ManagerAssignBankDetailsToOfferRequest) (*model.Result, error)
	ManagerAssignLeadToManager(ctx context.Context, input model.ManagerAssignLeadToManagerRequest) (*model.Result, error)
	ManagerDuplicateInvest(ctx context.Context, input model.ManagerDuplicateRequest) (*model.CreationResponse, error)
	ManagerDuplicateOffer(ctx context.Context, input model.ManagerDuplicateRequest) (*model.CreationResponse, error)
	ManagerDuplicateContract(ctx context.Context, input model.ManagerDuplicateRequest) (*model.CreationResponse, error)
	ManagerDeactivateOffer(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerActivateOffer(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerCancelOffer(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerEditBankDetails(ctx context.Context, input model.ManagerEditBankDetailsRequest) (*model.Result, error)
	ManagerEditInvest(ctx context.Context, input model.ManagerEditInvestRequest) (*model.Result, error)
	ManagerEditOffer(ctx context.Context, input model.ManagerEditOfferRequest) (*model.Result, error)
	ManagerEditCategory(ctx context.Context, input model.ManagerEditCategoryRequest) (*model.Result, error)
	ManagerEditContract(ctx context.Context, input model.ManagerEditContractRequest) (*model.Result, error)
	ManagerEditCurrency(ctx context.Context, input model.ManagerEditCurrencyRequest) (*model.Result, error)
	ManagerEditInvoice(ctx context.Context, input model.ManagerEditInvoiceRequest) (*model.Result, error)
	ManagerEditLead(ctx context.Context, input model.ManagerEditLeadRequest) (*model.Result, error)
	ManagerEditComment(ctx context.Context, input model.ManagerEditCommentRequest) (*model.Result, error)
	ManagerEditChecklist(ctx context.Context, input model.ManagerEditChecklistRequest) (*model.Result, error)
	ManagerEditAppointment(ctx context.Context, input model.ManagerEditAppointmentRequest) (*model.Result, error)
	ManagerEditCampaign(ctx context.Context, input model.ManagerEditCampaignRequest) (*model.Result, error)
	ManagerEditMedia(ctx context.Context, input model.ManagerEditMediaRequest) (*model.Result, error)
	ManagerRemoveLead(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerRemoveComment(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerRemoveChecklist(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerRemoveAppointment(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerRemoveCampaign(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerRemoveInterest(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerRemoveManager(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerRemoveMedia(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	ManagerDragMedia(ctx context.Context, input model.DragRequest) (*model.Result, error)
	ManagerAssignManager(ctx context.Context, input model.ManagerAssignManagerRequest) (*model.Result, error)
	ValidateField(ctx context.Context, input model.ValidateFieldRequest) (*model.ValudationStatus, error)
	OfferInitDeal(ctx context.Context, input model.OfferInitDealRequest) (*model.Result, error)
	OfferGeneratePdf(ctx context.Context, input model.RecordRequest) (*model.OfferPdf, error)
	OfferSign(ctx context.Context, input model.OfferSignRequest) (*model.OfferSignResult, error)
	CancelDeal(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	RemoveDeal(ctx context.Context, input model.RecordRequest) (*model.Result, error)
	InvoiceSendToEmail(ctx context.Context, input model.InvoiceSendToEmailRequest) (*model.Result, error)
	SignIn(ctx context.Context, input model.SignInRequest) (*model.SignInResponse, error)
	SignUp(ctx context.Context, input model.SignUpRequest) (*model.CreationResponse, error)
	Reset(ctx context.Context, input model.ResetRequest) (*model.Result, error)
	ResetComplete(ctx context.Context, input model.ResetCompleteRequest) (*model.VerifyResponse, error)
	PhoneVerify(ctx context.Context, input model.PhoneVerifyRequest) (*model.PhoneVerifyResponse, error)
	Verify(ctx context.Context, input model.VerifyRequest) (*model.VerifyResponse, error)
	VerifyResend(ctx context.Context, input model.VerifyResendRequest) (*model.VerifyResendResponse, error)
	OfferPhoneVerify(ctx context.Context, input model.OfferPhoneVerifyRequest) (*model.Result, error)
	OfferPhoneVerifyResend(ctx context.Context, input model.RecordRequest) (*model.PhoneVerifyResponse, error)
}
type QueryResolver interface {
	Invest(ctx context.Context, input model.RecordRequest) (*model.Invest, error)
	InvestByOfferID(ctx context.Context, input *model.RecordRequest) (*model.Invest, error)
	InterestListByOfferID(ctx context.Context, input *model.RecordRequest) ([]*model.Interest, error)
	ManagerDealByContractID(ctx context.Context, input *model.ManagerDealByContractIDRequest) (*model.Deal, error)
	Offer(ctx context.Context, input model.RecordRequest) (*model.Offer, error)
	ContractByOfferID(ctx context.Context, input model.RecordRequest) (*model.Contract, error)
	DealByOfferID(ctx context.Context, input model.RecordRequest) (*model.Deal, error)
	InterestByDealID(ctx context.Context, input *model.RecordRequest) (*model.Interest, error)
	InterestByOfferID(ctx context.Context, input *model.RecordRequest) (*model.Interest, error)
	Invoice(ctx context.Context, input model.RecordRequest) (*model.Invoice, error)
	InvoiceByDealID(ctx context.Context, input *model.RecordRequest) (*model.Invoice, error)
	BankDetailsByInvoiceID(ctx context.Context, input *model.RecordRequest) (*model.BankDetails, error)
	OfferByInvoiceID(ctx context.Context, input model.RecordRequest) (*model.Invest, error)
	ManagerBankDetails(ctx context.Context, input model.RecordRequest) (*model.BankDetails, error)
	ManagerBankDetailsByOfferID(ctx context.Context, input *model.RecordRequest) (*model.BankDetails, error)
	ManagerInvest(ctx context.Context, input model.RecordRequest) (*model.Invest, error)
	ManagerMediaByInvestID(ctx context.Context, input model.ManagerMediaByInvestIDRequest) ([]*model.Media, error)
	ManagerInvestByOfferID(ctx context.Context, input *model.RecordRequest) (*model.Invest, error)
	ManagerOffer(ctx context.Context, input model.RecordRequest) (*model.ManagerOffer, error)
	ManagerDeal(ctx context.Context, input model.RecordRequest) (*model.Deal, error)
	ManagerInvoiceByDealID(ctx context.Context, input *model.RecordRequest) (*model.Invoice, error)
	ManagerContract(ctx context.Context, input model.RecordRequest) (*model.Contract, error)
	ManagerCategory(ctx context.Context, input model.RecordRequest) (*model.Category, error)
	ManagerCurrency(ctx context.Context, input model.RecordRequest) (*model.Currency, error)
	ManagerMember(ctx context.Context, input model.RecordRequest) (*model.Member, error)
	ManagerMemberByOfferID(ctx context.Context, input model.RecordRequest) (*model.Member, error)
	ManagerManager(ctx context.Context, input model.RecordRequest) (*model.Member, error)
	ManagerLead(ctx context.Context, input model.RecordRequest) (*model.Lead, error)
	ManagerComment(ctx context.Context, input model.RecordRequest) (*model.Comment, error)
	ManagerChecklist(ctx context.Context, input model.RecordRequest) (*model.Checklist, error)
	ManagerAppointment(ctx context.Context, input model.RecordRequest) (*model.Appointment, error)
	ManagerCampaign(ctx context.Context, input model.RecordRequest) (*model.Campaign, error)
	OfferList(ctx context.Context) ([]*model.Invest, error)
	DealList(ctx context.Context) ([]*model.Deal, error)
	ContractList(ctx context.Context) ([]*model.Contract, error)
	CategoryList(ctx context.Context) ([]*model.Category, error)
	CurrencyList(ctx context.Context) ([]*model.Currency, error)
	BalanceList(ctx context.Context) ([]*model.Balance, error)
	TXList(ctx context.Context) ([]*model.Tx, error)
	ManagerBankDetailsList(ctx context.Context, input *model.ListRequest) ([]*model.BankDetails, error)
	ManagerInvestList(ctx context.Context, input *model.ListRequest) ([]*model.Invest, error)
	ManagerOfferList(ctx context.Context, input *model.ListRequest) ([]*model.ManagerOffer, error)
	ManagerDealList(ctx context.Context, input *model.ListRequest) ([]*model.Deal, error)
	ManagerDealListByOfferID(ctx context.Context, input model.RecordRequest) ([]*model.Deal, error)
	ManagerContractList(ctx context.Context, input *model.ListRequest) ([]*model.Contract, error)
	ManagerCategoryList(ctx context.Context, input *model.ListRequest) ([]*model.Category, error)
	ManagerCurrencyList(ctx context.Context, input *model.ListRequest) ([]*model.Currency, error)
	ManagerLeadList(ctx context.Context, input *model.ListRequest) ([]*model.Lead, error)
	ManagerCommentList(ctx context.Context, input *model.ListRequest) ([]*model.Comment, error)
	ManagerCommentListByLeadID(ctx context.Context, input *model.RecordRequest) ([]*model.Comment, error)
	ManagerChecklistList(ctx context.Context, input *model.ListRequest) ([]*model.Checklist, error)
	ManagerAppointmentList(ctx context.Context, input *model.ListRequest) ([]*model.Appointment, error)
	ManagerAppointmentListByLeadID(ctx context.Context, input *model.RecordRequest) ([]*model.Appointment, error)
	ManagerCampaignList(ctx context.Context, input *model.ListRequest) ([]*model.Campaign, error)
	ManagerManagerList(ctx context.Context, input *model.ListRequest) ([]*model.Member, error)
	ManagerContractListByOfferID(ctx context.Context, input *model.RecordRequest) ([]*model.Contract, error)
	ManagerInterestListByOfferID(ctx context.Context, input *model.RecordRequest) ([]*model.Interest, error)
	ManagerSearchMember(ctx context.Context, input *model.SearchRequest) ([]*model.Member, error)
	ManagerSearchMemberNoManager(ctx context.Context, input *model.SearchRequest) ([]*model.Member, error)
	ManagerSearchInvest(ctx context.Context, input *model.SearchRequest) ([]*model.Invest, error)
	ManagerSearchContract(ctx context.Context, input *model.SearchRequest) ([]*model.Contract, error)
	ManagerSearchCurrency(ctx context.Context, input *model.SearchRequest) ([]*model.Currency, error)
	ManagerSearchBankDetails(ctx context.Context, input *model.SearchRequest) ([]*model.BankDetails, error)
	ManagerSearchManager(ctx context.Context, input *model.SearchRequest) ([]*model.ManagerSearch, error)
	Member(ctx context.Context) (*model.Member, error)
	Alert(ctx context.Context) ([]*model.Alert, error)
}
type SubscriptionResolver interface {
	NewInfo(ctx context.Context) (<-chan *model.Info, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Alert.AlertID":
		if e.complexity.Alert.AlertID == nil {
			break
		}

		return e.complexity.Alert.AlertID(childComplexity), true

	case "Alert.AssetID":
		if e.complexity.Alert.AssetID == nil {
			break
		}

		return e.complexity.Alert.AssetID(childComplexity), true

	case "Alert.Price":
		if e.complexity.Alert.Price == nil {
			break
		}

		return e.complexity.Alert.Price(childComplexity), true

	case "Alert.TimestampOpen":
		if e.complexity.Alert.TimestampOpen == nil {
			break
		}

		return e.complexity.Alert.TimestampOpen(childComplexity), true

	case "Appointment.AppointmentID":
		if e.complexity.Appointment.AppointmentID == nil {
			break
		}

		return e.complexity.Appointment.AppointmentID(childComplexity), true

	case "Appointment.DateCreated":
		if e.complexity.Appointment.DateCreated == nil {
			break
		}

		return e.complexity.Appointment.DateCreated(childComplexity), true

	case "Appointment.DateDue":
		if e.complexity.Appointment.DateDue == nil {
			break
		}

		return e.complexity.Appointment.DateDue(childComplexity), true

	case "Appointment.Description":
		if e.complexity.Appointment.Description == nil {
			break
		}

		return e.complexity.Appointment.Description(childComplexity), true

	case "Appointment.LeadID":
		if e.complexity.Appointment.LeadID == nil {
			break
		}

		return e.complexity.Appointment.LeadID(childComplexity), true

	case "Appointment.Status":
		if e.complexity.Appointment.Status == nil {
			break
		}

		return e.complexity.Appointment.Status(childComplexity), true

	case "Appointment.TimestampCreated":
		if e.complexity.Appointment.TimestampCreated == nil {
			break
		}

		return e.complexity.Appointment.TimestampCreated(childComplexity), true

	case "Appointment.TimestampDue":
		if e.complexity.Appointment.TimestampDue == nil {
			break
		}

		return e.complexity.Appointment.TimestampDue(childComplexity), true

	case "Appointment.Title":
		if e.complexity.Appointment.Title == nil {
			break
		}

		return e.complexity.Appointment.Title(childComplexity), true

	case "Appointment.Type":
		if e.complexity.Appointment.Type == nil {
			break
		}

		return e.complexity.Appointment.Type(childComplexity), true

	case "Balance.Amount":
		if e.complexity.Balance.Amount == nil {
			break
		}

		return e.complexity.Balance.Amount(childComplexity), true

	case "Balance.AmountNegative":
		if e.complexity.Balance.AmountNegative == nil {
			break
		}

		return e.complexity.Balance.AmountNegative(childComplexity), true

	case "Balance.BalanceID":
		if e.complexity.Balance.BalanceID == nil {
			break
		}

		return e.complexity.Balance.BalanceID(childComplexity), true

	case "Balance.CurrencyID":
		if e.complexity.Balance.CurrencyID == nil {
			break
		}

		return e.complexity.Balance.CurrencyID(childComplexity), true

	case "Balance.MemberID":
		if e.complexity.Balance.MemberID == nil {
			break
		}

		return e.complexity.Balance.MemberID(childComplexity), true

	case "BankDetails.BankAccountNumber":
		if e.complexity.BankDetails.BankAccountNumber == nil {
			break
		}

		return e.complexity.BankDetails.BankAccountNumber(childComplexity), true

	case "BankDetails.BankAccountType":
		if e.complexity.BankDetails.BankAccountType == nil {
			break
		}

		return e.complexity.BankDetails.BankAccountType(childComplexity), true

	case "BankDetails.BankBIC":
		if e.complexity.BankDetails.BankBic == nil {
			break
		}

		return e.complexity.BankDetails.BankBic(childComplexity), true

	case "BankDetails.BankBranch":
		if e.complexity.BankDetails.BankBranch == nil {
			break
		}

		return e.complexity.BankDetails.BankBranch(childComplexity), true

	case "BankDetails.BankBranchAddress":
		if e.complexity.BankDetails.BankBranchAddress == nil {
			break
		}

		return e.complexity.BankDetails.BankBranchAddress(childComplexity), true

	case "BankDetails.BankBranchCity":
		if e.complexity.BankDetails.BankBranchCity == nil {
			break
		}

		return e.complexity.BankDetails.BankBranchCity(childComplexity), true

	case "BankDetails.BankBranchCountry":
		if e.complexity.BankDetails.BankBranchCountry == nil {
			break
		}

		return e.complexity.BankDetails.BankBranchCountry(childComplexity), true

	case "BankDetails.BankBranchZip":
		if e.complexity.BankDetails.BankBranchZip == nil {
			break
		}

		return e.complexity.BankDetails.BankBranchZip(childComplexity), true

	case "BankDetails.BankDetailsID":
		if e.complexity.BankDetails.BankDetailsID == nil {
			break
		}

		return e.complexity.BankDetails.BankDetailsID(childComplexity), true

	case "BankDetails.BankIBAN":
		if e.complexity.BankDetails.BankIban == nil {
			break
		}

		return e.complexity.BankDetails.BankIban(childComplexity), true

	case "BankDetails.BankIFSC":
		if e.complexity.BankDetails.BankIfsc == nil {
			break
		}

		return e.complexity.BankDetails.BankIfsc(childComplexity), true

	case "BankDetails.BankName":
		if e.complexity.BankDetails.BankName == nil {
			break
		}

		return e.complexity.BankDetails.BankName(childComplexity), true

	case "BankDetails.BankRoutingNumber":
		if e.complexity.BankDetails.BankRoutingNumber == nil {
			break
		}

		return e.complexity.BankDetails.BankRoutingNumber(childComplexity), true

	case "BankDetails.BankSWIFTCorrespondent":
		if e.complexity.BankDetails.BankSWIFTCorrespondent == nil {
			break
		}

		return e.complexity.BankDetails.BankSWIFTCorrespondent(childComplexity), true

	case "BankDetails.BankSWIFT":
		if e.complexity.BankDetails.BankSwift == nil {
			break
		}

		return e.complexity.BankDetails.BankSwift(childComplexity), true

	case "BankDetails.BankTransferCaption":
		if e.complexity.BankDetails.BankTransferCaption == nil {
			break
		}

		return e.complexity.BankDetails.BankTransferCaption(childComplexity), true

	case "BankDetails.BeneficiaryAddress":
		if e.complexity.BankDetails.BeneficiaryAddress == nil {
			break
		}

		return e.complexity.BankDetails.BeneficiaryAddress(childComplexity), true

	case "BankDetails.BeneficiaryCity":
		if e.complexity.BankDetails.BeneficiaryCity == nil {
			break
		}

		return e.complexity.BankDetails.BeneficiaryCity(childComplexity), true

	case "BankDetails.BeneficiaryCompany":
		if e.complexity.BankDetails.BeneficiaryCompany == nil {
			break
		}

		return e.complexity.BankDetails.BeneficiaryCompany(childComplexity), true

	case "BankDetails.BeneficiaryCountry":
		if e.complexity.BankDetails.BeneficiaryCountry == nil {
			break
		}

		return e.complexity.BankDetails.BeneficiaryCountry(childComplexity), true

	case "BankDetails.BeneficiaryFirstName":
		if e.complexity.BankDetails.BeneficiaryFirstName == nil {
			break
		}

		return e.complexity.BankDetails.BeneficiaryFirstName(childComplexity), true

	case "BankDetails.BeneficiaryLastName":
		if e.complexity.BankDetails.BeneficiaryLastName == nil {
			break
		}

		return e.complexity.BankDetails.BeneficiaryLastName(childComplexity), true

	case "BankDetails.BeneficiaryZip":
		if e.complexity.BankDetails.BeneficiaryZip == nil {
			break
		}

		return e.complexity.BankDetails.BeneficiaryZip(childComplexity), true

	case "BankDetails.Title":
		if e.complexity.BankDetails.Title == nil {
			break
		}

		return e.complexity.BankDetails.Title(childComplexity), true

	case "Campaign.CampaignID":
		if e.complexity.Campaign.CampaignID == nil {
			break
		}

		return e.complexity.Campaign.CampaignID(childComplexity), true

	case "Campaign.DateCreated":
		if e.complexity.Campaign.DateCreated == nil {
			break
		}

		return e.complexity.Campaign.DateCreated(childComplexity), true

	case "Campaign.Description":
		if e.complexity.Campaign.Description == nil {
			break
		}

		return e.complexity.Campaign.Description(childComplexity), true

	case "Campaign.TimestampCreated":
		if e.complexity.Campaign.TimestampCreated == nil {
			break
		}

		return e.complexity.Campaign.TimestampCreated(childComplexity), true

	case "Campaign.Title":
		if e.complexity.Campaign.Title == nil {
			break
		}

		return e.complexity.Campaign.Title(childComplexity), true

	case "Category.CategoryID":
		if e.complexity.Category.CategoryID == nil {
			break
		}

		return e.complexity.Category.CategoryID(childComplexity), true

	case "Category.Title":
		if e.complexity.Category.Title == nil {
			break
		}

		return e.complexity.Category.Title(childComplexity), true

	case "Checklist.ChecklistID":
		if e.complexity.Checklist.ChecklistID == nil {
			break
		}

		return e.complexity.Checklist.ChecklistID(childComplexity), true

	case "Checklist.Complete":
		if e.complexity.Checklist.Complete == nil {
			break
		}

		return e.complexity.Checklist.Complete(childComplexity), true

	case "Checklist.DateCreated":
		if e.complexity.Checklist.DateCreated == nil {
			break
		}

		return e.complexity.Checklist.DateCreated(childComplexity), true

	case "Checklist.LeadID":
		if e.complexity.Checklist.LeadID == nil {
			break
		}

		return e.complexity.Checklist.LeadID(childComplexity), true

	case "Checklist.Position":
		if e.complexity.Checklist.Position == nil {
			break
		}

		return e.complexity.Checklist.Position(childComplexity), true

	case "Checklist.TimestampCreated":
		if e.complexity.Checklist.TimestampCreated == nil {
			break
		}

		return e.complexity.Checklist.TimestampCreated(childComplexity), true

	case "Checklist.Title":
		if e.complexity.Checklist.Title == nil {
			break
		}

		return e.complexity.Checklist.Title(childComplexity), true

	case "Comment.CommentID":
		if e.complexity.Comment.CommentID == nil {
			break
		}

		return e.complexity.Comment.CommentID(childComplexity), true

	case "Comment.Content":
		if e.complexity.Comment.Content == nil {
			break
		}

		return e.complexity.Comment.Content(childComplexity), true

	case "Comment.DateCreated":
		if e.complexity.Comment.DateCreated == nil {
			break
		}

		return e.complexity.Comment.DateCreated(childComplexity), true

	case "Comment.DateEdited":
		if e.complexity.Comment.DateEdited == nil {
			break
		}

		return e.complexity.Comment.DateEdited(childComplexity), true

	case "Comment.LeadID":
		if e.complexity.Comment.LeadID == nil {
			break
		}

		return e.complexity.Comment.LeadID(childComplexity), true

	case "Comment.MemberID":
		if e.complexity.Comment.MemberID == nil {
			break
		}

		return e.complexity.Comment.MemberID(childComplexity), true

	case "Comment.TimestampCreated":
		if e.complexity.Comment.TimestampCreated == nil {
			break
		}

		return e.complexity.Comment.TimestampCreated(childComplexity), true

	case "Comment.TimestampEdited":
		if e.complexity.Comment.TimestampEdited == nil {
			break
		}

		return e.complexity.Comment.TimestampEdited(childComplexity), true

	case "Contract.Content":
		if e.complexity.Contract.Content == nil {
			break
		}

		return e.complexity.Contract.Content(childComplexity), true

	case "Contract.ContentRaw":
		if e.complexity.Contract.ContentRaw == nil {
			break
		}

		return e.complexity.Contract.ContentRaw(childComplexity), true

	case "Contract.ContractID":
		if e.complexity.Contract.ContractID == nil {
			break
		}

		return e.complexity.Contract.ContractID(childComplexity), true

	case "Contract.Current":
		if e.complexity.Contract.Current == nil {
			break
		}

		return e.complexity.Contract.Current(childComplexity), true

	case "Contract.OfferID":
		if e.complexity.Contract.OfferID == nil {
			break
		}

		return e.complexity.Contract.OfferID(childComplexity), true

	case "Contract.Template":
		if e.complexity.Contract.Template == nil {
			break
		}

		return e.complexity.Contract.Template(childComplexity), true

	case "Contract.Title":
		if e.complexity.Contract.Title == nil {
			break
		}

		return e.complexity.Contract.Title(childComplexity), true

	case "CreationResponse.RecordID":
		if e.complexity.CreationResponse.RecordID == nil {
			break
		}

		return e.complexity.CreationResponse.RecordID(childComplexity), true

	case "Currency.CurrencyID":
		if e.complexity.Currency.CurrencyID == nil {
			break
		}

		return e.complexity.Currency.CurrencyID(childComplexity), true

	case "Currency.Symbol":
		if e.complexity.Currency.Symbol == nil {
			break
		}

		return e.complexity.Currency.Symbol(childComplexity), true

	case "Currency.Title":
		if e.complexity.Currency.Title == nil {
			break
		}

		return e.complexity.Currency.Title(childComplexity), true

	case "Deal.Amount":
		if e.complexity.Deal.Amount == nil {
			break
		}

		return e.complexity.Deal.Amount(childComplexity), true

	case "Deal.ContractID":
		if e.complexity.Deal.ContractID == nil {
			break
		}

		return e.complexity.Deal.ContractID(childComplexity), true

	case "Deal.CurrencyID":
		if e.complexity.Deal.CurrencyID == nil {
			break
		}

		return e.complexity.Deal.CurrencyID(childComplexity), true

	case "Deal.DateCreated":
		if e.complexity.Deal.DateCreated == nil {
			break
		}

		return e.complexity.Deal.DateCreated(childComplexity), true

	case "Deal.DateEnd":
		if e.complexity.Deal.DateEnd == nil {
			break
		}

		return e.complexity.Deal.DateEnd(childComplexity), true

	case "Deal.DatePaid":
		if e.complexity.Deal.DatePaid == nil {
			break
		}

		return e.complexity.Deal.DatePaid(childComplexity), true

	case "Deal.DateSigned":
		if e.complexity.Deal.DateSigned == nil {
			break
		}

		return e.complexity.Deal.DateSigned(childComplexity), true

	case "Deal.DateStart":
		if e.complexity.Deal.DateStart == nil {
			break
		}

		return e.complexity.Deal.DateStart(childComplexity), true

	case "Deal.DateVerified":
		if e.complexity.Deal.DateVerified == nil {
			break
		}

		return e.complexity.Deal.DateVerified(childComplexity), true

	case "Deal.DealID":
		if e.complexity.Deal.DealID == nil {
			break
		}

		return e.complexity.Deal.DealID(childComplexity), true

	case "Deal.Duration":
		if e.complexity.Deal.Duration == nil {
			break
		}

		return e.complexity.Deal.Duration(childComplexity), true

	case "Deal.MemberID":
		if e.complexity.Deal.MemberID == nil {
			break
		}

		return e.complexity.Deal.MemberID(childComplexity), true

	case "Deal.OfferID":
		if e.complexity.Deal.OfferID == nil {
			break
		}

		return e.complexity.Deal.OfferID(childComplexity), true

	case "Deal.SignatureFilename":
		if e.complexity.Deal.SignatureFilename == nil {
			break
		}

		return e.complexity.Deal.SignatureFilename(childComplexity), true

	case "Deal.SignatureURL":
		if e.complexity.Deal.SignatureURL == nil {
			break
		}

		return e.complexity.Deal.SignatureURL(childComplexity), true

	case "Deal.Status":
		if e.complexity.Deal.Status == nil {
			break
		}

		return e.complexity.Deal.Status(childComplexity), true

	case "Deal.VerificationCode":
		if e.complexity.Deal.VerificationCode == nil {
			break
		}

		return e.complexity.Deal.VerificationCode(childComplexity), true

	case "FAQ.Answer":
		if e.complexity.Faq.Answer == nil {
			break
		}

		return e.complexity.Faq.Answer(childComplexity), true

	case "FAQ.FAQID":
		if e.complexity.Faq.Faqid == nil {
			break
		}

		return e.complexity.Faq.Faqid(childComplexity), true

	case "FAQ.Position":
		if e.complexity.Faq.Position == nil {
			break
		}

		return e.complexity.Faq.Position(childComplexity), true

	case "FAQ.Question":
		if e.complexity.Faq.Question == nil {
			break
		}

		return e.complexity.Faq.Question(childComplexity), true

	case "Info.Change":
		if e.complexity.Info.Change == nil {
			break
		}

		return e.complexity.Info.Change(childComplexity), true

	case "Info.Event":
		if e.complexity.Info.Event == nil {
			break
		}

		return e.complexity.Info.Event(childComplexity), true

	case "Info.ID":
		if e.complexity.Info.ID == nil {
			break
		}

		return e.complexity.Info.ID(childComplexity), true

	case "Info.MemberID":
		if e.complexity.Info.MemberID == nil {
			break
		}

		return e.complexity.Info.MemberID(childComplexity), true

	case "Info.Rate":
		if e.complexity.Info.Rate == nil {
			break
		}

		return e.complexity.Info.Rate(childComplexity), true

	case "Info.RateBuy":
		if e.complexity.Info.RateBuy == nil {
			break
		}

		return e.complexity.Info.RateBuy(childComplexity), true

	case "Info.RateSell":
		if e.complexity.Info.RateSell == nil {
			break
		}

		return e.complexity.Info.RateSell(childComplexity), true

	case "Info.Sentiment":
		if e.complexity.Info.Sentiment == nil {
			break
		}

		return e.complexity.Info.Sentiment(childComplexity), true

	case "Info.SentimentType":
		if e.complexity.Info.SentimentType == nil {
			break
		}

		return e.complexity.Info.SentimentType(childComplexity), true

	case "Info.Value":
		if e.complexity.Info.Value == nil {
			break
		}

		return e.complexity.Info.Value(childComplexity), true

	case "Interest.AmountFrom":
		if e.complexity.Interest.AmountFrom == nil {
			break
		}

		return e.complexity.Interest.AmountFrom(childComplexity), true

	case "Interest.AmountTo":
		if e.complexity.Interest.AmountTo == nil {
			break
		}

		return e.complexity.Interest.AmountTo(childComplexity), true

	case "Interest.DurationFrom":
		if e.complexity.Interest.DurationFrom == nil {
			break
		}

		return e.complexity.Interest.DurationFrom(childComplexity), true

	case "Interest.DurationTo":
		if e.complexity.Interest.DurationTo == nil {
			break
		}

		return e.complexity.Interest.DurationTo(childComplexity), true

	case "Interest.Interest":
		if e.complexity.Interest.Interest == nil {
			break
		}

		return e.complexity.Interest.Interest(childComplexity), true

	case "Interest.InterestID":
		if e.complexity.Interest.InterestID == nil {
			break
		}

		return e.complexity.Interest.InterestID(childComplexity), true

	case "Interest.OfferID":
		if e.complexity.Interest.OfferID == nil {
			break
		}

		return e.complexity.Interest.OfferID(childComplexity), true

	case "Invest.BankDetailsID":
		if e.complexity.Invest.BankDetailsID == nil {
			break
		}

		return e.complexity.Invest.BankDetailsID(childComplexity), true

	case "Invest.CategoryID":
		if e.complexity.Invest.CategoryID == nil {
			break
		}

		return e.complexity.Invest.CategoryID(childComplexity), true

	case "Invest.CurrencyID":
		if e.complexity.Invest.CurrencyID == nil {
			break
		}

		return e.complexity.Invest.CurrencyID(childComplexity), true

	case "Invest.Description":
		if e.complexity.Invest.Description == nil {
			break
		}

		return e.complexity.Invest.Description(childComplexity), true

	case "Invest.Document":
		if e.complexity.Invest.Document == nil {
			break
		}

		return e.complexity.Invest.Document(childComplexity), true

	case "Invest.FAQ":
		if e.complexity.Invest.Faq == nil {
			break
		}

		return e.complexity.Invest.Faq(childComplexity), true

	case "Invest.InvestID":
		if e.complexity.Invest.InvestID == nil {
			break
		}

		return e.complexity.Invest.InvestID(childComplexity), true

	case "Invest.OfferID":
		if e.complexity.Invest.OfferID == nil {
			break
		}

		return e.complexity.Invest.OfferID(childComplexity), true

	case "Invest.Photo":
		if e.complexity.Invest.Photo == nil {
			break
		}

		return e.complexity.Invest.Photo(childComplexity), true

	case "Invest.Status":
		if e.complexity.Invest.Status == nil {
			break
		}

		return e.complexity.Invest.Status(childComplexity), true

	case "Invest.Subtitle":
		if e.complexity.Invest.Subtitle == nil {
			break
		}

		return e.complexity.Invest.Subtitle(childComplexity), true

	case "Invest.Title":
		if e.complexity.Invest.Title == nil {
			break
		}

		return e.complexity.Invest.Title(childComplexity), true

	case "Invoice.Amount":
		if e.complexity.Invoice.Amount == nil {
			break
		}

		return e.complexity.Invoice.Amount(childComplexity), true

	case "Invoice.CurrencyID":
		if e.complexity.Invoice.CurrencyID == nil {
			break
		}

		return e.complexity.Invoice.CurrencyID(childComplexity), true

	case "Invoice.DateCreated":
		if e.complexity.Invoice.DateCreated == nil {
			break
		}

		return e.complexity.Invoice.DateCreated(childComplexity), true

	case "Invoice.DatePaid":
		if e.complexity.Invoice.DatePaid == nil {
			break
		}

		return e.complexity.Invoice.DatePaid(childComplexity), true

	case "Invoice.DealID":
		if e.complexity.Invoice.DealID == nil {
			break
		}

		return e.complexity.Invoice.DealID(childComplexity), true

	case "Invoice.InvoiceID":
		if e.complexity.Invoice.InvoiceID == nil {
			break
		}

		return e.complexity.Invoice.InvoiceID(childComplexity), true

	case "Invoice.MemberID":
		if e.complexity.Invoice.MemberID == nil {
			break
		}

		return e.complexity.Invoice.MemberID(childComplexity), true

	case "Invoice.OfferID":
		if e.complexity.Invoice.OfferID == nil {
			break
		}

		return e.complexity.Invoice.OfferID(childComplexity), true

	case "Invoice.Status":
		if e.complexity.Invoice.Status == nil {
			break
		}

		return e.complexity.Invoice.Status(childComplexity), true

	case "Invoice.TimestampCreated":
		if e.complexity.Invoice.TimestampCreated == nil {
			break
		}

		return e.complexity.Invoice.TimestampCreated(childComplexity), true

	case "Invoice.TimestampPaid":
		if e.complexity.Invoice.TimestampPaid == nil {
			break
		}

		return e.complexity.Invoice.TimestampPaid(childComplexity), true

	case "Lead.Address1":
		if e.complexity.Lead.Address1 == nil {
			break
		}

		return e.complexity.Lead.Address1(childComplexity), true

	case "Lead.Address2":
		if e.complexity.Lead.Address2 == nil {
			break
		}

		return e.complexity.Lead.Address2(childComplexity), true

	case "Lead.Birthday":
		if e.complexity.Lead.Birthday == nil {
			break
		}

		return e.complexity.Lead.Birthday(childComplexity), true

	case "Lead.CampaignID":
		if e.complexity.Lead.CampaignID == nil {
			break
		}

		return e.complexity.Lead.CampaignID(childComplexity), true

	case "Lead.Citizenship":
		if e.complexity.Lead.Citizenship == nil {
			break
		}

		return e.complexity.Lead.Citizenship(childComplexity), true

	case "Lead.City":
		if e.complexity.Lead.City == nil {
			break
		}

		return e.complexity.Lead.City(childComplexity), true

	case "Lead.Country":
		if e.complexity.Lead.Country == nil {
			break
		}

		return e.complexity.Lead.Country(childComplexity), true

	case "Lead.CurrencyID":
		if e.complexity.Lead.CurrencyID == nil {
			break
		}

		return e.complexity.Lead.CurrencyID(childComplexity), true

	case "Lead.DateCreated":
		if e.complexity.Lead.DateCreated == nil {
			break
		}

		return e.complexity.Lead.DateCreated(childComplexity), true

	case "Lead.Email":
		if e.complexity.Lead.Email == nil {
			break
		}

		return e.complexity.Lead.Email(childComplexity), true

	case "Lead.FamilyStatus":
		if e.complexity.Lead.FamilyStatus == nil {
			break
		}

		return e.complexity.Lead.FamilyStatus(childComplexity), true

	case "Lead.FirstName":
		if e.complexity.Lead.FirstName == nil {
			break
		}

		return e.complexity.Lead.FirstName(childComplexity), true

	case "Lead.Gender":
		if e.complexity.Lead.Gender == nil {
			break
		}

		return e.complexity.Lead.Gender(childComplexity), true

	case "Lead.IP":
		if e.complexity.Lead.IP == nil {
			break
		}

		return e.complexity.Lead.IP(childComplexity), true

	case "Lead.LastName":
		if e.complexity.Lead.LastName == nil {
			break
		}

		return e.complexity.Lead.LastName(childComplexity), true

	case "Lead.LeadID":
		if e.complexity.Lead.LeadID == nil {
			break
		}

		return e.complexity.Lead.LeadID(childComplexity), true

	case "Lead.MaidenName":
		if e.complexity.Lead.MaidenName == nil {
			break
		}

		return e.complexity.Lead.MaidenName(childComplexity), true

	case "Lead.ManagerID":
		if e.complexity.Lead.ManagerID == nil {
			break
		}

		return e.complexity.Lead.ManagerID(childComplexity), true

	case "Lead.MemberID":
		if e.complexity.Lead.MemberID == nil {
			break
		}

		return e.complexity.Lead.MemberID(childComplexity), true

	case "Lead.Phone":
		if e.complexity.Lead.Phone == nil {
			break
		}

		return e.complexity.Lead.Phone(childComplexity), true

	case "Lead.Status":
		if e.complexity.Lead.Status == nil {
			break
		}

		return e.complexity.Lead.Status(childComplexity), true

	case "Lead.StreetName":
		if e.complexity.Lead.StreetName == nil {
			break
		}

		return e.complexity.Lead.StreetName(childComplexity), true

	case "Lead.StreetNumber":
		if e.complexity.Lead.StreetNumber == nil {
			break
		}

		return e.complexity.Lead.StreetNumber(childComplexity), true

	case "Lead.TimestampCreated":
		if e.complexity.Lead.TimestampCreated == nil {
			break
		}

		return e.complexity.Lead.TimestampCreated(childComplexity), true

	case "Lead.Zip":
		if e.complexity.Lead.Zip == nil {
			break
		}

		return e.complexity.Lead.Zip(childComplexity), true

	case "ManagerOffer.BankDetailsID":
		if e.complexity.ManagerOffer.BankDetailsID == nil {
			break
		}

		return e.complexity.ManagerOffer.BankDetailsID(childComplexity), true

	case "ManagerOffer.CurrencyID":
		if e.complexity.ManagerOffer.CurrencyID == nil {
			break
		}

		return e.complexity.ManagerOffer.CurrencyID(childComplexity), true

	case "ManagerOffer.InvestID":
		if e.complexity.ManagerOffer.InvestID == nil {
			break
		}

		return e.complexity.ManagerOffer.InvestID(childComplexity), true

	case "ManagerOffer.MemberID":
		if e.complexity.ManagerOffer.MemberID == nil {
			break
		}

		return e.complexity.ManagerOffer.MemberID(childComplexity), true

	case "ManagerOffer.OfferID":
		if e.complexity.ManagerOffer.OfferID == nil {
			break
		}

		return e.complexity.ManagerOffer.OfferID(childComplexity), true

	case "ManagerOffer.Status":
		if e.complexity.ManagerOffer.Status == nil {
			break
		}

		return e.complexity.ManagerOffer.Status(childComplexity), true

	case "ManagerOffer.Title":
		if e.complexity.ManagerOffer.Title == nil {
			break
		}

		return e.complexity.ManagerOffer.Title(childComplexity), true

	case "ManagerSearch.ManagerID":
		if e.complexity.ManagerSearch.ManagerID == nil {
			break
		}

		return e.complexity.ManagerSearch.ManagerID(childComplexity), true

	case "ManagerSearch.Title":
		if e.complexity.ManagerSearch.Title == nil {
			break
		}

		return e.complexity.ManagerSearch.Title(childComplexity), true

	case "Media.Category":
		if e.complexity.Media.Category == nil {
			break
		}

		return e.complexity.Media.Category(childComplexity), true

	case "Media.Created":
		if e.complexity.Media.Created == nil {
			break
		}

		return e.complexity.Media.Created(childComplexity), true

	case "Media.Filename":
		if e.complexity.Media.Filename == nil {
			break
		}

		return e.complexity.Media.Filename(childComplexity), true

	case "Media.InvestID":
		if e.complexity.Media.InvestID == nil {
			break
		}

		return e.complexity.Media.InvestID(childComplexity), true

	case "Media.MediaID":
		if e.complexity.Media.MediaID == nil {
			break
		}

		return e.complexity.Media.MediaID(childComplexity), true

	case "Media.MemberID":
		if e.complexity.Media.MemberID == nil {
			break
		}

		return e.complexity.Media.MemberID(childComplexity), true

	case "Media.Position":
		if e.complexity.Media.Position == nil {
			break
		}

		return e.complexity.Media.Position(childComplexity), true

	case "Media.Title":
		if e.complexity.Media.Title == nil {
			break
		}

		return e.complexity.Media.Title(childComplexity), true

	case "Media.URL":
		if e.complexity.Media.URL == nil {
			break
		}

		return e.complexity.Media.URL(childComplexity), true

	case "Member.Address1":
		if e.complexity.Member.Address1 == nil {
			break
		}

		return e.complexity.Member.Address1(childComplexity), true

	case "Member.Address2":
		if e.complexity.Member.Address2 == nil {
			break
		}

		return e.complexity.Member.Address2(childComplexity), true

	case "Member.Birthday":
		if e.complexity.Member.Birthday == nil {
			break
		}

		return e.complexity.Member.Birthday(childComplexity), true

	case "Member.Citizenship":
		if e.complexity.Member.Citizenship == nil {
			break
		}

		return e.complexity.Member.Citizenship(childComplexity), true

	case "Member.City":
		if e.complexity.Member.City == nil {
			break
		}

		return e.complexity.Member.City(childComplexity), true

	case "Member.Country":
		if e.complexity.Member.Country == nil {
			break
		}

		return e.complexity.Member.Country(childComplexity), true

	case "Member.Created":
		if e.complexity.Member.Created == nil {
			break
		}

		return e.complexity.Member.Created(childComplexity), true

	case "Member.CurrencyID":
		if e.complexity.Member.CurrencyID == nil {
			break
		}

		return e.complexity.Member.CurrencyID(childComplexity), true

	case "Member.Email":
		if e.complexity.Member.Email == nil {
			break
		}

		return e.complexity.Member.Email(childComplexity), true

	case "Member.EmailNotifications":
		if e.complexity.Member.EmailNotifications == nil {
			break
		}

		return e.complexity.Member.EmailNotifications(childComplexity), true

	case "Member.EUR":
		if e.complexity.Member.Eur == nil {
			break
		}

		return e.complexity.Member.Eur(childComplexity), true

	case "Member.FamilyStatus":
		if e.complexity.Member.FamilyStatus == nil {
			break
		}

		return e.complexity.Member.FamilyStatus(childComplexity), true

	case "Member.FirstName":
		if e.complexity.Member.FirstName == nil {
			break
		}

		return e.complexity.Member.FirstName(childComplexity), true

	case "Member.Gender":
		if e.complexity.Member.Gender == nil {
			break
		}

		return e.complexity.Member.Gender(childComplexity), true

	case "Member.IP":
		if e.complexity.Member.IP == nil {
			break
		}

		return e.complexity.Member.IP(childComplexity), true

	case "Member.Image":
		if e.complexity.Member.Image == nil {
			break
		}

		return e.complexity.Member.Image(childComplexity), true

	case "Member.LastName":
		if e.complexity.Member.LastName == nil {
			break
		}

		return e.complexity.Member.LastName(childComplexity), true

	case "Member.LeverageAllowed":
		if e.complexity.Member.LeverageAllowed == nil {
			break
		}

		return e.complexity.Member.LeverageAllowed(childComplexity), true

	case "Member.MaidenName":
		if e.complexity.Member.MaidenName == nil {
			break
		}

		return e.complexity.Member.MaidenName(childComplexity), true

	case "Member.ManagerID":
		if e.complexity.Member.ManagerID == nil {
			break
		}

		return e.complexity.Member.ManagerID(childComplexity), true

	case "Member.ManagerRole":
		if e.complexity.Member.ManagerRole == nil {
			break
		}

		return e.complexity.Member.ManagerRole(childComplexity), true

	case "Member.MemberID":
		if e.complexity.Member.MemberID == nil {
			break
		}

		return e.complexity.Member.MemberID(childComplexity), true

	case "Member.Phone":
		if e.complexity.Member.Phone == nil {
			break
		}

		return e.complexity.Member.Phone(childComplexity), true

	case "Member.Role":
		if e.complexity.Member.Role == nil {
			break
		}

		return e.complexity.Member.Role(childComplexity), true

	case "Member.Status":
		if e.complexity.Member.Status == nil {
			break
		}

		return e.complexity.Member.Status(childComplexity), true

	case "Member.StopLossAllowed":
		if e.complexity.Member.StopLossAllowed == nil {
			break
		}

		return e.complexity.Member.StopLossAllowed(childComplexity), true

	case "Member.StreetName":
		if e.complexity.Member.StreetName == nil {
			break
		}

		return e.complexity.Member.StreetName(childComplexity), true

	case "Member.StreetNumber":
		if e.complexity.Member.StreetNumber == nil {
			break
		}

		return e.complexity.Member.StreetNumber(childComplexity), true

	case "Member.TakeProfitAllowed":
		if e.complexity.Member.TakeProfitAllowed == nil {
			break
		}

		return e.complexity.Member.TakeProfitAllowed(childComplexity), true

	case "Member.USD":
		if e.complexity.Member.Usd == nil {
			break
		}

		return e.complexity.Member.Usd(childComplexity), true

	case "Member.Zip":
		if e.complexity.Member.Zip == nil {
			break
		}

		return e.complexity.Member.Zip(childComplexity), true

	case "Mutation.CancelDeal":
		if e.complexity.Mutation.CancelDeal == nil {
			break
		}

		args, err := ec.field_Mutation_CancelDeal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CancelDeal(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.InvoiceSendToEmail":
		if e.complexity.Mutation.InvoiceSendToEmail == nil {
			break
		}

		args, err := ec.field_Mutation_InvoiceSendToEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InvoiceSendToEmail(childComplexity, args["input"].(model.InvoiceSendToEmailRequest)), true

	case "Mutation.ManagerActivateOffer":
		if e.complexity.Mutation.ManagerActivateOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerActivateOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerActivateOffer(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerAssignBankDetailsToOffer":
		if e.complexity.Mutation.ManagerAssignBankDetailsToOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerAssignBankDetailsToOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerAssignBankDetailsToOffer(childComplexity, args["input"].(model.ManagerAssignBankDetailsToOfferRequest)), true

	case "Mutation.ManagerAssignInvestToOffer":
		if e.complexity.Mutation.ManagerAssignInvestToOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerAssignInvestToOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerAssignInvestToOffer(childComplexity, args["input"].(model.ManagerAssignInvestToOfferRequest)), true

	case "Mutation.ManagerAssignLeadToManager":
		if e.complexity.Mutation.ManagerAssignLeadToManager == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerAssignLeadToManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerAssignLeadToManager(childComplexity, args["input"].(model.ManagerAssignLeadToManagerRequest)), true

	case "Mutation.ManagerAssignManager":
		if e.complexity.Mutation.ManagerAssignManager == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerAssignManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerAssignManager(childComplexity, args["input"].(model.ManagerAssignManagerRequest)), true

	case "Mutation.ManagerAssignMemberToOffer":
		if e.complexity.Mutation.ManagerAssignMemberToOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerAssignMemberToOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerAssignMemberToOffer(childComplexity, args["input"].(model.ManagerAssignMemberToOfferRequest)), true

	case "Mutation.ManagerCancelOffer":
		if e.complexity.Mutation.ManagerCancelOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCancelOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCancelOffer(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerCreateAppointment":
		if e.complexity.Mutation.ManagerCreateAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateAppointment(childComplexity, args["input"].(model.ManagerCreateAppointmentRequest)), true

	case "Mutation.ManagerCreateBankDetails":
		if e.complexity.Mutation.ManagerCreateBankDetails == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateBankDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateBankDetails(childComplexity, args["input"].(model.ManagerCreateBankDetailsRequest)), true

	case "Mutation.ManagerCreateCampaign":
		if e.complexity.Mutation.ManagerCreateCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateCampaign(childComplexity, args["input"].(model.ManagerCreateCampaignRequest)), true

	case "Mutation.ManagerCreateCategory":
		if e.complexity.Mutation.ManagerCreateCategory == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateCategory(childComplexity, args["input"].(model.ManagerCreateCategoryRequest)), true

	case "Mutation.ManagerCreateChecklist":
		if e.complexity.Mutation.ManagerCreateChecklist == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateChecklist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateChecklist(childComplexity, args["input"].(model.ManagerCreateChecklistRequest)), true

	case "Mutation.ManagerCreateComment":
		if e.complexity.Mutation.ManagerCreateComment == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateComment(childComplexity, args["input"].(model.ManagerCreateCommentRequest)), true

	case "Mutation.ManagerCreateContract":
		if e.complexity.Mutation.ManagerCreateContract == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateContract_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateContract(childComplexity, args["input"].(model.ManagerCreateContractRequest)), true

	case "Mutation.ManagerCreateCurrency":
		if e.complexity.Mutation.ManagerCreateCurrency == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateCurrency_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateCurrency(childComplexity, args["input"].(model.ManagerCreateCurrencyRequest)), true

	case "Mutation.ManagerCreateInterest":
		if e.complexity.Mutation.ManagerCreateInterest == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateInterest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateInterest(childComplexity, args["input"].(model.ManagerCreateInterestRequest)), true

	case "Mutation.ManagerCreateInvest":
		if e.complexity.Mutation.ManagerCreateInvest == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateInvest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateInvest(childComplexity, args["input"].(model.ManagerCreateInvestRequest)), true

	case "Mutation.ManagerCreateLead":
		if e.complexity.Mutation.ManagerCreateLead == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateLead(childComplexity, args["input"].(model.ManagerCreateLeadRequest)), true

	case "Mutation.ManagerCreateOffer":
		if e.complexity.Mutation.ManagerCreateOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerCreateOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerCreateOffer(childComplexity, args["input"].(model.ManagerCreateOfferRequest)), true

	case "Mutation.ManagerDeactivateOffer":
		if e.complexity.Mutation.ManagerDeactivateOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerDeactivateOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerDeactivateOffer(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerDragMedia":
		if e.complexity.Mutation.ManagerDragMedia == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerDragMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerDragMedia(childComplexity, args["input"].(model.DragRequest)), true

	case "Mutation.ManagerDuplicateAndAssignContractToOffer":
		if e.complexity.Mutation.ManagerDuplicateAndAssignContractToOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerDuplicateAndAssignContractToOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerDuplicateAndAssignContractToOffer(childComplexity, args["input"].(model.ManagerDuplicateAndAssignContractToOfferRequest)), true

	case "Mutation.ManagerDuplicateContract":
		if e.complexity.Mutation.ManagerDuplicateContract == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerDuplicateContract_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerDuplicateContract(childComplexity, args["input"].(model.ManagerDuplicateRequest)), true

	case "Mutation.ManagerDuplicateInvest":
		if e.complexity.Mutation.ManagerDuplicateInvest == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerDuplicateInvest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerDuplicateInvest(childComplexity, args["input"].(model.ManagerDuplicateRequest)), true

	case "Mutation.ManagerDuplicateOffer":
		if e.complexity.Mutation.ManagerDuplicateOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerDuplicateOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerDuplicateOffer(childComplexity, args["input"].(model.ManagerDuplicateRequest)), true

	case "Mutation.ManagerEditAppointment":
		if e.complexity.Mutation.ManagerEditAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditAppointment(childComplexity, args["input"].(model.ManagerEditAppointmentRequest)), true

	case "Mutation.ManagerEditBankDetails":
		if e.complexity.Mutation.ManagerEditBankDetails == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditBankDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditBankDetails(childComplexity, args["input"].(model.ManagerEditBankDetailsRequest)), true

	case "Mutation.ManagerEditCampaign":
		if e.complexity.Mutation.ManagerEditCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditCampaign(childComplexity, args["input"].(model.ManagerEditCampaignRequest)), true

	case "Mutation.ManagerEditCategory":
		if e.complexity.Mutation.ManagerEditCategory == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditCategory(childComplexity, args["input"].(model.ManagerEditCategoryRequest)), true

	case "Mutation.ManagerEditChecklist":
		if e.complexity.Mutation.ManagerEditChecklist == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditChecklist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditChecklist(childComplexity, args["input"].(model.ManagerEditChecklistRequest)), true

	case "Mutation.ManagerEditComment":
		if e.complexity.Mutation.ManagerEditComment == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditComment(childComplexity, args["input"].(model.ManagerEditCommentRequest)), true

	case "Mutation.ManagerEditContract":
		if e.complexity.Mutation.ManagerEditContract == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditContract_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditContract(childComplexity, args["input"].(model.ManagerEditContractRequest)), true

	case "Mutation.ManagerEditCurrency":
		if e.complexity.Mutation.ManagerEditCurrency == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditCurrency_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditCurrency(childComplexity, args["input"].(model.ManagerEditCurrencyRequest)), true

	case "Mutation.ManagerEditInvest":
		if e.complexity.Mutation.ManagerEditInvest == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditInvest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditInvest(childComplexity, args["input"].(model.ManagerEditInvestRequest)), true

	case "Mutation.ManagerEditInvoice":
		if e.complexity.Mutation.ManagerEditInvoice == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditInvoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditInvoice(childComplexity, args["input"].(model.ManagerEditInvoiceRequest)), true

	case "Mutation.ManagerEditLead":
		if e.complexity.Mutation.ManagerEditLead == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditLead(childComplexity, args["input"].(model.ManagerEditLeadRequest)), true

	case "Mutation.ManagerEditMedia":
		if e.complexity.Mutation.ManagerEditMedia == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditMedia(childComplexity, args["input"].(model.ManagerEditMediaRequest)), true

	case "Mutation.ManagerEditOffer":
		if e.complexity.Mutation.ManagerEditOffer == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerEditOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerEditOffer(childComplexity, args["input"].(model.ManagerEditOfferRequest)), true

	case "Mutation.ManagerRemoveAppointment":
		if e.complexity.Mutation.ManagerRemoveAppointment == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveAppointment(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerRemoveCampaign":
		if e.complexity.Mutation.ManagerRemoveCampaign == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveCampaign(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerRemoveChecklist":
		if e.complexity.Mutation.ManagerRemoveChecklist == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveChecklist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveChecklist(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerRemoveComment":
		if e.complexity.Mutation.ManagerRemoveComment == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveComment(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerRemoveInterest":
		if e.complexity.Mutation.ManagerRemoveInterest == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveInterest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveInterest(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerRemoveLead":
		if e.complexity.Mutation.ManagerRemoveLead == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveLead(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerRemoveManager":
		if e.complexity.Mutation.ManagerRemoveManager == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveManager(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.ManagerRemoveMedia":
		if e.complexity.Mutation.ManagerRemoveMedia == nil {
			break
		}

		args, err := ec.field_Mutation_ManagerRemoveMedia_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ManagerRemoveMedia(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.MemberEmailUpdate":
		if e.complexity.Mutation.MemberEmailUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_MemberEmailUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MemberEmailUpdate(childComplexity, args["input"].(model.MemberEmailUpdateRequest)), true

	case "Mutation.MemberPersonalUpdate":
		if e.complexity.Mutation.MemberPersonalUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_MemberPersonalUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MemberPersonalUpdate(childComplexity, args["input"].(model.MemberPersonalUpdateRequest)), true

	case "Mutation.MemberPhoneUpdate":
		if e.complexity.Mutation.MemberPhoneUpdate == nil {
			break
		}

		args, err := ec.field_Mutation_MemberPhoneUpdate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MemberPhoneUpdate(childComplexity, args["input"].(model.MemberPhoneUpdateRequest)), true

	case "Mutation.OfferGeneratePDF":
		if e.complexity.Mutation.OfferGeneratePdf == nil {
			break
		}

		args, err := ec.field_Mutation_OfferGeneratePDF_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OfferGeneratePdf(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.OfferInitDeal":
		if e.complexity.Mutation.OfferInitDeal == nil {
			break
		}

		args, err := ec.field_Mutation_OfferInitDeal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OfferInitDeal(childComplexity, args["input"].(model.OfferInitDealRequest)), true

	case "Mutation.OfferPhoneVerify":
		if e.complexity.Mutation.OfferPhoneVerify == nil {
			break
		}

		args, err := ec.field_Mutation_OfferPhoneVerify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OfferPhoneVerify(childComplexity, args["input"].(model.OfferPhoneVerifyRequest)), true

	case "Mutation.OfferPhoneVerifyResend":
		if e.complexity.Mutation.OfferPhoneVerifyResend == nil {
			break
		}

		args, err := ec.field_Mutation_OfferPhoneVerifyResend_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OfferPhoneVerifyResend(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.OfferSign":
		if e.complexity.Mutation.OfferSign == nil {
			break
		}

		args, err := ec.field_Mutation_OfferSign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OfferSign(childComplexity, args["input"].(model.OfferSignRequest)), true

	case "Mutation.PhoneVerify":
		if e.complexity.Mutation.PhoneVerify == nil {
			break
		}

		args, err := ec.field_Mutation_PhoneVerify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneVerify(childComplexity, args["input"].(model.PhoneVerifyRequest)), true

	case "Mutation.RemoveDeal":
		if e.complexity.Mutation.RemoveDeal == nil {
			break
		}

		args, err := ec.field_Mutation_RemoveDeal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveDeal(childComplexity, args["input"].(model.RecordRequest)), true

	case "Mutation.Reset":
		if e.complexity.Mutation.Reset == nil {
			break
		}

		args, err := ec.field_Mutation_Reset_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Reset(childComplexity, args["input"].(model.ResetRequest)), true

	case "Mutation.ResetComplete":
		if e.complexity.Mutation.ResetComplete == nil {
			break
		}

		args, err := ec.field_Mutation_ResetComplete_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResetComplete(childComplexity, args["input"].(model.ResetCompleteRequest)), true

	case "Mutation.SignIn":
		if e.complexity.Mutation.SignIn == nil {
			break
		}

		args, err := ec.field_Mutation_SignIn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignIn(childComplexity, args["input"].(model.SignInRequest)), true

	case "Mutation.SignUp":
		if e.complexity.Mutation.SignUp == nil {
			break
		}

		args, err := ec.field_Mutation_SignUp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SignUp(childComplexity, args["input"].(model.SignUpRequest)), true

	case "Mutation.ValidateField":
		if e.complexity.Mutation.ValidateField == nil {
			break
		}

		args, err := ec.field_Mutation_ValidateField_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ValidateField(childComplexity, args["input"].(model.ValidateFieldRequest)), true

	case "Mutation.Verify":
		if e.complexity.Mutation.Verify == nil {
			break
		}

		args, err := ec.field_Mutation_Verify_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Verify(childComplexity, args["input"].(model.VerifyRequest)), true

	case "Mutation.VerifyResend":
		if e.complexity.Mutation.VerifyResend == nil {
			break
		}

		args, err := ec.field_Mutation_VerifyResend_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyResend(childComplexity, args["input"].(model.VerifyResendRequest)), true

	case "Offer.BankDetailsID":
		if e.complexity.Offer.BankDetailsID == nil {
			break
		}

		return e.complexity.Offer.BankDetailsID(childComplexity), true

	case "Offer.Contract":
		if e.complexity.Offer.Contract == nil {
			break
		}

		return e.complexity.Offer.Contract(childComplexity), true

	case "Offer.CurrencyID":
		if e.complexity.Offer.CurrencyID == nil {
			break
		}

		return e.complexity.Offer.CurrencyID(childComplexity), true

	case "Offer.Description":
		if e.complexity.Offer.Description == nil {
			break
		}

		return e.complexity.Offer.Description(childComplexity), true

	case "Offer.FAQ":
		if e.complexity.Offer.Faq == nil {
			break
		}

		return e.complexity.Offer.Faq(childComplexity), true

	case "Offer.InvestID":
		if e.complexity.Offer.InvestID == nil {
			break
		}

		return e.complexity.Offer.InvestID(childComplexity), true

	case "Offer.MemberID":
		if e.complexity.Offer.MemberID == nil {
			break
		}

		return e.complexity.Offer.MemberID(childComplexity), true

	case "Offer.OfferID":
		if e.complexity.Offer.OfferID == nil {
			break
		}

		return e.complexity.Offer.OfferID(childComplexity), true

	case "Offer.Status":
		if e.complexity.Offer.Status == nil {
			break
		}

		return e.complexity.Offer.Status(childComplexity), true

	case "Offer.Subtitle":
		if e.complexity.Offer.Subtitle == nil {
			break
		}

		return e.complexity.Offer.Subtitle(childComplexity), true

	case "Offer.Title":
		if e.complexity.Offer.Title == nil {
			break
		}

		return e.complexity.Offer.Title(childComplexity), true

	case "OfferPDF.URL":
		if e.complexity.OfferPdf.URL == nil {
			break
		}

		return e.complexity.OfferPdf.URL(childComplexity), true

	case "OfferSignResult.Message":
		if e.complexity.OfferSignResult.Message == nil {
			break
		}

		return e.complexity.OfferSignResult.Message(childComplexity), true

	case "OfferSignResult.Status":
		if e.complexity.OfferSignResult.Status == nil {
			break
		}

		return e.complexity.OfferSignResult.Status(childComplexity), true

	case "OfferSignResult.Timeout":
		if e.complexity.OfferSignResult.Timeout == nil {
			break
		}

		return e.complexity.OfferSignResult.Timeout(childComplexity), true

	case "PhoneVerifyResponse.Timeout":
		if e.complexity.PhoneVerifyResponse.Timeout == nil {
			break
		}

		return e.complexity.PhoneVerifyResponse.Timeout(childComplexity), true

	case "Query.alert":
		if e.complexity.Query.Alert == nil {
			break
		}

		return e.complexity.Query.Alert(childComplexity), true

	case "Query.BalanceList":
		if e.complexity.Query.BalanceList == nil {
			break
		}

		return e.complexity.Query.BalanceList(childComplexity), true

	case "Query.BankDetailsByInvoiceID":
		if e.complexity.Query.BankDetailsByInvoiceID == nil {
			break
		}

		args, err := ec.field_Query_BankDetailsByInvoiceID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BankDetailsByInvoiceID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.CategoryList":
		if e.complexity.Query.CategoryList == nil {
			break
		}

		return e.complexity.Query.CategoryList(childComplexity), true

	case "Query.ContractByOfferID":
		if e.complexity.Query.ContractByOfferID == nil {
			break
		}

		args, err := ec.field_Query_ContractByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ContractByOfferID(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ContractList":
		if e.complexity.Query.ContractList == nil {
			break
		}

		return e.complexity.Query.ContractList(childComplexity), true

	case "Query.CurrencyList":
		if e.complexity.Query.CurrencyList == nil {
			break
		}

		return e.complexity.Query.CurrencyList(childComplexity), true

	case "Query.DealByOfferID":
		if e.complexity.Query.DealByOfferID == nil {
			break
		}

		args, err := ec.field_Query_DealByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DealByOfferID(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.DealList":
		if e.complexity.Query.DealList == nil {
			break
		}

		return e.complexity.Query.DealList(childComplexity), true

	case "Query.InterestByDealID":
		if e.complexity.Query.InterestByDealID == nil {
			break
		}

		args, err := ec.field_Query_InterestByDealID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InterestByDealID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.InterestByOfferID":
		if e.complexity.Query.InterestByOfferID == nil {
			break
		}

		args, err := ec.field_Query_InterestByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InterestByOfferID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.InterestListByOfferID":
		if e.complexity.Query.InterestListByOfferID == nil {
			break
		}

		args, err := ec.field_Query_InterestListByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InterestListByOfferID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.Invest":
		if e.complexity.Query.Invest == nil {
			break
		}

		args, err := ec.field_Query_Invest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invest(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.InvestByOfferID":
		if e.complexity.Query.InvestByOfferID == nil {
			break
		}

		args, err := ec.field_Query_InvestByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InvestByOfferID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.Invoice":
		if e.complexity.Query.Invoice == nil {
			break
		}

		args, err := ec.field_Query_Invoice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Invoice(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.InvoiceByDealID":
		if e.complexity.Query.InvoiceByDealID == nil {
			break
		}

		args, err := ec.field_Query_InvoiceByDealID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.InvoiceByDealID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerAppointment":
		if e.complexity.Query.ManagerAppointment == nil {
			break
		}

		args, err := ec.field_Query_ManagerAppointment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerAppointment(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerAppointmentList":
		if e.complexity.Query.ManagerAppointmentList == nil {
			break
		}

		args, err := ec.field_Query_ManagerAppointmentList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerAppointmentList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerAppointmentListByLeadID":
		if e.complexity.Query.ManagerAppointmentListByLeadID == nil {
			break
		}

		args, err := ec.field_Query_ManagerAppointmentListByLeadID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerAppointmentListByLeadID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerBankDetails":
		if e.complexity.Query.ManagerBankDetails == nil {
			break
		}

		args, err := ec.field_Query_ManagerBankDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerBankDetails(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerBankDetailsByOfferID":
		if e.complexity.Query.ManagerBankDetailsByOfferID == nil {
			break
		}

		args, err := ec.field_Query_ManagerBankDetailsByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerBankDetailsByOfferID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerBankDetailsList":
		if e.complexity.Query.ManagerBankDetailsList == nil {
			break
		}

		args, err := ec.field_Query_ManagerBankDetailsList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerBankDetailsList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerCampaign":
		if e.complexity.Query.ManagerCampaign == nil {
			break
		}

		args, err := ec.field_Query_ManagerCampaign_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCampaign(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerCampaignList":
		if e.complexity.Query.ManagerCampaignList == nil {
			break
		}

		args, err := ec.field_Query_ManagerCampaignList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCampaignList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerCategory":
		if e.complexity.Query.ManagerCategory == nil {
			break
		}

		args, err := ec.field_Query_ManagerCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCategory(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerCategoryList":
		if e.complexity.Query.ManagerCategoryList == nil {
			break
		}

		args, err := ec.field_Query_ManagerCategoryList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCategoryList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerChecklist":
		if e.complexity.Query.ManagerChecklist == nil {
			break
		}

		args, err := ec.field_Query_ManagerChecklist_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerChecklist(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerChecklistList":
		if e.complexity.Query.ManagerChecklistList == nil {
			break
		}

		args, err := ec.field_Query_ManagerChecklistList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerChecklistList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerComment":
		if e.complexity.Query.ManagerComment == nil {
			break
		}

		args, err := ec.field_Query_ManagerComment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerComment(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerCommentList":
		if e.complexity.Query.ManagerCommentList == nil {
			break
		}

		args, err := ec.field_Query_ManagerCommentList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCommentList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerCommentListByLeadID":
		if e.complexity.Query.ManagerCommentListByLeadID == nil {
			break
		}

		args, err := ec.field_Query_ManagerCommentListByLeadID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCommentListByLeadID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerContract":
		if e.complexity.Query.ManagerContract == nil {
			break
		}

		args, err := ec.field_Query_ManagerContract_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerContract(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerContractList":
		if e.complexity.Query.ManagerContractList == nil {
			break
		}

		args, err := ec.field_Query_ManagerContractList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerContractList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerContractListByOfferID":
		if e.complexity.Query.ManagerContractListByOfferID == nil {
			break
		}

		args, err := ec.field_Query_ManagerContractListByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerContractListByOfferID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerCurrency":
		if e.complexity.Query.ManagerCurrency == nil {
			break
		}

		args, err := ec.field_Query_ManagerCurrency_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCurrency(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerCurrencyList":
		if e.complexity.Query.ManagerCurrencyList == nil {
			break
		}

		args, err := ec.field_Query_ManagerCurrencyList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerCurrencyList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerDeal":
		if e.complexity.Query.ManagerDeal == nil {
			break
		}

		args, err := ec.field_Query_ManagerDeal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerDeal(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerDealByContractID":
		if e.complexity.Query.ManagerDealByContractID == nil {
			break
		}

		args, err := ec.field_Query_ManagerDealByContractID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerDealByContractID(childComplexity, args["input"].(*model.ManagerDealByContractIDRequest)), true

	case "Query.ManagerDealList":
		if e.complexity.Query.ManagerDealList == nil {
			break
		}

		args, err := ec.field_Query_ManagerDealList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerDealList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerDealListByOfferID":
		if e.complexity.Query.ManagerDealListByOfferID == nil {
			break
		}

		args, err := ec.field_Query_ManagerDealListByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerDealListByOfferID(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerInterestListByOfferID":
		if e.complexity.Query.ManagerInterestListByOfferID == nil {
			break
		}

		args, err := ec.field_Query_ManagerInterestListByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerInterestListByOfferID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerInvest":
		if e.complexity.Query.ManagerInvest == nil {
			break
		}

		args, err := ec.field_Query_ManagerInvest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerInvest(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerInvestByOfferID":
		if e.complexity.Query.ManagerInvestByOfferID == nil {
			break
		}

		args, err := ec.field_Query_ManagerInvestByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerInvestByOfferID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerInvestList":
		if e.complexity.Query.ManagerInvestList == nil {
			break
		}

		args, err := ec.field_Query_ManagerInvestList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerInvestList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerInvoiceByDealID":
		if e.complexity.Query.ManagerInvoiceByDealID == nil {
			break
		}

		args, err := ec.field_Query_ManagerInvoiceByDealID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerInvoiceByDealID(childComplexity, args["input"].(*model.RecordRequest)), true

	case "Query.ManagerLead":
		if e.complexity.Query.ManagerLead == nil {
			break
		}

		args, err := ec.field_Query_ManagerLead_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerLead(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerLeadList":
		if e.complexity.Query.ManagerLeadList == nil {
			break
		}

		args, err := ec.field_Query_ManagerLeadList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerLeadList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerManager":
		if e.complexity.Query.ManagerManager == nil {
			break
		}

		args, err := ec.field_Query_ManagerManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerManager(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerManagerList":
		if e.complexity.Query.ManagerManagerList == nil {
			break
		}

		args, err := ec.field_Query_ManagerManagerList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerManagerList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerMediaByInvestID":
		if e.complexity.Query.ManagerMediaByInvestID == nil {
			break
		}

		args, err := ec.field_Query_ManagerMediaByInvestID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerMediaByInvestID(childComplexity, args["input"].(model.ManagerMediaByInvestIDRequest)), true

	case "Query.ManagerMember":
		if e.complexity.Query.ManagerMember == nil {
			break
		}

		args, err := ec.field_Query_ManagerMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerMember(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerMemberByOfferID":
		if e.complexity.Query.ManagerMemberByOfferID == nil {
			break
		}

		args, err := ec.field_Query_ManagerMemberByOfferID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerMemberByOfferID(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerOffer":
		if e.complexity.Query.ManagerOffer == nil {
			break
		}

		args, err := ec.field_Query_ManagerOffer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerOffer(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.ManagerOfferList":
		if e.complexity.Query.ManagerOfferList == nil {
			break
		}

		args, err := ec.field_Query_ManagerOfferList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerOfferList(childComplexity, args["input"].(*model.ListRequest)), true

	case "Query.ManagerSearchBankDetails":
		if e.complexity.Query.ManagerSearchBankDetails == nil {
			break
		}

		args, err := ec.field_Query_ManagerSearchBankDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerSearchBankDetails(childComplexity, args["input"].(*model.SearchRequest)), true

	case "Query.ManagerSearchContract":
		if e.complexity.Query.ManagerSearchContract == nil {
			break
		}

		args, err := ec.field_Query_ManagerSearchContract_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerSearchContract(childComplexity, args["input"].(*model.SearchRequest)), true

	case "Query.ManagerSearchCurrency":
		if e.complexity.Query.ManagerSearchCurrency == nil {
			break
		}

		args, err := ec.field_Query_ManagerSearchCurrency_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerSearchCurrency(childComplexity, args["input"].(*model.SearchRequest)), true

	case "Query.ManagerSearchInvest":
		if e.complexity.Query.ManagerSearchInvest == nil {
			break
		}

		args, err := ec.field_Query_ManagerSearchInvest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerSearchInvest(childComplexity, args["input"].(*model.SearchRequest)), true

	case "Query.ManagerSearchManager":
		if e.complexity.Query.ManagerSearchManager == nil {
			break
		}

		args, err := ec.field_Query_ManagerSearchManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerSearchManager(childComplexity, args["input"].(*model.SearchRequest)), true

	case "Query.ManagerSearchMember":
		if e.complexity.Query.ManagerSearchMember == nil {
			break
		}

		args, err := ec.field_Query_ManagerSearchMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerSearchMember(childComplexity, args["input"].(*model.SearchRequest)), true

	case "Query.ManagerSearchMemberNoManager":
		if e.complexity.Query.ManagerSearchMemberNoManager == nil {
			break
		}

		args, err := ec.field_Query_ManagerSearchMemberNoManager_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ManagerSearchMemberNoManager(childComplexity, args["input"].(*model.SearchRequest)), true

	case "Query.Member":
		if e.complexity.Query.Member == nil {
			break
		}

		return e.complexity.Query.Member(childComplexity), true

	case "Query.Offer":
		if e.complexity.Query.Offer == nil {
			break
		}

		args, err := ec.field_Query_Offer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Offer(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.OfferByInvoiceID":
		if e.complexity.Query.OfferByInvoiceID == nil {
			break
		}

		args, err := ec.field_Query_OfferByInvoiceID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OfferByInvoiceID(childComplexity, args["input"].(model.RecordRequest)), true

	case "Query.OfferList":
		if e.complexity.Query.OfferList == nil {
			break
		}

		return e.complexity.Query.OfferList(childComplexity), true

	case "Query.TXList":
		if e.complexity.Query.TXList == nil {
			break
		}

		return e.complexity.Query.TXList(childComplexity), true

	case "Result.Message":
		if e.complexity.Result.Message == nil {
			break
		}

		return e.complexity.Result.Message(childComplexity), true

	case "Result.Status":
		if e.complexity.Result.Status == nil {
			break
		}

		return e.complexity.Result.Status(childComplexity), true

	case "SignInResponse.Message":
		if e.complexity.SignInResponse.Message == nil {
			break
		}

		return e.complexity.SignInResponse.Message(childComplexity), true

	case "SignInResponse.Status":
		if e.complexity.SignInResponse.Status == nil {
			break
		}

		return e.complexity.SignInResponse.Status(childComplexity), true

	case "SignInResponse.Token":
		if e.complexity.SignInResponse.Token == nil {
			break
		}

		return e.complexity.SignInResponse.Token(childComplexity), true

	case "Subscription.newInfo":
		if e.complexity.Subscription.NewInfo == nil {
			break
		}

		return e.complexity.Subscription.NewInfo(childComplexity), true

	case "TX.Amount":
		if e.complexity.Tx.Amount == nil {
			break
		}

		return e.complexity.Tx.Amount(childComplexity), true

	case "TX.AmountNegative":
		if e.complexity.Tx.AmountNegative == nil {
			break
		}

		return e.complexity.Tx.AmountNegative(childComplexity), true

	case "TX.CurrencyID":
		if e.complexity.Tx.CurrencyID == nil {
			break
		}

		return e.complexity.Tx.CurrencyID(childComplexity), true

	case "TX.DateComplete":
		if e.complexity.Tx.DateComplete == nil {
			break
		}

		return e.complexity.Tx.DateComplete(childComplexity), true

	case "TX.DateCreated":
		if e.complexity.Tx.DateCreated == nil {
			break
		}

		return e.complexity.Tx.DateCreated(childComplexity), true

	case "TX.MemberID":
		if e.complexity.Tx.MemberID == nil {
			break
		}

		return e.complexity.Tx.MemberID(childComplexity), true

	case "TX.Status":
		if e.complexity.Tx.Status == nil {
			break
		}

		return e.complexity.Tx.Status(childComplexity), true

	case "TX.TimestampComplete":
		if e.complexity.Tx.TimestampComplete == nil {
			break
		}

		return e.complexity.Tx.TimestampComplete(childComplexity), true

	case "TX.TimestampCreated":
		if e.complexity.Tx.TimestampCreated == nil {
			break
		}

		return e.complexity.Tx.TimestampCreated(childComplexity), true

	case "TX.TXID":
		if e.complexity.Tx.Txid == nil {
			break
		}

		return e.complexity.Tx.Txid(childComplexity), true

	case "Upload.Category":
		if e.complexity.Upload.Category == nil {
			break
		}

		return e.complexity.Upload.Category(childComplexity), true

	case "Upload.Created":
		if e.complexity.Upload.Created == nil {
			break
		}

		return e.complexity.Upload.Created(childComplexity), true

	case "Upload.Filename":
		if e.complexity.Upload.Filename == nil {
			break
		}

		return e.complexity.Upload.Filename(childComplexity), true

	case "Upload.MemberID":
		if e.complexity.Upload.MemberID == nil {
			break
		}

		return e.complexity.Upload.MemberID(childComplexity), true

	case "Upload.URL":
		if e.complexity.Upload.URL == nil {
			break
		}

		return e.complexity.Upload.URL(childComplexity), true

	case "Upload.UploadID":
		if e.complexity.Upload.UploadID == nil {
			break
		}

		return e.complexity.Upload.UploadID(childComplexity), true

	case "ValudationStatus.Message":
		if e.complexity.ValudationStatus.Message == nil {
			break
		}

		return e.complexity.ValudationStatus.Message(childComplexity), true

	case "ValudationStatus.Status":
		if e.complexity.ValudationStatus.Status == nil {
			break
		}

		return e.complexity.ValudationStatus.Status(childComplexity), true

	case "VerifyResendResponse.Message":
		if e.complexity.VerifyResendResponse.Message == nil {
			break
		}

		return e.complexity.VerifyResendResponse.Message(childComplexity), true

	case "VerifyResendResponse.Status":
		if e.complexity.VerifyResendResponse.Status == nil {
			break
		}

		return e.complexity.VerifyResendResponse.Status(childComplexity), true

	case "VerifyResendResponse.Timeout":
		if e.complexity.VerifyResendResponse.Timeout == nil {
			break
		}

		return e.complexity.VerifyResendResponse.Timeout(childComplexity), true

	case "VerifyResponse.Message":
		if e.complexity.VerifyResponse.Message == nil {
			break
		}

		return e.complexity.VerifyResponse.Message(childComplexity), true

	case "VerifyResponse.Status":
		if e.complexity.VerifyResponse.Status == nil {
			break
		}

		return e.complexity.VerifyResponse.Status(childComplexity), true

	case "VerifyResponse.Token":
		if e.complexity.VerifyResponse.Token == nil {
			break
		}

		return e.complexity.VerifyResponse.Token(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Subscription:
		next := ec._Subscription(ctx, rc.Operation.SelectionSet)

		var buf bytes.Buffer
		return func(ctx context.Context) *graphql.Response {
			buf.Reset()
			data := next()

			if data == nil {
				return nil
			}
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	&ast.Source{Name: "graph/schema.graphqls", Input: `# GraphQL schema example
#
# https://gqlgen.com/getting-started/
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum Status {
  PENDING
  PROGRESS
  FAILED
  COMPLETE
}

enum FamilyStatus {
  no
  married
  divorced
  widowed
}

enum Gender {
  m
  f
}

type Alert {
  AlertID: Int!
  AssetID: Int!
  Price: String!
  TimestampOpen: Int!
}

type Interest {
  InterestID: Int!
  OfferID: Int
  AmountFrom: String
  AmountTo: String
  DurationFrom: String
  DurationTo: String
  Interest: String
}

type Info {
  MemberID: Int!
  Event: String!
  ID: Int!
  Value: String!
  Rate: String!
  RateBuy: String!
  RateSell: String!
  Change: String!
  Sentiment: Int!
  SentimentType: String!
}

type Subscription {
  newInfo: Info!
}

input OfferSignRequest {
  OfferID: Int!
  Image: String!
}

input InvoiceSendToEmailRequest {
  InvoiceID: Int!
  Email: String!
}

type PhoneVerifyResponse {
  Timeout: Int!
}

type VerifyResponse {
  Status: Boolean!
  Message: String
  Token: String
}

type VerifyResendResponse {
  Status: Boolean!
  Message: String
  Timeout: Int
}

type SignInResponse {
  Status: Boolean!
  Message: String
  Token: String
}

input RecordRequest {
  RecordID: Int!
}

input DragRequest {
  Position: [Int!]!
}

input ManagerMediaByInvestIDRequest {
  RecordID: Int!
  Category: String!
}

input ManagerAssignManagerRequest {
  MemberID: Int!
}

input ManagerDealByContractIDRequest {
  OfferID: Int!
  ContractID: Int!
}

input OfferInitDealRequest {
  OfferID: Int!
  Amount: String!
  Duration: String!
}

input ListRequest {
  SortBy: String!
  Value: String!
}

input SearchRequest {
  Query: String!
}

input SignUpRequest {
  FirstName: String!
  LastName: String!
  Birthday: String!
  Citizenship: String!
  Gender: String!
  FamilyStatus: String!
  MaidenName: String!
  Phone: String!
  Email: String!
  Password: String!
  Country: String!
  City: String!
  Zip: String!
  StreetNumber: String!
  StreetName: String!
}

input SignInRequest {
  Email: String!
  Password: String!
}

input ResetRequest {
  Email: String!
}

input ValidateFieldRequest {
  Field: String!
  Value: String!
  Type: String
  Section: String
  Path: String
}

type ValudationStatus {
  Status: Boolean!
  Message: String!
}

input OfferGeneratePDFRequest {
  OfferID: Int!
}

type FAQ {
  FAQID: Int!
  Question: String
  Answer: String
  Position: Int
}

type Media {
  MediaID: Int!
  MemberID: Int
  InvestID: Int
  URL: String
  Title: String
  Position: Int
  Filename: String
  Category: String
  Created: Int
}

type Contract {
  ContractID: Int!
  Title: String!
  Content: String
  ContentRaw: String
  OfferID: Int
  Current: Boolean
  Template: Boolean
}

type Offer {
  OfferID: Int!
  MemberID: Int
  InvestID: Int
  CurrencyID: Int
  BankDetailsID: Int
  Title: String
  Status: String
  Subtitle: String
  Description: String
  Contract: Contract
  FAQ: [FAQ]
}

type ManagerOffer {
  OfferID: Int!
  MemberID: Int
  InvestID: Int
  CurrencyID: Int
  BankDetailsID: Int
  Title: String
  Status: String
}

type Deal {
  DealID: Int!
  OfferID: Int
  ContractID: Int
  MemberID: Int
  CurrencyID: Int
  SignatureFilename: String
  SignatureURL: String
  VerificationCode: String
  DateCreated: String
  DateSigned: String
  DateVerified: String
  DatePaid: String
  DateStart: String
  DateEnd: String
  Status: String
  Amount: String
  Duration: String
}

type Invoice {
  InvoiceID: Int!
  OfferID: Int
  MemberID: Int
  DealID: Int
  CurrencyID: Int
  Status: String
  Amount: String
  DateCreated: String
  TimestampCreated: Int
  DatePaid: String
  TimestampPaid: Int
}

type BankDetails {
  BankDetailsID: Int
  Title: String
  BeneficiaryCompany: String
  BeneficiaryFirstName: String
  BeneficiaryLastName: String
  BeneficiaryCountry: String
  BeneficiaryCity: String
  BeneficiaryZip: String
  BeneficiaryAddress: String
  BankName: String
  BankBranch: String
  BankIFSC: String
  BankBranchCountry: String
  BankBranchCity: String
  BankBranchZip: String
  BankBranchAddress: String
  BankAccountNumber: String
  BankAccountType: String
  BankRoutingNumber: String
  BankTransferCaption: String
  BankIBAN: String
  BankSWIFT: String
  BankSWIFTCorrespondent: String
  BankBIC: String
}

type ManagerSearch {
  ManagerID: Int!
  Title: String
}

type Member {
  MemberID: Int!
  Email: String
  ManagerID: Int
  IP: String
  FirstName: String
  LastName: String
  Gender: String
  FamilyStatus: String
  MaidenName: String
  Citizenship: String
  Country: String
  City: String
  Zip: String
  Address1: String
  Address2: String
  StreetNumber: String
  StreetName: String
  Image: String
  Birthday: String
  EmailNotifications: Boolean
  Phone: String
  Created: Int
  Role: Int
  CurrencyID: Int
  USD: String
  EUR: String
  LeverageAllowed: String
  StopLossAllowed: String
  TakeProfitAllowed: String
  Status: String
  ManagerRole: String
}

type Lead {
  LeadID: Int!
  ManagerID: Int
  MemberID: Int
  CampaignID: Int
  CurrencyID: Int
  Email: String
  Phone: String
  IP: String
  FirstName: String
  LastName: String
  Gender: String
  FamilyStatus: String
  MaidenName: String
  Citizenship: String
  Country: String
  City: String
  Zip: String
  Address1: String
  Address2: String
  StreetNumber: String
  StreetName: String
  Birthday: String
  Status: String
  DateCreated: String
  TimestampCreated: Int
}

type Comment {
  CommentID: Int!
  MemberID: Int
  Content: String
  DateCreated: String
  TimestampCreated: Int
  DateEdited: String
  TimestampEdited: Int
  LeadID: Int
}

type Checklist {
  ChecklistID: Int!
  Title: String
  Complete: Boolean
  Position: Int
  DateCreated: String
  TimestampCreated: Int
  LeadID: Int
}

type Appointment {
  AppointmentID: Int!
  Type: String
  Title: String
  Description: String
  DateCreated: String
  TimestampCreated: Int
  DateDue: String
  TimestampDue: Int
  Status: String
  LeadID: Int
}

type Campaign {
  CampaignID: Int!
  Title: String
  Description: String
  DateCreated: String
  TimestampCreated: Int
}

type Result {
  Status: Boolean!
  Message: String
}

type OfferSignResult {
  Status: Boolean!
  Message: String
  Timeout: Int
}

type OfferPDF {
  URL: String!
}

type Category {
  CategoryID: Int!
  Title: String!
}

type Currency {
  CurrencyID: Int!
  Title: String!
  Symbol: String!
}

type Upload {
  UploadID: Int!
  MemberID: Int
  URL: String
  Filename: String
  Category: String
  Created: Int
}

type Invest {
  InvestID: Int!
  OfferID: Int
  CategoryID: Int
  CurrencyID: Int
  BankDetailsID: Int
  Title: String
  Subtitle: String
  Description: String
  FAQ: [FAQ]
  Photo: [Media]
  Document: [Media]
  Status: String
}

type Balance {
  BalanceID: Int!
  MemberID: Int
  CurrencyID: Int
  Amount: String
  AmountNegative: Boolean
}

type TX {
  TXID: Int!
  MemberID: Int
  Amount: String
  AmountNegative: Boolean
  CurrencyID: Int
  Status: String
  DateCreated: String
  DateComplete: String
  TimestampCreated: Int
  TimestampComplete: Int
}

input ManagerCreateBankDetailsRequest {
  Title: String!
  BeneficiaryCompany: String
  BeneficiaryFirstName: String
  BeneficiaryLastName: String
  BeneficiaryCountry: String
  BeneficiaryCity: String
  BeneficiaryZip: String
  BeneficiaryAddress: String
  BankName: String
  BankBranch: String
  BankIFSC: String
  BankBranchCountry: String
  BankBranchCity: String
  BankBranchZip: String
  BankBranchAddress: String
  BankAccountNumber: String
  BankAccountType: String
  BankRoutingNumber: String
  BankTransferCaption: String
  BankIBAN: String
  BankSWIFT: String
  BankSWIFTCorrespondent: String
  BankBIC: String
}

input MemberPersonalUpdateRequest {
  FirstName: String!
  LastName: String!
}

input MemberPhoneUpdateRequest {
  Phone: String!
}

input MemberEmailUpdateRequest {
  Email: String!
}

input ManagerCreateInvestRequest {
  CategoryID: Int!
  Title: String!
  Subtitle: String!
  Description: String!
}

input ManagerCreateOfferRequest {
  InvestID: Int!
  MemberID: Int!
  CurrencyID: Int!
  BankDetailsID: Int!
  Title: String!
}

input ManagerCreateInterestRequest {
  OfferID: Int!
  AmountFrom: String!
  AmountTo: String!
  DurationFrom: String!
  DurationTo: String!
  Interest: String!
}

input ManagerCreateCategoryRequest {
  Title: String!
}

input ManagerCreateContractRequest {
  Title: String
  ContentRaw: String
}

input ManagerCreateCurrencyRequest {
  Title: String!
  Symbol: String!
}

input ManagerCreateLeadRequest {
  ManagerID: Int
  MemberID: Int
  CampaignID: Int
  CurrencyID: Int
  Email: String
  Phone: String
  IP: String
  FirstName: String
  LastName: String
  Gender: String
  FamilyStatus: String
  MaidenName: String
  Citizenship: String
  Country: String
  City: String
  Zip: String
  Address1: String
  Address2: String
  StreetNumber: String
  StreetName: String
  Birthday: String
  Status: String
}

input ManagerCreateCommentRequest {
  Content: String
  LeadID: Int
}

input ManagerCreateChecklistRequest {
  Title: String
  Complete: Boolean
  Position: Int
  LeadID: Int
}

input ManagerCreateAppointmentRequest {
  Type: String
  Title: String
  Description: String
  DateDue: String
  Status: String
  LeadID: Int
}

input ManagerCreateCampaignRequest {
  Title: String
  Description: String
}

input ManagerEditLeadRequest {
  LeadID: Int!
  ManagerID: Int
  MemberID: Int
  CampaignID: Int
  CurrencyID: Int
  Email: String
  Phone: String
  IP: String
  FirstName: String
  LastName: String
  Gender: String
  FamilyStatus: String
  MaidenName: String
  Citizenship: String
  Country: String
  City: String
  Zip: String
  Address1: String
  Address2: String
  StreetNumber: String
  StreetName: String
  Birthday: String
  Status: String
}

input ManagerEditCommentRequest {
  CommentID: Int!
  Content: String
  LeadID: Int
}

input ManagerEditChecklistRequest {
  ChecklistID: Int!
  Title: String
  Complete: Boolean
  Position: Int
  LeadID: Int
}

input ManagerEditAppointmentRequest {
  AppointmentID: Int!
  Type: String
  Title: String
  Description: String
  DateDue: String
  Status: String
  LeadID: Int
}

input ManagerEditCampaignRequest {
  CampaignID: Int!
  Title: String
  Description: String
}

input ManagerEditMediaRequest {
  MediaID: Int!
  Title: String!
}

input ManagerEditBankDetailsRequest {
  BankDetailsID: Int!
  Title: String!
  BeneficiaryCompany: String
  BeneficiaryFirstName: String
  BeneficiaryLastName: String
  BeneficiaryCountry: String
  BeneficiaryCity: String
  BeneficiaryZip: String
  BeneficiaryAddress: String
  BankName: String
  BankBranch: String
  BankIFSC: String
  BankBranchCountry: String
  BankBranchCity: String
  BankBranchZip: String
  BankBranchAddress: String
  BankAccountNumber: String
  BankAccountType: String
  BankRoutingNumber: String
  BankTransferCaption: String
  BankIBAN: String
  BankSWIFT: String
  BankSWIFTCorrespondent: String
  BankBIC: String
}

input ManagerEditInvestRequest {
  InvestID: Int!
  CategoryID: Int!
  Title: String!
  Subtitle: String!
  Description: String!
}

input ManagerEditOfferRequest {
  OfferID: Int!
  CurrencyID: Int!
  Title: String!
}

input ManagerEditCategoryRequest {
  CategoryID: Int!
  #
}

input ManagerEditContractRequest {
  ContractID: Int!
  Title: String
  ContentRaw: String
}

input ManagerEditCurrencyRequest {
  CurrencyID: Int!
  #
}

input ManagerEditInvoiceRequest {
  InvoiceID: Int!
  Status: String!
}

input PhoneVerifyRequest {
  Code: String!
  Action: String!
}

input VerifyRequest {
  Action: String!
  Method: String!
  Hash: String!
  Code: String!
}

input VerifyResendRequest {
  Email: String!
}

input ResetCompleteRequest {
  Action: String!
  Method: String!
  Hash: String!
  Code: String!
  Password: String!
}

#
input Verify {
  method: String
  hash: String!
  code: String!
}

input OfferPhoneVerifyRequest {
  OfferID: Int!
  Code: String!
}

type CreationResponse {
  RecordID: Int!
}

input ManagerAssignMemberToOfferRequest {
  OfferID: Int!
  MemberID: Int!
}

input ManagerAssignInvestToOfferRequest {
  OfferID: Int!
  InvestID: Int!
}

input ManagerDuplicateAndAssignContractToOfferRequest {
  OfferID: Int!
  ContractID: Int!
}

input ManagerAssignBankDetailsToOfferRequest {
  OfferID: Int!
  BankDetailsID: Int!
}

input ManagerAssignLeadToManagerRequest {
  LeadID: Int!
  ManagerID: Int!
}

input ManagerDuplicateRequest {
  RecordID: Int!
}

type Query {
  Invest(input: RecordRequest!): Invest!
  InvestByOfferID(input: RecordRequest): Invest!

  InterestListByOfferID(input: RecordRequest): [Interest!]!
  ManagerDealByContractID(input: ManagerDealByContractIDRequest): Deal!
  Offer(input: RecordRequest!): Offer!
  ContractByOfferID(input: RecordRequest!): Contract!
  DealByOfferID(input: RecordRequest!): Deal!

  InterestByDealID(input: RecordRequest): Interest!
  InterestByOfferID(input: RecordRequest): Interest!

  Invoice(input: RecordRequest!): Invoice!
  InvoiceByDealID(input: RecordRequest): Invoice!

  BankDetailsByInvoiceID(input: RecordRequest): BankDetails!

  OfferByInvoiceID(input: RecordRequest!): Invest!

  ManagerBankDetails(input: RecordRequest!): BankDetails!
  ManagerBankDetailsByOfferID(input: RecordRequest): BankDetails!
  ManagerInvest(input: RecordRequest!): Invest!
  ManagerMediaByInvestID(input: ManagerMediaByInvestIDRequest!): [Media!]!
  ManagerInvestByOfferID(input: RecordRequest): Invest!
  ManagerOffer(input: RecordRequest!): ManagerOffer!
  ManagerDeal(input: RecordRequest!): Deal!
  ManagerInvoiceByDealID(input: RecordRequest): Invoice!
  ManagerContract(input: RecordRequest!): Contract!
  ManagerCategory(input: RecordRequest!): Category!
  ManagerCurrency(input: RecordRequest!): Currency!
  ManagerMember(input: RecordRequest!): Member!
  ManagerMemberByOfferID(input: RecordRequest!): Member!
  ManagerManager(input: RecordRequest!): Member!
  ManagerLead(input: RecordRequest!): Lead!
  ManagerComment(input: RecordRequest!): Comment!
  ManagerChecklist(input: RecordRequest!): Checklist!
  ManagerAppointment(input: RecordRequest!): Appointment!
  ManagerCampaign(input: RecordRequest!): Campaign!

  OfferList: [Invest!]!
  DealList: [Deal!]!
  ContractList: [Contract!]!
  CategoryList: [Category!]!
  CurrencyList: [Currency!]!
  BalanceList: [Balance!]!
  TXList: [TX!]!

  ManagerBankDetailsList(input: ListRequest): [BankDetails!]!
  ManagerInvestList(input: ListRequest): [Invest!]!
  ManagerOfferList(input: ListRequest): [ManagerOffer!]!
  ManagerDealList(input: ListRequest): [Deal!]!
  ManagerDealListByOfferID(input: RecordRequest!): [Deal!]!
  ManagerContractList(input: ListRequest): [Contract!]!
  ManagerCategoryList(input: ListRequest): [Category!]!
  ManagerCurrencyList(input: ListRequest): [Currency!]!
  ManagerLeadList(input: ListRequest): [Lead!]!
  ManagerCommentList(input: ListRequest): [Comment!]!
  ManagerCommentListByLeadID(input: RecordRequest): [Comment!]!
  ManagerChecklistList(input: ListRequest): [Checklist!]!
  ManagerAppointmentList(input: ListRequest): [Appointment!]!
  ManagerAppointmentListByLeadID(input: RecordRequest): [Appointment!]!
  ManagerCampaignList(input: ListRequest): [Campaign!]!
  ManagerManagerList(input: ListRequest): [Member!]!

  ManagerContractListByOfferID(input: RecordRequest): [Contract!]!
  ManagerInterestListByOfferID(input: RecordRequest): [Interest!]!

  ManagerSearchMember(input: SearchRequest): [Member!]!
  ManagerSearchMemberNoManager(input: SearchRequest): [Member!]!
  ManagerSearchInvest(input: SearchRequest): [Invest!]!
  ManagerSearchContract(input: SearchRequest): [Contract!]!
  ManagerSearchCurrency(input: SearchRequest): [Currency!]!
  ManagerSearchBankDetails(input: SearchRequest): [BankDetails!]!
  ManagerSearchManager(input: SearchRequest): [ManagerSearch!]!

  Member: Member!
  alert: [Alert!]!
}

type Mutation {
  MemberPersonalUpdate(input: MemberPersonalUpdateRequest!): Result!
  MemberPhoneUpdate(input: MemberPhoneUpdateRequest!): Result!
  MemberEmailUpdate(input: MemberEmailUpdateRequest!): Result!

  ManagerCreateBankDetails(input: ManagerCreateBankDetailsRequest!): CreationResponse!
  ManagerCreateInvest(input: ManagerCreateInvestRequest!): CreationResponse!
  ManagerCreateOffer(input: ManagerCreateOfferRequest!): CreationResponse!
  ManagerCreateInterest(input: ManagerCreateInterestRequest!): CreationResponse!
  ManagerCreateCategory(input: ManagerCreateCategoryRequest!): CreationResponse!
  ManagerCreateContract(input: ManagerCreateContractRequest!): CreationResponse!
  ManagerCreateCurrency(input: ManagerCreateCurrencyRequest!): CreationResponse!

  ManagerCreateLead(input: ManagerCreateLeadRequest!): CreationResponse!
  ManagerCreateComment(input: ManagerCreateCommentRequest!): CreationResponse!
  ManagerCreateChecklist(input: ManagerCreateChecklistRequest!): CreationResponse!
  ManagerCreateAppointment(input: ManagerCreateAppointmentRequest!): CreationResponse!
  ManagerCreateCampaign(input: ManagerCreateCampaignRequest!): CreationResponse!

  ManagerAssignMemberToOffer(input: ManagerAssignMemberToOfferRequest!): Result!
  ManagerAssignInvestToOffer(input: ManagerAssignInvestToOfferRequest!): Result!
  ManagerDuplicateAndAssignContractToOffer(input: ManagerDuplicateAndAssignContractToOfferRequest!): Result!
  ManagerAssignBankDetailsToOffer(input: ManagerAssignBankDetailsToOfferRequest!): Result!
  ManagerAssignLeadToManager(input: ManagerAssignLeadToManagerRequest!): Result!

  ManagerDuplicateInvest(input: ManagerDuplicateRequest!): CreationResponse!
  ManagerDuplicateOffer(input: ManagerDuplicateRequest!): CreationResponse!
  ManagerDuplicateContract(input: ManagerDuplicateRequest!): CreationResponse!

  ManagerDeactivateOffer(input: RecordRequest!): Result!
  ManagerActivateOffer(input: RecordRequest!): Result!
  ManagerCancelOffer(input: RecordRequest!): Result!

  ManagerEditBankDetails(input: ManagerEditBankDetailsRequest!): Result!
  ManagerEditInvest(input: ManagerEditInvestRequest!): Result!
  ManagerEditOffer(input: ManagerEditOfferRequest!): Result!
  ManagerEditCategory(input: ManagerEditCategoryRequest!): Result!
  ManagerEditContract(input: ManagerEditContractRequest!): Result!
  ManagerEditCurrency(input: ManagerEditCurrencyRequest!): Result!
  ManagerEditInvoice(input: ManagerEditInvoiceRequest!): Result!
  ManagerEditLead(input: ManagerEditLeadRequest!): Result!
  ManagerEditComment(input: ManagerEditCommentRequest!): Result!
  ManagerEditChecklist(input: ManagerEditChecklistRequest!): Result!
  ManagerEditAppointment(input: ManagerEditAppointmentRequest!): Result!
  ManagerEditCampaign(input: ManagerEditCampaignRequest!): Result!
  ManagerEditMedia(input: ManagerEditMediaRequest!): Result!

  ManagerRemoveLead(input: RecordRequest!): Result!
  ManagerRemoveComment(input: RecordRequest!): Result!
  ManagerRemoveChecklist(input: RecordRequest!): Result!
  ManagerRemoveAppointment(input: RecordRequest!): Result!
  ManagerRemoveCampaign(input: RecordRequest!): Result!
  ManagerRemoveInterest(input: RecordRequest!): Result!
  ManagerRemoveManager(input: RecordRequest!): Result!
  ManagerRemoveMedia(input: RecordRequest!): Result!

  ManagerDragMedia(input: DragRequest!): Result!

  ManagerAssignManager(input: ManagerAssignManagerRequest!): Result!

  ValidateField(input: ValidateFieldRequest!): ValudationStatus!

  OfferInitDeal(input: OfferInitDealRequest!): Result!
  OfferGeneratePDF(input: RecordRequest!): OfferPDF!
  OfferSign(input: OfferSignRequest!): OfferSignResult!

  CancelDeal(input: RecordRequest!): Result!
  RemoveDeal(input: RecordRequest!): Result!

  InvoiceSendToEmail(input: InvoiceSendToEmailRequest!): Result!

  SignIn(input: SignInRequest!): SignInResponse!
  SignUp(input: SignUpRequest!): CreationResponse!
  Reset(input: ResetRequest!): Result!
  ResetComplete(input: ResetCompleteRequest!): VerifyResponse!
  PhoneVerify(input: PhoneVerifyRequest!): PhoneVerifyResponse!
  Verify(input: VerifyRequest!): VerifyResponse!
  VerifyResend(input: VerifyResendRequest!): VerifyResendResponse!

  OfferPhoneVerify(input: OfferPhoneVerifyRequest!): Result!
  OfferPhoneVerifyResend(input: RecordRequest!): PhoneVerifyResponse!
}

###

input Code {
  code: String!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_CancelDeal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_InvoiceSendToEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.InvoiceSendToEmailRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNInvoiceSendToEmailRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvoiceSendToEmailRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerActivateOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerAssignBankDetailsToOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerAssignBankDetailsToOfferRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerAssignBankDetailsToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignBankDetailsToOfferRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerAssignInvestToOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerAssignInvestToOfferRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerAssignInvestToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignInvestToOfferRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerAssignLeadToManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerAssignLeadToManagerRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerAssignLeadToManagerRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignLeadToManagerRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerAssignManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerAssignManagerRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerAssignManagerRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignManagerRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerAssignMemberToOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerAssignMemberToOfferRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerAssignMemberToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignMemberToOfferRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCancelOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateAppointmentRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateAppointmentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateAppointmentRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateBankDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateBankDetailsRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateBankDetailsRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateBankDetailsRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateCampaignRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateCampaignRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCampaignRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateCategoryRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateChecklist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateChecklistRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateChecklistRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateChecklistRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateCommentRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateCommentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCommentRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateContractRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateContractRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateContractRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateCurrency_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateCurrencyRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateCurrencyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCurrencyRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateInterest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateInterestRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateInterestRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateInterestRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateInvest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateInvestRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateInvestRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateInvestRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateLead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateLeadRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateLeadRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateLeadRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerCreateOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerCreateOfferRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerCreateOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateOfferRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerDeactivateOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerDragMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DragRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNDragRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDragRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerDuplicateAndAssignContractToOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerDuplicateAndAssignContractToOfferRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerDuplicateAndAssignContractToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDuplicateAndAssignContractToOfferRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerDuplicateContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerDuplicateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerDuplicateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDuplicateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerDuplicateInvest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerDuplicateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerDuplicateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDuplicateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerDuplicateOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerDuplicateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerDuplicateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDuplicateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditAppointmentRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditAppointmentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditAppointmentRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditBankDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditBankDetailsRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditBankDetailsRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditBankDetailsRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditCampaignRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditCampaignRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCampaignRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditCategoryRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditCategoryRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCategoryRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditChecklist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditChecklistRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditChecklistRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditChecklistRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditCommentRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditCommentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCommentRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditContractRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditContractRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditContractRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditCurrency_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditCurrencyRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditCurrencyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCurrencyRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditInvest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditInvestRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditInvestRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditInvestRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditInvoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditInvoiceRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditInvoiceRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditInvoiceRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditLead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditLeadRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditLeadRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditLeadRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditMediaRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditMediaRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditMediaRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerEditOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerEditOfferRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerEditOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditOfferRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveChecklist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveInterest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveLead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ManagerRemoveMedia_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_MemberEmailUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MemberEmailUpdateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNMemberEmailUpdateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberEmailUpdateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_MemberPersonalUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MemberPersonalUpdateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNMemberPersonalUpdateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberPersonalUpdateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_MemberPhoneUpdate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MemberPhoneUpdateRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNMemberPhoneUpdateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberPhoneUpdateRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_OfferGeneratePDF_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_OfferInitDeal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OfferInitDealRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNOfferInitDealRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferInitDealRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_OfferPhoneVerifyResend_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_OfferPhoneVerify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OfferPhoneVerifyRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNOfferPhoneVerifyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferPhoneVerifyRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_OfferSign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OfferSignRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNOfferSignRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferSignRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_PhoneVerify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PhoneVerifyRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNPhoneVerifyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐPhoneVerifyRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_RemoveDeal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ResetComplete_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ResetCompleteRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNResetCompleteRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResetCompleteRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Reset_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ResetRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNResetRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResetRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_SignIn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SignInRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSignInRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSignInRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_SignUp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SignUpRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNSignUpRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSignUpRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ValidateField_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ValidateFieldRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNValidateFieldRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐValidateFieldRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_VerifyResend_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VerifyResendRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNVerifyResendRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResendRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_Verify_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.VerifyRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNVerifyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_BankDetailsByInvoiceID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ContractByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_DealByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_InterestByDealID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_InterestByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_InterestListByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_InvestByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Invest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_InvoiceByDealID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Invoice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerAppointmentListByLeadID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerAppointmentList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerAppointment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerBankDetailsByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerBankDetailsList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerBankDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCampaignList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCampaign_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCategoryList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCategory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerChecklistList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerChecklist_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCommentListByLeadID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCommentList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerComment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerContractListByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerContractList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCurrencyList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerCurrency_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerDealByContractID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ManagerDealByContractIDRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOManagerDealByContractIDRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDealByContractIDRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerDealListByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerDealList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerDeal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerInterestListByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerInvestByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerInvestList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerInvest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerInvoiceByDealID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerLeadList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerLead_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerManagerList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerMediaByInvestID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ManagerMediaByInvestIDRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNManagerMediaByInvestIDRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerMediaByInvestIDRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerMemberByOfferID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerOfferList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ListRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerOffer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerSearchBankDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SearchRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerSearchContract_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SearchRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerSearchCurrency_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SearchRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerSearchInvest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SearchRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerSearchManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SearchRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerSearchMemberNoManager_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SearchRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_ManagerSearchMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.SearchRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_OfferByInvoiceID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_Offer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RecordRequest
	if tmp, ok := rawArgs["input"]; ok {
		arg0, err = ec.unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Alert_AlertID(ctx context.Context, field graphql.CollectedField, obj *model.Alert) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Alert",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlertID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Alert_AssetID(ctx context.Context, field graphql.CollectedField, obj *model.Alert) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Alert",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AssetID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Alert_Price(ctx context.Context, field graphql.CollectedField, obj *model.Alert) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Alert",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Alert_TimestampOpen(ctx context.Context, field graphql.CollectedField, obj *model.Alert) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Alert",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampOpen, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_AppointmentID(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppointmentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_Type(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_Title(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_Description(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_TimestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_DateDue(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_TimestampDue(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampDue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_Status(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Appointment_LeadID(ctx context.Context, field graphql.CollectedField, obj *model.Appointment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Appointment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_BalanceID(ctx context.Context, field graphql.CollectedField, obj *model.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BalanceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_Amount(ctx context.Context, field graphql.CollectedField, obj *model.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Balance_AmountNegative(ctx context.Context, field graphql.CollectedField, obj *model.Balance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Balance",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountNegative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankDetailsID(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankDetailsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_Title(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BeneficiaryCompany(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryCompany, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BeneficiaryFirstName(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryFirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BeneficiaryLastName(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryLastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BeneficiaryCountry(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BeneficiaryCity(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BeneficiaryZip(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BeneficiaryAddress(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BeneficiaryAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankName(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankBranch(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBranch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankIFSC(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankIfsc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankBranchCountry(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBranchCountry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankBranchCity(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBranchCity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankBranchZip(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBranchZip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankBranchAddress(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBranchAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankAccountNumber(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccountNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankAccountType(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankAccountType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankRoutingNumber(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankRoutingNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankTransferCaption(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankTransferCaption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankIBAN(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankIban, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankSWIFT(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankSwift, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankSWIFTCorrespondent(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankSWIFTCorrespondent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BankDetails_BankBIC(ctx context.Context, field graphql.CollectedField, obj *model.BankDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "BankDetails",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankBic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_CampaignID(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Campaign",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_Title(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Campaign",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_Description(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Campaign",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Campaign",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Campaign_TimestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.Campaign) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Campaign",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Category_CategoryID(ctx context.Context, field graphql.CollectedField, obj *model.Category) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Category",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Category_Title(ctx context.Context, field graphql.CollectedField, obj *model.Category) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Category",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Checklist_ChecklistID(ctx context.Context, field graphql.CollectedField, obj *model.Checklist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Checklist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChecklistID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Checklist_Title(ctx context.Context, field graphql.CollectedField, obj *model.Checklist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Checklist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Checklist_Complete(ctx context.Context, field graphql.CollectedField, obj *model.Checklist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Checklist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Complete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Checklist_Position(ctx context.Context, field graphql.CollectedField, obj *model.Checklist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Checklist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Checklist_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Checklist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Checklist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Checklist_TimestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.Checklist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Checklist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Checklist_LeadID(ctx context.Context, field graphql.CollectedField, obj *model.Checklist) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Checklist",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_CommentID(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_Content(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_TimestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_DateEdited(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateEdited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_TimestampEdited(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampEdited, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Comment_LeadID(ctx context.Context, field graphql.CollectedField, obj *model.Comment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Comment",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_ContractID(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Contract",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_Title(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Contract",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_Content(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Contract",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Content, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_ContentRaw(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Contract",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentRaw, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_OfferID(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Contract",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_Current(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Contract",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Current, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Contract_Template(ctx context.Context, field graphql.CollectedField, obj *model.Contract) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Contract",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CreationResponse_RecordID(ctx context.Context, field graphql.CollectedField, obj *model.CreationResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "CreationResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Currency",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_Title(ctx context.Context, field graphql.CollectedField, obj *model.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Currency",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Currency_Symbol(ctx context.Context, field graphql.CollectedField, obj *model.Currency) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Currency",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Symbol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_DealID(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_OfferID(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_ContractID(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContractID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_SignatureFilename(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignatureFilename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_SignatureURL(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignatureURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_VerificationCode(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VerificationCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_DateSigned(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateSigned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_DateVerified(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateVerified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_DatePaid(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatePaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_DateStart(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateStart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_DateEnd(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_Status(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_Amount(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Deal_Duration(ctx context.Context, field graphql.CollectedField, obj *model.Deal) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Deal",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FAQ_FAQID(ctx context.Context, field graphql.CollectedField, obj *model.Faq) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FAQ",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faqid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FAQ_Question(ctx context.Context, field graphql.CollectedField, obj *model.Faq) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FAQ",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FAQ_Answer(ctx context.Context, field graphql.CollectedField, obj *model.Faq) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FAQ",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FAQ_Position(ctx context.Context, field graphql.CollectedField, obj *model.Faq) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "FAQ",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_Event(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Event, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_ID(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_Value(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_Rate(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_RateBuy(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateBuy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_RateSell(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RateSell, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_Change(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Change, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_Sentiment(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sentiment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Info_SentimentType(ctx context.Context, field graphql.CollectedField, obj *model.Info) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Info",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SentimentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Interest_InterestID(ctx context.Context, field graphql.CollectedField, obj *model.Interest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Interest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Interest_OfferID(ctx context.Context, field graphql.CollectedField, obj *model.Interest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Interest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Interest_AmountFrom(ctx context.Context, field graphql.CollectedField, obj *model.Interest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Interest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Interest_AmountTo(ctx context.Context, field graphql.CollectedField, obj *model.Interest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Interest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Interest_DurationFrom(ctx context.Context, field graphql.CollectedField, obj *model.Interest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Interest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Interest_DurationTo(ctx context.Context, field graphql.CollectedField, obj *model.Interest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Interest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DurationTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Interest_Interest(ctx context.Context, field graphql.CollectedField, obj *model.Interest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Interest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_InvestID(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_OfferID(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_CategoryID(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CategoryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_BankDetailsID(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankDetailsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_Title(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_Subtitle(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_Description(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_FAQ(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Faq)
	fc.Result = res
	return ec.marshalOFAQ2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐFaq(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_Photo(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Photo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_Document(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Document, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Media)
	fc.Result = res
	return ec.marshalOMedia2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx, field.Selections, res)
}

func (ec *executionContext) _Invest_Status(ctx context.Context, field graphql.CollectedField, obj *model.Invest) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invest",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_InvoiceID(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvoiceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_OfferID(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_DealID(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DealID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_Status(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_Amount(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_TimestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_DatePaid(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatePaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Invoice_TimestampPaid(ctx context.Context, field graphql.CollectedField, obj *model.Invoice) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Invoice",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampPaid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_LeadID(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_ManagerID(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_CampaignID(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CampaignID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Email(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Phone(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_IP(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_FirstName(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_LastName(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Gender(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_FamilyStatus(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FamilyStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_MaidenName(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaidenName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Citizenship(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Citizenship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Country(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_City(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Zip(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Address1(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Address2(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_StreetNumber(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_StreetName(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Birthday(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_Status(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Lead_TimestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.Lead) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Lead",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerOffer_OfferID(ctx context.Context, field graphql.CollectedField, obj *model.ManagerOffer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerOffer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerOffer_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.ManagerOffer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerOffer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerOffer_InvestID(ctx context.Context, field graphql.CollectedField, obj *model.ManagerOffer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerOffer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerOffer_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.ManagerOffer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerOffer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerOffer_BankDetailsID(ctx context.Context, field graphql.CollectedField, obj *model.ManagerOffer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerOffer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankDetailsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerOffer_Title(ctx context.Context, field graphql.CollectedField, obj *model.ManagerOffer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerOffer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerOffer_Status(ctx context.Context, field graphql.CollectedField, obj *model.ManagerOffer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerOffer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerSearch_ManagerID(ctx context.Context, field graphql.CollectedField, obj *model.ManagerSearch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerSearch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _ManagerSearch_Title(ctx context.Context, field graphql.CollectedField, obj *model.ManagerSearch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ManagerSearch",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_MediaID(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MediaID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_InvestID(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_URL(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_Title(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_Position(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_Filename(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_Category(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Media_Created(ctx context.Context, field graphql.CollectedField, obj *model.Media) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Media",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Email(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_ManagerID(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_IP(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_FirstName(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_LastName(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Gender(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Gender, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_FamilyStatus(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FamilyStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_MaidenName(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaidenName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Citizenship(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Citizenship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Country(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_City(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Zip(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zip, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Address1(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address1, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Address2(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address2, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_StreetNumber(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_StreetName(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StreetName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Image(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Birthday(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Birthday, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_EmailNotifications(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmailNotifications, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Phone(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Phone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Created(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Role(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_USD(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Usd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_EUR(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Eur, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_LeverageAllowed(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeverageAllowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_StopLossAllowed(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StopLossAllowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_TakeProfitAllowed(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TakeProfitAllowed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_Status(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Member_ManagerRole(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Member",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ManagerRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_MemberPersonalUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_MemberPersonalUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MemberPersonalUpdate(rctx, args["input"].(model.MemberPersonalUpdateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_MemberPhoneUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_MemberPhoneUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MemberPhoneUpdate(rctx, args["input"].(model.MemberPhoneUpdateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_MemberEmailUpdate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_MemberEmailUpdate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MemberEmailUpdate(rctx, args["input"].(model.MemberEmailUpdateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateBankDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateBankDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateBankDetails(rctx, args["input"].(model.ManagerCreateBankDetailsRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateInvest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateInvest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateInvest(rctx, args["input"].(model.ManagerCreateInvestRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateOffer(rctx, args["input"].(model.ManagerCreateOfferRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateInterest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateInterest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateInterest(rctx, args["input"].(model.ManagerCreateInterestRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateCategory(rctx, args["input"].(model.ManagerCreateCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateContract_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateContract(rctx, args["input"].(model.ManagerCreateContractRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateCurrency(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateCurrency_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateCurrency(rctx, args["input"].(model.ManagerCreateCurrencyRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateLead_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateLead(rctx, args["input"].(model.ManagerCreateLeadRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateComment(rctx, args["input"].(model.ManagerCreateCommentRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateChecklist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateChecklist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateChecklist(rctx, args["input"].(model.ManagerCreateChecklistRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateAppointment(rctx, args["input"].(model.ManagerCreateAppointmentRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCreateCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCreateCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCreateCampaign(rctx, args["input"].(model.ManagerCreateCampaignRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerAssignMemberToOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerAssignMemberToOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerAssignMemberToOffer(rctx, args["input"].(model.ManagerAssignMemberToOfferRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerAssignInvestToOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerAssignInvestToOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerAssignInvestToOffer(rctx, args["input"].(model.ManagerAssignInvestToOfferRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerDuplicateAndAssignContractToOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerDuplicateAndAssignContractToOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerDuplicateAndAssignContractToOffer(rctx, args["input"].(model.ManagerDuplicateAndAssignContractToOfferRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerAssignBankDetailsToOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerAssignBankDetailsToOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerAssignBankDetailsToOffer(rctx, args["input"].(model.ManagerAssignBankDetailsToOfferRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerAssignLeadToManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerAssignLeadToManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerAssignLeadToManager(rctx, args["input"].(model.ManagerAssignLeadToManagerRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerDuplicateInvest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerDuplicateInvest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerDuplicateInvest(rctx, args["input"].(model.ManagerDuplicateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerDuplicateOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerDuplicateOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerDuplicateOffer(rctx, args["input"].(model.ManagerDuplicateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerDuplicateContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerDuplicateContract_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerDuplicateContract(rctx, args["input"].(model.ManagerDuplicateRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerDeactivateOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerDeactivateOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerDeactivateOffer(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerActivateOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerActivateOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerActivateOffer(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerCancelOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerCancelOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerCancelOffer(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditBankDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditBankDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditBankDetails(rctx, args["input"].(model.ManagerEditBankDetailsRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditInvest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditInvest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditInvest(rctx, args["input"].(model.ManagerEditInvestRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditOffer(rctx, args["input"].(model.ManagerEditOfferRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditCategory(rctx, args["input"].(model.ManagerEditCategoryRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditContract_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditContract(rctx, args["input"].(model.ManagerEditContractRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditCurrency(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditCurrency_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditCurrency(rctx, args["input"].(model.ManagerEditCurrencyRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditInvoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditInvoice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditInvoice(rctx, args["input"].(model.ManagerEditInvoiceRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditLead_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditLead(rctx, args["input"].(model.ManagerEditLeadRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditComment(rctx, args["input"].(model.ManagerEditCommentRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditChecklist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditChecklist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditChecklist(rctx, args["input"].(model.ManagerEditChecklistRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditAppointment(rctx, args["input"].(model.ManagerEditAppointmentRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditCampaign(rctx, args["input"].(model.ManagerEditCampaignRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerEditMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerEditMedia_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerEditMedia(rctx, args["input"].(model.ManagerEditMediaRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveLead_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveLead(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveComment(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveChecklist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveChecklist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveChecklist(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveAppointment(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveCampaign(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveInterest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveInterest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveInterest(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveManager(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerRemoveMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerRemoveMedia_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerRemoveMedia(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerDragMedia(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerDragMedia_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerDragMedia(rctx, args["input"].(model.DragRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ManagerAssignManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ManagerAssignManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ManagerAssignManager(rctx, args["input"].(model.ManagerAssignManagerRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ValidateField(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ValidateField_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ValidateField(rctx, args["input"].(model.ValidateFieldRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ValudationStatus)
	fc.Result = res
	return ec.marshalNValudationStatus2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐValudationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_OfferInitDeal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_OfferInitDeal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OfferInitDeal(rctx, args["input"].(model.OfferInitDealRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_OfferGeneratePDF(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_OfferGeneratePDF_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OfferGeneratePdf(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OfferPdf)
	fc.Result = res
	return ec.marshalNOfferPDF2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferPdf(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_OfferSign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_OfferSign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OfferSign(rctx, args["input"].(model.OfferSignRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OfferSignResult)
	fc.Result = res
	return ec.marshalNOfferSignResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferSignResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CancelDeal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CancelDeal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CancelDeal(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_RemoveDeal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_RemoveDeal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveDeal(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_InvoiceSendToEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_InvoiceSendToEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InvoiceSendToEmail(rctx, args["input"].(model.InvoiceSendToEmailRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SignIn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SignIn_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SignIn(rctx, args["input"].(model.SignInRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SignInResponse)
	fc.Result = res
	return ec.marshalNSignInResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSignInResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_SignUp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_SignUp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SignUp(rctx, args["input"].(model.SignUpRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreationResponse)
	fc.Result = res
	return ec.marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Reset(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Reset_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Reset(rctx, args["input"].(model.ResetRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ResetComplete(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ResetComplete_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResetComplete(rctx, args["input"].(model.ResetCompleteRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VerifyResponse)
	fc.Result = res
	return ec.marshalNVerifyResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_PhoneVerify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_PhoneVerify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PhoneVerify(rctx, args["input"].(model.PhoneVerifyRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneVerifyResponse)
	fc.Result = res
	return ec.marshalNPhoneVerifyResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐPhoneVerifyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_Verify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_Verify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Verify(rctx, args["input"].(model.VerifyRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VerifyResponse)
	fc.Result = res
	return ec.marshalNVerifyResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_VerifyResend(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_VerifyResend_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyResend(rctx, args["input"].(model.VerifyResendRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VerifyResendResponse)
	fc.Result = res
	return ec.marshalNVerifyResendResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResendResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_OfferPhoneVerify(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_OfferPhoneVerify_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OfferPhoneVerify(rctx, args["input"].(model.OfferPhoneVerifyRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Result)
	fc.Result = res
	return ec.marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_OfferPhoneVerifyResend(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Mutation",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_OfferPhoneVerifyResend_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OfferPhoneVerifyResend(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.PhoneVerifyResponse)
	fc.Result = res
	return ec.marshalNPhoneVerifyResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐPhoneVerifyResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_OfferID(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfferID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_InvestID(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InvestID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_BankDetailsID(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BankDetailsID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_Title(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_Status(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_Subtitle(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Subtitle, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_Description(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_Contract(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Contract, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalOContract2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) _Offer_FAQ(ctx context.Context, field graphql.CollectedField, obj *model.Offer) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Offer",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Faq, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Faq)
	fc.Result = res
	return ec.marshalOFAQ2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐFaq(ctx, field.Selections, res)
}

func (ec *executionContext) _OfferPDF_URL(ctx context.Context, field graphql.CollectedField, obj *model.OfferPdf) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OfferPDF",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _OfferSignResult_Status(ctx context.Context, field graphql.CollectedField, obj *model.OfferSignResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OfferSignResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _OfferSignResult_Message(ctx context.Context, field graphql.CollectedField, obj *model.OfferSignResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OfferSignResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OfferSignResult_Timeout(ctx context.Context, field graphql.CollectedField, obj *model.OfferSignResult) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "OfferSignResult",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneVerifyResponse_Timeout(ctx context.Context, field graphql.CollectedField, obj *model.PhoneVerifyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "PhoneVerifyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Invest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Invest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Invest(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_InvestByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_InvestByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InvestByOfferID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_InterestListByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_InterestListByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InterestListByOfferID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Interest)
	fc.Result = res
	return ec.marshalNInterest2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerDealByContractID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerDealByContractID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerDealByContractID(rctx, args["input"].(*model.ManagerDealByContractIDRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDeal(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Offer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Offer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Offer(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Offer)
	fc.Result = res
	return ec.marshalNOffer2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOffer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ContractByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ContractByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContractByOfferID(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_DealByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_DealByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DealByOfferID(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDeal(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_InterestByDealID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_InterestByDealID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InterestByDealID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Interest)
	fc.Result = res
	return ec.marshalNInterest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_InterestByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_InterestByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InterestByOfferID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Interest)
	fc.Result = res
	return ec.marshalNInterest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Invoice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_Invoice_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Invoice(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_InvoiceByDealID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_InvoiceByDealID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().InvoiceByDealID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BankDetailsByInvoiceID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_BankDetailsByInvoiceID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BankDetailsByInvoiceID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BankDetails)
	fc.Result = res
	return ec.marshalNBankDetails2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_OfferByInvoiceID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_OfferByInvoiceID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfferByInvoiceID(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerBankDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerBankDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerBankDetails(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BankDetails)
	fc.Result = res
	return ec.marshalNBankDetails2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerBankDetailsByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerBankDetailsByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerBankDetailsByOfferID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.BankDetails)
	fc.Result = res
	return ec.marshalNBankDetails2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerInvest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerInvest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerInvest(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerMediaByInvestID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerMediaByInvestID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerMediaByInvestID(rctx, args["input"].(model.ManagerMediaByInvestIDRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Media)
	fc.Result = res
	return ec.marshalNMedia2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMediaᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerInvestByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerInvestByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerInvestByOfferID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerOffer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerOffer_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerOffer(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ManagerOffer)
	fc.Result = res
	return ec.marshalNManagerOffer2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerOffer(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerDeal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerDeal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerDeal(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDeal(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerInvoiceByDealID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerInvoiceByDealID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerInvoiceByDealID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Invoice)
	fc.Result = res
	return ec.marshalNInvoice2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvoice(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerContract_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerContract(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCategory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCategory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCategory(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCategory(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCurrency(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCurrency_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCurrency(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Currency)
	fc.Result = res
	return ec.marshalNCurrency2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrency(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerMember(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerMemberByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerMemberByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerMemberByOfferID(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerManager(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerLead(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerLead_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerLead(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Lead)
	fc.Result = res
	return ec.marshalNLead2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐLead(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerComment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerComment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerComment(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐComment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerChecklist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerChecklist_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerChecklist(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Checklist)
	fc.Result = res
	return ec.marshalNChecklist2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐChecklist(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerAppointment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerAppointment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerAppointment(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAppointment(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCampaign(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCampaign_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCampaign(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCampaign(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_OfferList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OfferList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_DealList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DealList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDealᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ContractList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ContractList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_CategoryList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CategoryList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_CurrencyList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrencyList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Currency)
	fc.Result = res
	return ec.marshalNCurrency2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrencyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_BalanceList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BalanceList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Balance)
	fc.Result = res
	return ec.marshalNBalance2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBalanceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_TXList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TXList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Tx)
	fc.Result = res
	return ec.marshalNTX2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐTxᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerBankDetailsList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerBankDetailsList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerBankDetailsList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BankDetails)
	fc.Result = res
	return ec.marshalNBankDetails2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerInvestList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerInvestList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerInvestList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerOfferList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerOfferList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerOfferList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ManagerOffer)
	fc.Result = res
	return ec.marshalNManagerOffer2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerOfferᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerDealList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerDealList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerDealList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDealᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerDealListByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerDealListByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerDealListByOfferID(rctx, args["input"].(model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Deal)
	fc.Result = res
	return ec.marshalNDeal2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDealᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerContractList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerContractList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerContractList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCategoryList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCategoryList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCategoryList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Category)
	fc.Result = res
	return ec.marshalNCategory2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCategoryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCurrencyList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCurrencyList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCurrencyList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Currency)
	fc.Result = res
	return ec.marshalNCurrency2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrencyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerLeadList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerLeadList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerLeadList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Lead)
	fc.Result = res
	return ec.marshalNLead2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐLeadᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCommentList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCommentList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCommentList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCommentListByLeadID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCommentListByLeadID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCommentListByLeadID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Comment)
	fc.Result = res
	return ec.marshalNComment2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCommentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerChecklistList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerChecklistList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerChecklistList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Checklist)
	fc.Result = res
	return ec.marshalNChecklist2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐChecklistᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerAppointmentList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerAppointmentList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerAppointmentList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAppointmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerAppointmentListByLeadID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerAppointmentListByLeadID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerAppointmentListByLeadID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Appointment)
	fc.Result = res
	return ec.marshalNAppointment2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAppointmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerCampaignList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerCampaignList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerCampaignList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Campaign)
	fc.Result = res
	return ec.marshalNCampaign2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCampaignᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerManagerList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerManagerList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerManagerList(rctx, args["input"].(*model.ListRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerContractListByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerContractListByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerContractListByOfferID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerInterestListByOfferID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerInterestListByOfferID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerInterestListByOfferID(rctx, args["input"].(*model.RecordRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Interest)
	fc.Result = res
	return ec.marshalNInterest2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerSearchMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerSearchMember_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerSearchMember(rctx, args["input"].(*model.SearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerSearchMemberNoManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerSearchMemberNoManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerSearchMemberNoManager(rctx, args["input"].(*model.SearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerSearchInvest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerSearchInvest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerSearchInvest(rctx, args["input"].(*model.SearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Invest)
	fc.Result = res
	return ec.marshalNInvest2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvestᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerSearchContract(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerSearchContract_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerSearchContract(rctx, args["input"].(*model.SearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Contract)
	fc.Result = res
	return ec.marshalNContract2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContractᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerSearchCurrency(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerSearchCurrency_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerSearchCurrency(rctx, args["input"].(*model.SearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Currency)
	fc.Result = res
	return ec.marshalNCurrency2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrencyᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerSearchBankDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerSearchBankDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerSearchBankDetails(rctx, args["input"].(*model.SearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.BankDetails)
	fc.Result = res
	return ec.marshalNBankDetails2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetailsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_ManagerSearchManager(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_ManagerSearchManager_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ManagerSearchManager(rctx, args["input"].(*model.SearchRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ManagerSearch)
	fc.Result = res
	return ec.marshalNManagerSearch2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerSearchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_Member(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Member(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_alert(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Alert(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Alert)
	fc.Result = res
	return ec.marshalNAlert2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAlertᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Query",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Result_Status(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Result_Message(ctx context.Context, field graphql.CollectedField, obj *model.Result) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Result",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SignInResponse_Status(ctx context.Context, field graphql.CollectedField, obj *model.SignInResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SignInResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _SignInResponse_Message(ctx context.Context, field graphql.CollectedField, obj *model.SignInResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SignInResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SignInResponse_Token(ctx context.Context, field graphql.CollectedField, obj *model.SignInResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "SignInResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Subscription_newInfo(ctx context.Context, field graphql.CollectedField) (ret func() graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = nil
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Subscription",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Subscription().NewInfo(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return nil
	}
	return func() graphql.Marshaler {
		res, ok := <-resTmp.(<-chan *model.Info)
		if !ok {
			return nil
		}
		return graphql.WriterFunc(func(w io.Writer) {
			w.Write([]byte{'{'})
			graphql.MarshalString(field.Alias).MarshalGQL(w)
			w.Write([]byte{':'})
			ec.marshalNInfo2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInfo(ctx, field.Selections, res).MarshalGQL(w)
			w.Write([]byte{'}'})
		})
	}
}

func (ec *executionContext) _TX_TXID(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Txid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_Amount(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_AmountNegative(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AmountNegative, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_CurrencyID(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrencyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_Status(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_DateCreated(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_DateComplete(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_TimestampCreated(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _TX_TimestampComplete(ctx context.Context, field graphql.CollectedField, obj *model.Tx) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "TX",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimestampComplete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_UploadID(ctx context.Context, field graphql.CollectedField, obj *model.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Upload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UploadID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_MemberID(ctx context.Context, field graphql.CollectedField, obj *model.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Upload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_URL(ctx context.Context, field graphql.CollectedField, obj *model.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Upload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_Filename(ctx context.Context, field graphql.CollectedField, obj *model.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Upload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Filename, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_Category(ctx context.Context, field graphql.CollectedField, obj *model.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Upload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_Created(ctx context.Context, field graphql.CollectedField, obj *model.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "Upload",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Created, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ValudationStatus_Status(ctx context.Context, field graphql.CollectedField, obj *model.ValudationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ValudationStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _ValudationStatus_Message(ctx context.Context, field graphql.CollectedField, obj *model.ValudationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "ValudationStatus",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifyResendResponse_Status(ctx context.Context, field graphql.CollectedField, obj *model.VerifyResendResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VerifyResendResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifyResendResponse_Message(ctx context.Context, field graphql.CollectedField, obj *model.VerifyResendResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VerifyResendResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifyResendResponse_Timeout(ctx context.Context, field graphql.CollectedField, obj *model.VerifyResendResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VerifyResendResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifyResponse_Status(ctx context.Context, field graphql.CollectedField, obj *model.VerifyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VerifyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifyResponse_Message(ctx context.Context, field graphql.CollectedField, obj *model.VerifyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VerifyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VerifyResponse_Token(ctx context.Context, field graphql.CollectedField, obj *model.VerifyResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "VerifyResponse",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Directive",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__EnumValue",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Field",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__InputValue",
		Field:    field,
		Args:     nil,
		IsMethod: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Schema",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:   "__Type",
		Field:    field,
		Args:     nil,
		IsMethod: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCode(ctx context.Context, obj interface{}) (model.Code, error) {
	var it model.Code
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDragRequest(ctx context.Context, obj interface{}) (model.DragRequest, error) {
	var it model.DragRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Position":
			var err error
			it.Position, err = ec.unmarshalNInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInvoiceSendToEmailRequest(ctx context.Context, obj interface{}) (model.InvoiceSendToEmailRequest, error) {
	var it model.InvoiceSendToEmailRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "InvoiceID":
			var err error
			it.InvoiceID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputListRequest(ctx context.Context, obj interface{}) (model.ListRequest, error) {
	var it model.ListRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "SortBy":
			var err error
			it.SortBy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerAssignBankDetailsToOfferRequest(ctx context.Context, obj interface{}) (model.ManagerAssignBankDetailsToOfferRequest, error) {
	var it model.ManagerAssignBankDetailsToOfferRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankDetailsID":
			var err error
			it.BankDetailsID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerAssignInvestToOfferRequest(ctx context.Context, obj interface{}) (model.ManagerAssignInvestToOfferRequest, error) {
	var it model.ManagerAssignInvestToOfferRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "InvestID":
			var err error
			it.InvestID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerAssignLeadToManagerRequest(ctx context.Context, obj interface{}) (model.ManagerAssignLeadToManagerRequest, error) {
	var it model.ManagerAssignLeadToManagerRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ManagerID":
			var err error
			it.ManagerID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerAssignManagerRequest(ctx context.Context, obj interface{}) (model.ManagerAssignManagerRequest, error) {
	var it model.ManagerAssignManagerRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "MemberID":
			var err error
			it.MemberID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerAssignMemberToOfferRequest(ctx context.Context, obj interface{}) (model.ManagerAssignMemberToOfferRequest, error) {
	var it model.ManagerAssignMemberToOfferRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "MemberID":
			var err error
			it.MemberID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateAppointmentRequest(ctx context.Context, obj interface{}) (model.ManagerCreateAppointmentRequest, error) {
	var it model.ManagerCreateAppointmentRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Type":
			var err error
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "DateDue":
			var err error
			it.DateDue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateBankDetailsRequest(ctx context.Context, obj interface{}) (model.ManagerCreateBankDetailsRequest, error) {
	var it model.ManagerCreateBankDetailsRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryCompany":
			var err error
			it.BeneficiaryCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryFirstName":
			var err error
			it.BeneficiaryFirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryLastName":
			var err error
			it.BeneficiaryLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryCountry":
			var err error
			it.BeneficiaryCountry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryCity":
			var err error
			it.BeneficiaryCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryZip":
			var err error
			it.BeneficiaryZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryAddress":
			var err error
			it.BeneficiaryAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankName":
			var err error
			it.BankName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranch":
			var err error
			it.BankBranch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankIFSC":
			var err error
			it.BankIfsc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchCountry":
			var err error
			it.BankBranchCountry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchCity":
			var err error
			it.BankBranchCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchZip":
			var err error
			it.BankBranchZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchAddress":
			var err error
			it.BankBranchAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankAccountNumber":
			var err error
			it.BankAccountNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankAccountType":
			var err error
			it.BankAccountType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankRoutingNumber":
			var err error
			it.BankRoutingNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankTransferCaption":
			var err error
			it.BankTransferCaption, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankIBAN":
			var err error
			it.BankIban, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankSWIFT":
			var err error
			it.BankSwift, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankSWIFTCorrespondent":
			var err error
			it.BankSWIFTCorrespondent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBIC":
			var err error
			it.BankBic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateCampaignRequest(ctx context.Context, obj interface{}) (model.ManagerCreateCampaignRequest, error) {
	var it model.ManagerCreateCampaignRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateCategoryRequest(ctx context.Context, obj interface{}) (model.ManagerCreateCategoryRequest, error) {
	var it model.ManagerCreateCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateChecklistRequest(ctx context.Context, obj interface{}) (model.ManagerCreateChecklistRequest, error) {
	var it model.ManagerCreateChecklistRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Complete":
			var err error
			it.Complete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Position":
			var err error
			it.Position, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateCommentRequest(ctx context.Context, obj interface{}) (model.ManagerCreateCommentRequest, error) {
	var it model.ManagerCreateCommentRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Content":
			var err error
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateContractRequest(ctx context.Context, obj interface{}) (model.ManagerCreateContractRequest, error) {
	var it model.ManagerCreateContractRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ContentRaw":
			var err error
			it.ContentRaw, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateCurrencyRequest(ctx context.Context, obj interface{}) (model.ManagerCreateCurrencyRequest, error) {
	var it model.ManagerCreateCurrencyRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Symbol":
			var err error
			it.Symbol, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateInterestRequest(ctx context.Context, obj interface{}) (model.ManagerCreateInterestRequest, error) {
	var it model.ManagerCreateInterestRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "AmountFrom":
			var err error
			it.AmountFrom, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "AmountTo":
			var err error
			it.AmountTo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "DurationFrom":
			var err error
			it.DurationFrom, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "DurationTo":
			var err error
			it.DurationTo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Interest":
			var err error
			it.Interest, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateInvestRequest(ctx context.Context, obj interface{}) (model.ManagerCreateInvestRequest, error) {
	var it model.ManagerCreateInvestRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CategoryID":
			var err error
			it.CategoryID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subtitle":
			var err error
			it.Subtitle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateLeadRequest(ctx context.Context, obj interface{}) (model.ManagerCreateLeadRequest, error) {
	var it model.ManagerCreateLeadRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ManagerID":
			var err error
			it.ManagerID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "MemberID":
			var err error
			it.MemberID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "CampaignID":
			var err error
			it.CampaignID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyID":
			var err error
			it.CurrencyID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Phone":
			var err error
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "IP":
			var err error
			it.IP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "FirstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Gender":
			var err error
			it.Gender, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "FamilyStatus":
			var err error
			it.FamilyStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaidenName":
			var err error
			it.MaidenName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Citizenship":
			var err error
			it.Citizenship, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Country":
			var err error
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Zip":
			var err error
			it.Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address1":
			var err error
			it.Address1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address2":
			var err error
			it.Address2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "StreetNumber":
			var err error
			it.StreetNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "StreetName":
			var err error
			it.StreetName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Birthday":
			var err error
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerCreateOfferRequest(ctx context.Context, obj interface{}) (model.ManagerCreateOfferRequest, error) {
	var it model.ManagerCreateOfferRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "InvestID":
			var err error
			it.InvestID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "MemberID":
			var err error
			it.MemberID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyID":
			var err error
			it.CurrencyID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankDetailsID":
			var err error
			it.BankDetailsID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerDealByContractIDRequest(ctx context.Context, obj interface{}) (model.ManagerDealByContractIDRequest, error) {
	var it model.ManagerDealByContractIDRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ContractID":
			var err error
			it.ContractID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerDuplicateAndAssignContractToOfferRequest(ctx context.Context, obj interface{}) (model.ManagerDuplicateAndAssignContractToOfferRequest, error) {
	var it model.ManagerDuplicateAndAssignContractToOfferRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ContractID":
			var err error
			it.ContractID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerDuplicateRequest(ctx context.Context, obj interface{}) (model.ManagerDuplicateRequest, error) {
	var it model.ManagerDuplicateRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "RecordID":
			var err error
			it.RecordID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditAppointmentRequest(ctx context.Context, obj interface{}) (model.ManagerEditAppointmentRequest, error) {
	var it model.ManagerEditAppointmentRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "AppointmentID":
			var err error
			it.AppointmentID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "DateDue":
			var err error
			it.DateDue, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditBankDetailsRequest(ctx context.Context, obj interface{}) (model.ManagerEditBankDetailsRequest, error) {
	var it model.ManagerEditBankDetailsRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "BankDetailsID":
			var err error
			it.BankDetailsID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryCompany":
			var err error
			it.BeneficiaryCompany, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryFirstName":
			var err error
			it.BeneficiaryFirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryLastName":
			var err error
			it.BeneficiaryLastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryCountry":
			var err error
			it.BeneficiaryCountry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryCity":
			var err error
			it.BeneficiaryCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryZip":
			var err error
			it.BeneficiaryZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BeneficiaryAddress":
			var err error
			it.BeneficiaryAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankName":
			var err error
			it.BankName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranch":
			var err error
			it.BankBranch, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankIFSC":
			var err error
			it.BankIfsc, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchCountry":
			var err error
			it.BankBranchCountry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchCity":
			var err error
			it.BankBranchCity, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchZip":
			var err error
			it.BankBranchZip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBranchAddress":
			var err error
			it.BankBranchAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankAccountNumber":
			var err error
			it.BankAccountNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankAccountType":
			var err error
			it.BankAccountType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankRoutingNumber":
			var err error
			it.BankRoutingNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankTransferCaption":
			var err error
			it.BankTransferCaption, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankIBAN":
			var err error
			it.BankIban, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankSWIFT":
			var err error
			it.BankSwift, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankSWIFTCorrespondent":
			var err error
			it.BankSWIFTCorrespondent, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "BankBIC":
			var err error
			it.BankBic, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditCampaignRequest(ctx context.Context, obj interface{}) (model.ManagerEditCampaignRequest, error) {
	var it model.ManagerEditCampaignRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CampaignID":
			var err error
			it.CampaignID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditCategoryRequest(ctx context.Context, obj interface{}) (model.ManagerEditCategoryRequest, error) {
	var it model.ManagerEditCategoryRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CategoryID":
			var err error
			it.CategoryID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditChecklistRequest(ctx context.Context, obj interface{}) (model.ManagerEditChecklistRequest, error) {
	var it model.ManagerEditChecklistRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ChecklistID":
			var err error
			it.ChecklistID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Complete":
			var err error
			it.Complete, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "Position":
			var err error
			it.Position, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditCommentRequest(ctx context.Context, obj interface{}) (model.ManagerEditCommentRequest, error) {
	var it model.ManagerEditCommentRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CommentID":
			var err error
			it.CommentID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Content":
			var err error
			it.Content, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditContractRequest(ctx context.Context, obj interface{}) (model.ManagerEditContractRequest, error) {
	var it model.ManagerEditContractRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "ContractID":
			var err error
			it.ContractID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ContentRaw":
			var err error
			it.ContentRaw, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditCurrencyRequest(ctx context.Context, obj interface{}) (model.ManagerEditCurrencyRequest, error) {
	var it model.ManagerEditCurrencyRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "CurrencyID":
			var err error
			it.CurrencyID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditInvestRequest(ctx context.Context, obj interface{}) (model.ManagerEditInvestRequest, error) {
	var it model.ManagerEditInvestRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "InvestID":
			var err error
			it.InvestID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CategoryID":
			var err error
			it.CategoryID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Subtitle":
			var err error
			it.Subtitle, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Description":
			var err error
			it.Description, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditInvoiceRequest(ctx context.Context, obj interface{}) (model.ManagerEditInvoiceRequest, error) {
	var it model.ManagerEditInvoiceRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "InvoiceID":
			var err error
			it.InvoiceID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			it.Status, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditLeadRequest(ctx context.Context, obj interface{}) (model.ManagerEditLeadRequest, error) {
	var it model.ManagerEditLeadRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "LeadID":
			var err error
			it.LeadID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ManagerID":
			var err error
			it.ManagerID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "MemberID":
			var err error
			it.MemberID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "CampaignID":
			var err error
			it.CampaignID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyID":
			var err error
			it.CurrencyID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Phone":
			var err error
			it.Phone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "IP":
			var err error
			it.IP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "FirstName":
			var err error
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LastName":
			var err error
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Gender":
			var err error
			it.Gender, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "FamilyStatus":
			var err error
			it.FamilyStatus, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaidenName":
			var err error
			it.MaidenName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Citizenship":
			var err error
			it.Citizenship, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Country":
			var err error
			it.Country, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error
			it.City, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Zip":
			var err error
			it.Zip, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address1":
			var err error
			it.Address1, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Address2":
			var err error
			it.Address2, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "StreetNumber":
			var err error
			it.StreetNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "StreetName":
			var err error
			it.StreetName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Birthday":
			var err error
			it.Birthday, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Status":
			var err error
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditMediaRequest(ctx context.Context, obj interface{}) (model.ManagerEditMediaRequest, error) {
	var it model.ManagerEditMediaRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "MediaID":
			var err error
			it.MediaID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerEditOfferRequest(ctx context.Context, obj interface{}) (model.ManagerEditOfferRequest, error) {
	var it model.ManagerEditOfferRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "CurrencyID":
			var err error
			it.CurrencyID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Title":
			var err error
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputManagerMediaByInvestIDRequest(ctx context.Context, obj interface{}) (model.ManagerMediaByInvestIDRequest, error) {
	var it model.ManagerMediaByInvestIDRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "RecordID":
			var err error
			it.RecordID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Category":
			var err error
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemberEmailUpdateRequest(ctx context.Context, obj interface{}) (model.MemberEmailUpdateRequest, error) {
	var it model.MemberEmailUpdateRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemberPersonalUpdateRequest(ctx context.Context, obj interface{}) (model.MemberPersonalUpdateRequest, error) {
	var it model.MemberPersonalUpdateRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FirstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "LastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMemberPhoneUpdateRequest(ctx context.Context, obj interface{}) (model.MemberPhoneUpdateRequest, error) {
	var it model.MemberPhoneUpdateRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Phone":
			var err error
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfferGeneratePDFRequest(ctx context.Context, obj interface{}) (model.OfferGeneratePDFRequest, error) {
	var it model.OfferGeneratePDFRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfferInitDealRequest(ctx context.Context, obj interface{}) (model.OfferInitDealRequest, error) {
	var it model.OfferInitDealRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Amount":
			var err error
			it.Amount, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Duration":
			var err error
			it.Duration, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfferPhoneVerifyRequest(ctx context.Context, obj interface{}) (model.OfferPhoneVerifyRequest, error) {
	var it model.OfferPhoneVerifyRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOfferSignRequest(ctx context.Context, obj interface{}) (model.OfferSignRequest, error) {
	var it model.OfferSignRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "OfferID":
			var err error
			it.OfferID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "Image":
			var err error
			it.Image, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneVerifyRequest(ctx context.Context, obj interface{}) (model.PhoneVerifyRequest, error) {
	var it model.PhoneVerifyRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Action":
			var err error
			it.Action, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecordRequest(ctx context.Context, obj interface{}) (model.RecordRequest, error) {
	var it model.RecordRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "RecordID":
			var err error
			it.RecordID, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetCompleteRequest(ctx context.Context, obj interface{}) (model.ResetCompleteRequest, error) {
	var it model.ResetCompleteRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Action":
			var err error
			it.Action, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Method":
			var err error
			it.Method, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Hash":
			var err error
			it.Hash, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResetRequest(ctx context.Context, obj interface{}) (model.ResetRequest, error) {
	var it model.ResetRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSearchRequest(ctx context.Context, obj interface{}) (model.SearchRequest, error) {
	var it model.SearchRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Query":
			var err error
			it.Query, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignInRequest(ctx context.Context, obj interface{}) (model.SignInRequest, error) {
	var it model.SignInRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSignUpRequest(ctx context.Context, obj interface{}) (model.SignUpRequest, error) {
	var it model.SignUpRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "FirstName":
			var err error
			it.FirstName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "LastName":
			var err error
			it.LastName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Birthday":
			var err error
			it.Birthday, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Citizenship":
			var err error
			it.Citizenship, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Gender":
			var err error
			it.Gender, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "FamilyStatus":
			var err error
			it.FamilyStatus, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "MaidenName":
			var err error
			it.MaidenName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Phone":
			var err error
			it.Phone, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Password":
			var err error
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Country":
			var err error
			it.Country, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "City":
			var err error
			it.City, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Zip":
			var err error
			it.Zip, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "StreetNumber":
			var err error
			it.StreetNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "StreetName":
			var err error
			it.StreetName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputValidateFieldRequest(ctx context.Context, obj interface{}) (model.ValidateFieldRequest, error) {
	var it model.ValidateFieldRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Field":
			var err error
			it.Field, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Value":
			var err error
			it.Value, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Type":
			var err error
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Section":
			var err error
			it.Section, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "Path":
			var err error
			it.Path, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVerify(ctx context.Context, obj interface{}) (model.Verify, error) {
	var it model.Verify
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "method":
			var err error
			it.Method, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hash":
			var err error
			it.Hash, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVerifyRequest(ctx context.Context, obj interface{}) (model.VerifyRequest, error) {
	var it model.VerifyRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Action":
			var err error
			it.Action, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Method":
			var err error
			it.Method, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Hash":
			var err error
			it.Hash, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "Code":
			var err error
			it.Code, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputVerifyResendRequest(ctx context.Context, obj interface{}) (model.VerifyResendRequest, error) {
	var it model.VerifyResendRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "Email":
			var err error
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var alertImplementors = []string{"Alert"}

func (ec *executionContext) _Alert(ctx context.Context, sel ast.SelectionSet, obj *model.Alert) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, alertImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Alert")
		case "AlertID":
			out.Values[i] = ec._Alert_AlertID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "AssetID":
			out.Values[i] = ec._Alert_AssetID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Price":
			out.Values[i] = ec._Alert_Price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "TimestampOpen":
			out.Values[i] = ec._Alert_TimestampOpen(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appointmentImplementors = []string{"Appointment"}

func (ec *executionContext) _Appointment(ctx context.Context, sel ast.SelectionSet, obj *model.Appointment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appointmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Appointment")
		case "AppointmentID":
			out.Values[i] = ec._Appointment_AppointmentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":
			out.Values[i] = ec._Appointment_Type(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Appointment_Title(ctx, field, obj)
		case "Description":
			out.Values[i] = ec._Appointment_Description(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._Appointment_DateCreated(ctx, field, obj)
		case "TimestampCreated":
			out.Values[i] = ec._Appointment_TimestampCreated(ctx, field, obj)
		case "DateDue":
			out.Values[i] = ec._Appointment_DateDue(ctx, field, obj)
		case "TimestampDue":
			out.Values[i] = ec._Appointment_TimestampDue(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._Appointment_Status(ctx, field, obj)
		case "LeadID":
			out.Values[i] = ec._Appointment_LeadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var balanceImplementors = []string{"Balance"}

func (ec *executionContext) _Balance(ctx context.Context, sel ast.SelectionSet, obj *model.Balance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, balanceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Balance")
		case "BalanceID":
			out.Values[i] = ec._Balance_BalanceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberID":
			out.Values[i] = ec._Balance_MemberID(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._Balance_CurrencyID(ctx, field, obj)
		case "Amount":
			out.Values[i] = ec._Balance_Amount(ctx, field, obj)
		case "AmountNegative":
			out.Values[i] = ec._Balance_AmountNegative(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var bankDetailsImplementors = []string{"BankDetails"}

func (ec *executionContext) _BankDetails(ctx context.Context, sel ast.SelectionSet, obj *model.BankDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, bankDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BankDetails")
		case "BankDetailsID":
			out.Values[i] = ec._BankDetails_BankDetailsID(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._BankDetails_Title(ctx, field, obj)
		case "BeneficiaryCompany":
			out.Values[i] = ec._BankDetails_BeneficiaryCompany(ctx, field, obj)
		case "BeneficiaryFirstName":
			out.Values[i] = ec._BankDetails_BeneficiaryFirstName(ctx, field, obj)
		case "BeneficiaryLastName":
			out.Values[i] = ec._BankDetails_BeneficiaryLastName(ctx, field, obj)
		case "BeneficiaryCountry":
			out.Values[i] = ec._BankDetails_BeneficiaryCountry(ctx, field, obj)
		case "BeneficiaryCity":
			out.Values[i] = ec._BankDetails_BeneficiaryCity(ctx, field, obj)
		case "BeneficiaryZip":
			out.Values[i] = ec._BankDetails_BeneficiaryZip(ctx, field, obj)
		case "BeneficiaryAddress":
			out.Values[i] = ec._BankDetails_BeneficiaryAddress(ctx, field, obj)
		case "BankName":
			out.Values[i] = ec._BankDetails_BankName(ctx, field, obj)
		case "BankBranch":
			out.Values[i] = ec._BankDetails_BankBranch(ctx, field, obj)
		case "BankIFSC":
			out.Values[i] = ec._BankDetails_BankIFSC(ctx, field, obj)
		case "BankBranchCountry":
			out.Values[i] = ec._BankDetails_BankBranchCountry(ctx, field, obj)
		case "BankBranchCity":
			out.Values[i] = ec._BankDetails_BankBranchCity(ctx, field, obj)
		case "BankBranchZip":
			out.Values[i] = ec._BankDetails_BankBranchZip(ctx, field, obj)
		case "BankBranchAddress":
			out.Values[i] = ec._BankDetails_BankBranchAddress(ctx, field, obj)
		case "BankAccountNumber":
			out.Values[i] = ec._BankDetails_BankAccountNumber(ctx, field, obj)
		case "BankAccountType":
			out.Values[i] = ec._BankDetails_BankAccountType(ctx, field, obj)
		case "BankRoutingNumber":
			out.Values[i] = ec._BankDetails_BankRoutingNumber(ctx, field, obj)
		case "BankTransferCaption":
			out.Values[i] = ec._BankDetails_BankTransferCaption(ctx, field, obj)
		case "BankIBAN":
			out.Values[i] = ec._BankDetails_BankIBAN(ctx, field, obj)
		case "BankSWIFT":
			out.Values[i] = ec._BankDetails_BankSWIFT(ctx, field, obj)
		case "BankSWIFTCorrespondent":
			out.Values[i] = ec._BankDetails_BankSWIFTCorrespondent(ctx, field, obj)
		case "BankBIC":
			out.Values[i] = ec._BankDetails_BankBIC(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var campaignImplementors = []string{"Campaign"}

func (ec *executionContext) _Campaign(ctx context.Context, sel ast.SelectionSet, obj *model.Campaign) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, campaignImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Campaign")
		case "CampaignID":
			out.Values[i] = ec._Campaign_CampaignID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Title":
			out.Values[i] = ec._Campaign_Title(ctx, field, obj)
		case "Description":
			out.Values[i] = ec._Campaign_Description(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._Campaign_DateCreated(ctx, field, obj)
		case "TimestampCreated":
			out.Values[i] = ec._Campaign_TimestampCreated(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var categoryImplementors = []string{"Category"}

func (ec *executionContext) _Category(ctx context.Context, sel ast.SelectionSet, obj *model.Category) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, categoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Category")
		case "CategoryID":
			out.Values[i] = ec._Category_CategoryID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Title":
			out.Values[i] = ec._Category_Title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checklistImplementors = []string{"Checklist"}

func (ec *executionContext) _Checklist(ctx context.Context, sel ast.SelectionSet, obj *model.Checklist) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checklistImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Checklist")
		case "ChecklistID":
			out.Values[i] = ec._Checklist_ChecklistID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Title":
			out.Values[i] = ec._Checklist_Title(ctx, field, obj)
		case "Complete":
			out.Values[i] = ec._Checklist_Complete(ctx, field, obj)
		case "Position":
			out.Values[i] = ec._Checklist_Position(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._Checklist_DateCreated(ctx, field, obj)
		case "TimestampCreated":
			out.Values[i] = ec._Checklist_TimestampCreated(ctx, field, obj)
		case "LeadID":
			out.Values[i] = ec._Checklist_LeadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var commentImplementors = []string{"Comment"}

func (ec *executionContext) _Comment(ctx context.Context, sel ast.SelectionSet, obj *model.Comment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, commentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Comment")
		case "CommentID":
			out.Values[i] = ec._Comment_CommentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberID":
			out.Values[i] = ec._Comment_MemberID(ctx, field, obj)
		case "Content":
			out.Values[i] = ec._Comment_Content(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._Comment_DateCreated(ctx, field, obj)
		case "TimestampCreated":
			out.Values[i] = ec._Comment_TimestampCreated(ctx, field, obj)
		case "DateEdited":
			out.Values[i] = ec._Comment_DateEdited(ctx, field, obj)
		case "TimestampEdited":
			out.Values[i] = ec._Comment_TimestampEdited(ctx, field, obj)
		case "LeadID":
			out.Values[i] = ec._Comment_LeadID(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contractImplementors = []string{"Contract"}

func (ec *executionContext) _Contract(ctx context.Context, sel ast.SelectionSet, obj *model.Contract) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contractImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Contract")
		case "ContractID":
			out.Values[i] = ec._Contract_ContractID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Title":
			out.Values[i] = ec._Contract_Title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Content":
			out.Values[i] = ec._Contract_Content(ctx, field, obj)
		case "ContentRaw":
			out.Values[i] = ec._Contract_ContentRaw(ctx, field, obj)
		case "OfferID":
			out.Values[i] = ec._Contract_OfferID(ctx, field, obj)
		case "Current":
			out.Values[i] = ec._Contract_Current(ctx, field, obj)
		case "Template":
			out.Values[i] = ec._Contract_Template(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var creationResponseImplementors = []string{"CreationResponse"}

func (ec *executionContext) _CreationResponse(ctx context.Context, sel ast.SelectionSet, obj *model.CreationResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, creationResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreationResponse")
		case "RecordID":
			out.Values[i] = ec._CreationResponse_RecordID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var currencyImplementors = []string{"Currency"}

func (ec *executionContext) _Currency(ctx context.Context, sel ast.SelectionSet, obj *model.Currency) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currencyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Currency")
		case "CurrencyID":
			out.Values[i] = ec._Currency_CurrencyID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Title":
			out.Values[i] = ec._Currency_Title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Symbol":
			out.Values[i] = ec._Currency_Symbol(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dealImplementors = []string{"Deal"}

func (ec *executionContext) _Deal(ctx context.Context, sel ast.SelectionSet, obj *model.Deal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dealImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Deal")
		case "DealID":
			out.Values[i] = ec._Deal_DealID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferID":
			out.Values[i] = ec._Deal_OfferID(ctx, field, obj)
		case "ContractID":
			out.Values[i] = ec._Deal_ContractID(ctx, field, obj)
		case "MemberID":
			out.Values[i] = ec._Deal_MemberID(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._Deal_CurrencyID(ctx, field, obj)
		case "SignatureFilename":
			out.Values[i] = ec._Deal_SignatureFilename(ctx, field, obj)
		case "SignatureURL":
			out.Values[i] = ec._Deal_SignatureURL(ctx, field, obj)
		case "VerificationCode":
			out.Values[i] = ec._Deal_VerificationCode(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._Deal_DateCreated(ctx, field, obj)
		case "DateSigned":
			out.Values[i] = ec._Deal_DateSigned(ctx, field, obj)
		case "DateVerified":
			out.Values[i] = ec._Deal_DateVerified(ctx, field, obj)
		case "DatePaid":
			out.Values[i] = ec._Deal_DatePaid(ctx, field, obj)
		case "DateStart":
			out.Values[i] = ec._Deal_DateStart(ctx, field, obj)
		case "DateEnd":
			out.Values[i] = ec._Deal_DateEnd(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._Deal_Status(ctx, field, obj)
		case "Amount":
			out.Values[i] = ec._Deal_Amount(ctx, field, obj)
		case "Duration":
			out.Values[i] = ec._Deal_Duration(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fAQImplementors = []string{"FAQ"}

func (ec *executionContext) _FAQ(ctx context.Context, sel ast.SelectionSet, obj *model.Faq) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fAQImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FAQ")
		case "FAQID":
			out.Values[i] = ec._FAQ_FAQID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Question":
			out.Values[i] = ec._FAQ_Question(ctx, field, obj)
		case "Answer":
			out.Values[i] = ec._FAQ_Answer(ctx, field, obj)
		case "Position":
			out.Values[i] = ec._FAQ_Position(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var infoImplementors = []string{"Info"}

func (ec *executionContext) _Info(ctx context.Context, sel ast.SelectionSet, obj *model.Info) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, infoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Info")
		case "MemberID":
			out.Values[i] = ec._Info_MemberID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Event":
			out.Values[i] = ec._Info_Event(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ID":
			out.Values[i] = ec._Info_ID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Value":
			out.Values[i] = ec._Info_Value(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Rate":
			out.Values[i] = ec._Info_Rate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RateBuy":
			out.Values[i] = ec._Info_RateBuy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RateSell":
			out.Values[i] = ec._Info_RateSell(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Change":
			out.Values[i] = ec._Info_Change(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Sentiment":
			out.Values[i] = ec._Info_Sentiment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SentimentType":
			out.Values[i] = ec._Info_SentimentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var interestImplementors = []string{"Interest"}

func (ec *executionContext) _Interest(ctx context.Context, sel ast.SelectionSet, obj *model.Interest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, interestImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Interest")
		case "InterestID":
			out.Values[i] = ec._Interest_InterestID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferID":
			out.Values[i] = ec._Interest_OfferID(ctx, field, obj)
		case "AmountFrom":
			out.Values[i] = ec._Interest_AmountFrom(ctx, field, obj)
		case "AmountTo":
			out.Values[i] = ec._Interest_AmountTo(ctx, field, obj)
		case "DurationFrom":
			out.Values[i] = ec._Interest_DurationFrom(ctx, field, obj)
		case "DurationTo":
			out.Values[i] = ec._Interest_DurationTo(ctx, field, obj)
		case "Interest":
			out.Values[i] = ec._Interest_Interest(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var investImplementors = []string{"Invest"}

func (ec *executionContext) _Invest(ctx context.Context, sel ast.SelectionSet, obj *model.Invest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, investImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Invest")
		case "InvestID":
			out.Values[i] = ec._Invest_InvestID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferID":
			out.Values[i] = ec._Invest_OfferID(ctx, field, obj)
		case "CategoryID":
			out.Values[i] = ec._Invest_CategoryID(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._Invest_CurrencyID(ctx, field, obj)
		case "BankDetailsID":
			out.Values[i] = ec._Invest_BankDetailsID(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Invest_Title(ctx, field, obj)
		case "Subtitle":
			out.Values[i] = ec._Invest_Subtitle(ctx, field, obj)
		case "Description":
			out.Values[i] = ec._Invest_Description(ctx, field, obj)
		case "FAQ":
			out.Values[i] = ec._Invest_FAQ(ctx, field, obj)
		case "Photo":
			out.Values[i] = ec._Invest_Photo(ctx, field, obj)
		case "Document":
			out.Values[i] = ec._Invest_Document(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._Invest_Status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var invoiceImplementors = []string{"Invoice"}

func (ec *executionContext) _Invoice(ctx context.Context, sel ast.SelectionSet, obj *model.Invoice) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, invoiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Invoice")
		case "InvoiceID":
			out.Values[i] = ec._Invoice_InvoiceID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferID":
			out.Values[i] = ec._Invoice_OfferID(ctx, field, obj)
		case "MemberID":
			out.Values[i] = ec._Invoice_MemberID(ctx, field, obj)
		case "DealID":
			out.Values[i] = ec._Invoice_DealID(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._Invoice_CurrencyID(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._Invoice_Status(ctx, field, obj)
		case "Amount":
			out.Values[i] = ec._Invoice_Amount(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._Invoice_DateCreated(ctx, field, obj)
		case "TimestampCreated":
			out.Values[i] = ec._Invoice_TimestampCreated(ctx, field, obj)
		case "DatePaid":
			out.Values[i] = ec._Invoice_DatePaid(ctx, field, obj)
		case "TimestampPaid":
			out.Values[i] = ec._Invoice_TimestampPaid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var leadImplementors = []string{"Lead"}

func (ec *executionContext) _Lead(ctx context.Context, sel ast.SelectionSet, obj *model.Lead) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lead")
		case "LeadID":
			out.Values[i] = ec._Lead_LeadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerID":
			out.Values[i] = ec._Lead_ManagerID(ctx, field, obj)
		case "MemberID":
			out.Values[i] = ec._Lead_MemberID(ctx, field, obj)
		case "CampaignID":
			out.Values[i] = ec._Lead_CampaignID(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._Lead_CurrencyID(ctx, field, obj)
		case "Email":
			out.Values[i] = ec._Lead_Email(ctx, field, obj)
		case "Phone":
			out.Values[i] = ec._Lead_Phone(ctx, field, obj)
		case "IP":
			out.Values[i] = ec._Lead_IP(ctx, field, obj)
		case "FirstName":
			out.Values[i] = ec._Lead_FirstName(ctx, field, obj)
		case "LastName":
			out.Values[i] = ec._Lead_LastName(ctx, field, obj)
		case "Gender":
			out.Values[i] = ec._Lead_Gender(ctx, field, obj)
		case "FamilyStatus":
			out.Values[i] = ec._Lead_FamilyStatus(ctx, field, obj)
		case "MaidenName":
			out.Values[i] = ec._Lead_MaidenName(ctx, field, obj)
		case "Citizenship":
			out.Values[i] = ec._Lead_Citizenship(ctx, field, obj)
		case "Country":
			out.Values[i] = ec._Lead_Country(ctx, field, obj)
		case "City":
			out.Values[i] = ec._Lead_City(ctx, field, obj)
		case "Zip":
			out.Values[i] = ec._Lead_Zip(ctx, field, obj)
		case "Address1":
			out.Values[i] = ec._Lead_Address1(ctx, field, obj)
		case "Address2":
			out.Values[i] = ec._Lead_Address2(ctx, field, obj)
		case "StreetNumber":
			out.Values[i] = ec._Lead_StreetNumber(ctx, field, obj)
		case "StreetName":
			out.Values[i] = ec._Lead_StreetName(ctx, field, obj)
		case "Birthday":
			out.Values[i] = ec._Lead_Birthday(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._Lead_Status(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._Lead_DateCreated(ctx, field, obj)
		case "TimestampCreated":
			out.Values[i] = ec._Lead_TimestampCreated(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managerOfferImplementors = []string{"ManagerOffer"}

func (ec *executionContext) _ManagerOffer(ctx context.Context, sel ast.SelectionSet, obj *model.ManagerOffer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managerOfferImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagerOffer")
		case "OfferID":
			out.Values[i] = ec._ManagerOffer_OfferID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberID":
			out.Values[i] = ec._ManagerOffer_MemberID(ctx, field, obj)
		case "InvestID":
			out.Values[i] = ec._ManagerOffer_InvestID(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._ManagerOffer_CurrencyID(ctx, field, obj)
		case "BankDetailsID":
			out.Values[i] = ec._ManagerOffer_BankDetailsID(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._ManagerOffer_Title(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._ManagerOffer_Status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var managerSearchImplementors = []string{"ManagerSearch"}

func (ec *executionContext) _ManagerSearch(ctx context.Context, sel ast.SelectionSet, obj *model.ManagerSearch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, managerSearchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ManagerSearch")
		case "ManagerID":
			out.Values[i] = ec._ManagerSearch_ManagerID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Title":
			out.Values[i] = ec._ManagerSearch_Title(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mediaImplementors = []string{"Media"}

func (ec *executionContext) _Media(ctx context.Context, sel ast.SelectionSet, obj *model.Media) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mediaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Media")
		case "MediaID":
			out.Values[i] = ec._Media_MediaID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberID":
			out.Values[i] = ec._Media_MemberID(ctx, field, obj)
		case "InvestID":
			out.Values[i] = ec._Media_InvestID(ctx, field, obj)
		case "URL":
			out.Values[i] = ec._Media_URL(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Media_Title(ctx, field, obj)
		case "Position":
			out.Values[i] = ec._Media_Position(ctx, field, obj)
		case "Filename":
			out.Values[i] = ec._Media_Filename(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._Media_Category(ctx, field, obj)
		case "Created":
			out.Values[i] = ec._Media_Created(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var memberImplementors = []string{"Member"}

func (ec *executionContext) _Member(ctx context.Context, sel ast.SelectionSet, obj *model.Member) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Member")
		case "MemberID":
			out.Values[i] = ec._Member_MemberID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Email":
			out.Values[i] = ec._Member_Email(ctx, field, obj)
		case "ManagerID":
			out.Values[i] = ec._Member_ManagerID(ctx, field, obj)
		case "IP":
			out.Values[i] = ec._Member_IP(ctx, field, obj)
		case "FirstName":
			out.Values[i] = ec._Member_FirstName(ctx, field, obj)
		case "LastName":
			out.Values[i] = ec._Member_LastName(ctx, field, obj)
		case "Gender":
			out.Values[i] = ec._Member_Gender(ctx, field, obj)
		case "FamilyStatus":
			out.Values[i] = ec._Member_FamilyStatus(ctx, field, obj)
		case "MaidenName":
			out.Values[i] = ec._Member_MaidenName(ctx, field, obj)
		case "Citizenship":
			out.Values[i] = ec._Member_Citizenship(ctx, field, obj)
		case "Country":
			out.Values[i] = ec._Member_Country(ctx, field, obj)
		case "City":
			out.Values[i] = ec._Member_City(ctx, field, obj)
		case "Zip":
			out.Values[i] = ec._Member_Zip(ctx, field, obj)
		case "Address1":
			out.Values[i] = ec._Member_Address1(ctx, field, obj)
		case "Address2":
			out.Values[i] = ec._Member_Address2(ctx, field, obj)
		case "StreetNumber":
			out.Values[i] = ec._Member_StreetNumber(ctx, field, obj)
		case "StreetName":
			out.Values[i] = ec._Member_StreetName(ctx, field, obj)
		case "Image":
			out.Values[i] = ec._Member_Image(ctx, field, obj)
		case "Birthday":
			out.Values[i] = ec._Member_Birthday(ctx, field, obj)
		case "EmailNotifications":
			out.Values[i] = ec._Member_EmailNotifications(ctx, field, obj)
		case "Phone":
			out.Values[i] = ec._Member_Phone(ctx, field, obj)
		case "Created":
			out.Values[i] = ec._Member_Created(ctx, field, obj)
		case "Role":
			out.Values[i] = ec._Member_Role(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._Member_CurrencyID(ctx, field, obj)
		case "USD":
			out.Values[i] = ec._Member_USD(ctx, field, obj)
		case "EUR":
			out.Values[i] = ec._Member_EUR(ctx, field, obj)
		case "LeverageAllowed":
			out.Values[i] = ec._Member_LeverageAllowed(ctx, field, obj)
		case "StopLossAllowed":
			out.Values[i] = ec._Member_StopLossAllowed(ctx, field, obj)
		case "TakeProfitAllowed":
			out.Values[i] = ec._Member_TakeProfitAllowed(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._Member_Status(ctx, field, obj)
		case "ManagerRole":
			out.Values[i] = ec._Member_ManagerRole(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "MemberPersonalUpdate":
			out.Values[i] = ec._Mutation_MemberPersonalUpdate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberPhoneUpdate":
			out.Values[i] = ec._Mutation_MemberPhoneUpdate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberEmailUpdate":
			out.Values[i] = ec._Mutation_MemberEmailUpdate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateBankDetails":
			out.Values[i] = ec._Mutation_ManagerCreateBankDetails(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateInvest":
			out.Values[i] = ec._Mutation_ManagerCreateInvest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateOffer":
			out.Values[i] = ec._Mutation_ManagerCreateOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateInterest":
			out.Values[i] = ec._Mutation_ManagerCreateInterest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateCategory":
			out.Values[i] = ec._Mutation_ManagerCreateCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateContract":
			out.Values[i] = ec._Mutation_ManagerCreateContract(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateCurrency":
			out.Values[i] = ec._Mutation_ManagerCreateCurrency(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateLead":
			out.Values[i] = ec._Mutation_ManagerCreateLead(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateComment":
			out.Values[i] = ec._Mutation_ManagerCreateComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateChecklist":
			out.Values[i] = ec._Mutation_ManagerCreateChecklist(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateAppointment":
			out.Values[i] = ec._Mutation_ManagerCreateAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCreateCampaign":
			out.Values[i] = ec._Mutation_ManagerCreateCampaign(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerAssignMemberToOffer":
			out.Values[i] = ec._Mutation_ManagerAssignMemberToOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerAssignInvestToOffer":
			out.Values[i] = ec._Mutation_ManagerAssignInvestToOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerDuplicateAndAssignContractToOffer":
			out.Values[i] = ec._Mutation_ManagerDuplicateAndAssignContractToOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerAssignBankDetailsToOffer":
			out.Values[i] = ec._Mutation_ManagerAssignBankDetailsToOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerAssignLeadToManager":
			out.Values[i] = ec._Mutation_ManagerAssignLeadToManager(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerDuplicateInvest":
			out.Values[i] = ec._Mutation_ManagerDuplicateInvest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerDuplicateOffer":
			out.Values[i] = ec._Mutation_ManagerDuplicateOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerDuplicateContract":
			out.Values[i] = ec._Mutation_ManagerDuplicateContract(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerDeactivateOffer":
			out.Values[i] = ec._Mutation_ManagerDeactivateOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerActivateOffer":
			out.Values[i] = ec._Mutation_ManagerActivateOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerCancelOffer":
			out.Values[i] = ec._Mutation_ManagerCancelOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditBankDetails":
			out.Values[i] = ec._Mutation_ManagerEditBankDetails(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditInvest":
			out.Values[i] = ec._Mutation_ManagerEditInvest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditOffer":
			out.Values[i] = ec._Mutation_ManagerEditOffer(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditCategory":
			out.Values[i] = ec._Mutation_ManagerEditCategory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditContract":
			out.Values[i] = ec._Mutation_ManagerEditContract(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditCurrency":
			out.Values[i] = ec._Mutation_ManagerEditCurrency(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditInvoice":
			out.Values[i] = ec._Mutation_ManagerEditInvoice(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditLead":
			out.Values[i] = ec._Mutation_ManagerEditLead(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditComment":
			out.Values[i] = ec._Mutation_ManagerEditComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditChecklist":
			out.Values[i] = ec._Mutation_ManagerEditChecklist(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditAppointment":
			out.Values[i] = ec._Mutation_ManagerEditAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditCampaign":
			out.Values[i] = ec._Mutation_ManagerEditCampaign(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerEditMedia":
			out.Values[i] = ec._Mutation_ManagerEditMedia(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveLead":
			out.Values[i] = ec._Mutation_ManagerRemoveLead(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveComment":
			out.Values[i] = ec._Mutation_ManagerRemoveComment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveChecklist":
			out.Values[i] = ec._Mutation_ManagerRemoveChecklist(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveAppointment":
			out.Values[i] = ec._Mutation_ManagerRemoveAppointment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveCampaign":
			out.Values[i] = ec._Mutation_ManagerRemoveCampaign(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveInterest":
			out.Values[i] = ec._Mutation_ManagerRemoveInterest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveManager":
			out.Values[i] = ec._Mutation_ManagerRemoveManager(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerRemoveMedia":
			out.Values[i] = ec._Mutation_ManagerRemoveMedia(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerDragMedia":
			out.Values[i] = ec._Mutation_ManagerDragMedia(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ManagerAssignManager":
			out.Values[i] = ec._Mutation_ManagerAssignManager(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ValidateField":
			out.Values[i] = ec._Mutation_ValidateField(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferInitDeal":
			out.Values[i] = ec._Mutation_OfferInitDeal(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferGeneratePDF":
			out.Values[i] = ec._Mutation_OfferGeneratePDF(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferSign":
			out.Values[i] = ec._Mutation_OfferSign(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CancelDeal":
			out.Values[i] = ec._Mutation_CancelDeal(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "RemoveDeal":
			out.Values[i] = ec._Mutation_RemoveDeal(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "InvoiceSendToEmail":
			out.Values[i] = ec._Mutation_InvoiceSendToEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SignIn":
			out.Values[i] = ec._Mutation_SignIn(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "SignUp":
			out.Values[i] = ec._Mutation_SignUp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Reset":
			out.Values[i] = ec._Mutation_Reset(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ResetComplete":
			out.Values[i] = ec._Mutation_ResetComplete(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "PhoneVerify":
			out.Values[i] = ec._Mutation_PhoneVerify(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Verify":
			out.Values[i] = ec._Mutation_Verify(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "VerifyResend":
			out.Values[i] = ec._Mutation_VerifyResend(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferPhoneVerify":
			out.Values[i] = ec._Mutation_OfferPhoneVerify(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "OfferPhoneVerifyResend":
			out.Values[i] = ec._Mutation_OfferPhoneVerifyResend(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offerImplementors = []string{"Offer"}

func (ec *executionContext) _Offer(ctx context.Context, sel ast.SelectionSet, obj *model.Offer) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Offer")
		case "OfferID":
			out.Values[i] = ec._Offer_OfferID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberID":
			out.Values[i] = ec._Offer_MemberID(ctx, field, obj)
		case "InvestID":
			out.Values[i] = ec._Offer_InvestID(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._Offer_CurrencyID(ctx, field, obj)
		case "BankDetailsID":
			out.Values[i] = ec._Offer_BankDetailsID(ctx, field, obj)
		case "Title":
			out.Values[i] = ec._Offer_Title(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._Offer_Status(ctx, field, obj)
		case "Subtitle":
			out.Values[i] = ec._Offer_Subtitle(ctx, field, obj)
		case "Description":
			out.Values[i] = ec._Offer_Description(ctx, field, obj)
		case "Contract":
			out.Values[i] = ec._Offer_Contract(ctx, field, obj)
		case "FAQ":
			out.Values[i] = ec._Offer_FAQ(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offerPDFImplementors = []string{"OfferPDF"}

func (ec *executionContext) _OfferPDF(ctx context.Context, sel ast.SelectionSet, obj *model.OfferPdf) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offerPDFImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfferPDF")
		case "URL":
			out.Values[i] = ec._OfferPDF_URL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var offerSignResultImplementors = []string{"OfferSignResult"}

func (ec *executionContext) _OfferSignResult(ctx context.Context, sel ast.SelectionSet, obj *model.OfferSignResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, offerSignResultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OfferSignResult")
		case "Status":
			out.Values[i] = ec._OfferSignResult_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._OfferSignResult_Message(ctx, field, obj)
		case "Timeout":
			out.Values[i] = ec._OfferSignResult_Timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phoneVerifyResponseImplementors = []string{"PhoneVerifyResponse"}

func (ec *executionContext) _PhoneVerifyResponse(ctx context.Context, sel ast.SelectionSet, obj *model.PhoneVerifyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneVerifyResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhoneVerifyResponse")
		case "Timeout":
			out.Values[i] = ec._PhoneVerifyResponse_Timeout(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "Invest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Invest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "InvestByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_InvestByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "InterestListByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_InterestListByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerDealByContractID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerDealByContractID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Offer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Offer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ContractByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ContractByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "DealByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_DealByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "InterestByDealID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_InterestByDealID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "InterestByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_InterestByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Invoice":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Invoice(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "InvoiceByDealID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_InvoiceByDealID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "BankDetailsByInvoiceID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BankDetailsByInvoiceID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "OfferByInvoiceID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_OfferByInvoiceID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerBankDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerBankDetails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerBankDetailsByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerBankDetailsByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerInvest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerInvest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerMediaByInvestID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerMediaByInvestID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerInvestByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerInvestByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerOffer":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerOffer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerDeal":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerDeal(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerInvoiceByDealID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerInvoiceByDealID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerContract":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerContract(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCategory":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCategory(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCurrency":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCurrency(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerMember":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerMember(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerMemberByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerMemberByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerManager":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerManager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerLead":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerLead(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerComment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerComment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerChecklist":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerChecklist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerAppointment":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerAppointment(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCampaign":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCampaign(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "OfferList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_OfferList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "DealList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_DealList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ContractList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ContractList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "CategoryList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_CategoryList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "CurrencyList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_CurrencyList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "BalanceList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_BalanceList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "TXList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_TXList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerBankDetailsList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerBankDetailsList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerInvestList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerInvestList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerOfferList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerOfferList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerDealList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerDealList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerDealListByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerDealListByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerContractList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerContractList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCategoryList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCategoryList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCurrencyList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCurrencyList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerLeadList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerLeadList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCommentList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCommentList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCommentListByLeadID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCommentListByLeadID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerChecklistList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerChecklistList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerAppointmentList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerAppointmentList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerAppointmentListByLeadID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerAppointmentListByLeadID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerCampaignList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerCampaignList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerManagerList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerManagerList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerContractListByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerContractListByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerInterestListByOfferID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerInterestListByOfferID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerSearchMember":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerSearchMember(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerSearchMemberNoManager":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerSearchMemberNoManager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerSearchInvest":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerSearchInvest(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerSearchContract":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerSearchContract(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerSearchCurrency":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerSearchCurrency(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerSearchBankDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerSearchBankDetails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "ManagerSearchManager":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_ManagerSearchManager(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "Member":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Member(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "alert":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_alert(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resultImplementors = []string{"Result"}

func (ec *executionContext) _Result(ctx context.Context, sel ast.SelectionSet, obj *model.Result) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resultImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Result")
		case "Status":
			out.Values[i] = ec._Result_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._Result_Message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var signInResponseImplementors = []string{"SignInResponse"}

func (ec *executionContext) _SignInResponse(ctx context.Context, sel ast.SelectionSet, obj *model.SignInResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, signInResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SignInResponse")
		case "Status":
			out.Values[i] = ec._SignInResponse_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._SignInResponse_Message(ctx, field, obj)
		case "Token":
			out.Values[i] = ec._SignInResponse_Token(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subscriptionImplementors = []string{"Subscription"}

func (ec *executionContext) _Subscription(ctx context.Context, sel ast.SelectionSet) func() graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subscriptionImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Subscription",
	})
	if len(fields) != 1 {
		ec.Errorf(ctx, "must subscribe to exactly one stream")
		return nil
	}

	switch fields[0].Name {
	case "newInfo":
		return ec._Subscription_newInfo(ctx, fields[0])
	default:
		panic("unknown field " + strconv.Quote(fields[0].Name))
	}
}

var tXImplementors = []string{"TX"}

func (ec *executionContext) _TX(ctx context.Context, sel ast.SelectionSet, obj *model.Tx) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tXImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TX")
		case "TXID":
			out.Values[i] = ec._TX_TXID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberID":
			out.Values[i] = ec._TX_MemberID(ctx, field, obj)
		case "Amount":
			out.Values[i] = ec._TX_Amount(ctx, field, obj)
		case "AmountNegative":
			out.Values[i] = ec._TX_AmountNegative(ctx, field, obj)
		case "CurrencyID":
			out.Values[i] = ec._TX_CurrencyID(ctx, field, obj)
		case "Status":
			out.Values[i] = ec._TX_Status(ctx, field, obj)
		case "DateCreated":
			out.Values[i] = ec._TX_DateCreated(ctx, field, obj)
		case "DateComplete":
			out.Values[i] = ec._TX_DateComplete(ctx, field, obj)
		case "TimestampCreated":
			out.Values[i] = ec._TX_TimestampCreated(ctx, field, obj)
		case "TimestampComplete":
			out.Values[i] = ec._TX_TimestampComplete(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var uploadImplementors = []string{"Upload"}

func (ec *executionContext) _Upload(ctx context.Context, sel ast.SelectionSet, obj *model.Upload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, uploadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Upload")
		case "UploadID":
			out.Values[i] = ec._Upload_UploadID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "MemberID":
			out.Values[i] = ec._Upload_MemberID(ctx, field, obj)
		case "URL":
			out.Values[i] = ec._Upload_URL(ctx, field, obj)
		case "Filename":
			out.Values[i] = ec._Upload_Filename(ctx, field, obj)
		case "Category":
			out.Values[i] = ec._Upload_Category(ctx, field, obj)
		case "Created":
			out.Values[i] = ec._Upload_Created(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var valudationStatusImplementors = []string{"ValudationStatus"}

func (ec *executionContext) _ValudationStatus(ctx context.Context, sel ast.SelectionSet, obj *model.ValudationStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, valudationStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ValudationStatus")
		case "Status":
			out.Values[i] = ec._ValudationStatus_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._ValudationStatus_Message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var verifyResendResponseImplementors = []string{"VerifyResendResponse"}

func (ec *executionContext) _VerifyResendResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VerifyResendResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, verifyResendResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VerifyResendResponse")
		case "Status":
			out.Values[i] = ec._VerifyResendResponse_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._VerifyResendResponse_Message(ctx, field, obj)
		case "Timeout":
			out.Values[i] = ec._VerifyResendResponse_Timeout(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var verifyResponseImplementors = []string{"VerifyResponse"}

func (ec *executionContext) _VerifyResponse(ctx context.Context, sel ast.SelectionSet, obj *model.VerifyResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, verifyResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VerifyResponse")
		case "Status":
			out.Values[i] = ec._VerifyResponse_Status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._VerifyResponse_Message(ctx, field, obj)
		case "Token":
			out.Values[i] = ec._VerifyResponse_Token(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAlert2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAlert(ctx context.Context, sel ast.SelectionSet, v model.Alert) graphql.Marshaler {
	return ec._Alert(ctx, sel, &v)
}

func (ec *executionContext) marshalNAlert2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAlertᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Alert) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAlert2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAlert(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAlert2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAlert(ctx context.Context, sel ast.SelectionSet, v *model.Alert) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Alert(ctx, sel, v)
}

func (ec *executionContext) marshalNAppointment2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAppointment(ctx context.Context, sel ast.SelectionSet, v model.Appointment) graphql.Marshaler {
	return ec._Appointment(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppointment2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAppointmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Appointment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAppointment2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAppointment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAppointment2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐAppointment(ctx context.Context, sel ast.SelectionSet, v *model.Appointment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Appointment(ctx, sel, v)
}

func (ec *executionContext) marshalNBalance2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBalance(ctx context.Context, sel ast.SelectionSet, v model.Balance) graphql.Marshaler {
	return ec._Balance(ctx, sel, &v)
}

func (ec *executionContext) marshalNBalance2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBalanceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Balance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBalance2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBalance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBalance2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBalance(ctx context.Context, sel ast.SelectionSet, v *model.Balance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Balance(ctx, sel, v)
}

func (ec *executionContext) marshalNBankDetails2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetails(ctx context.Context, sel ast.SelectionSet, v model.BankDetails) graphql.Marshaler {
	return ec._BankDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNBankDetails2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetailsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.BankDetails) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNBankDetails2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNBankDetails2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐBankDetails(ctx context.Context, sel ast.SelectionSet, v *model.BankDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._BankDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNCampaign2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCampaign(ctx context.Context, sel ast.SelectionSet, v model.Campaign) graphql.Marshaler {
	return ec._Campaign(ctx, sel, &v)
}

func (ec *executionContext) marshalNCampaign2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCampaignᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Campaign) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCampaign2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCampaign(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCampaign2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCampaign(ctx context.Context, sel ast.SelectionSet, v *model.Campaign) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Campaign(ctx, sel, v)
}

func (ec *executionContext) marshalNCategory2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCategory(ctx context.Context, sel ast.SelectionSet, v model.Category) graphql.Marshaler {
	return ec._Category(ctx, sel, &v)
}

func (ec *executionContext) marshalNCategory2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCategoryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Category) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCategory2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCategory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCategory2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCategory(ctx context.Context, sel ast.SelectionSet, v *model.Category) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Category(ctx, sel, v)
}

func (ec *executionContext) marshalNChecklist2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐChecklist(ctx context.Context, sel ast.SelectionSet, v model.Checklist) graphql.Marshaler {
	return ec._Checklist(ctx, sel, &v)
}

func (ec *executionContext) marshalNChecklist2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐChecklistᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Checklist) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNChecklist2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐChecklist(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNChecklist2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐChecklist(ctx context.Context, sel ast.SelectionSet, v *model.Checklist) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Checklist(ctx, sel, v)
}

func (ec *executionContext) marshalNComment2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v model.Comment) graphql.Marshaler {
	return ec._Comment(ctx, sel, &v)
}

func (ec *executionContext) marshalNComment2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCommentᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Comment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNComment2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐComment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNComment2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐComment(ctx context.Context, sel ast.SelectionSet, v *model.Comment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Comment(ctx, sel, v)
}

func (ec *executionContext) marshalNContract2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v model.Contract) graphql.Marshaler {
	return ec._Contract(ctx, sel, &v)
}

func (ec *executionContext) marshalNContract2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContractᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Contract) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNContract2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNContract2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v *model.Contract) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Contract(ctx, sel, v)
}

func (ec *executionContext) marshalNCreationResponse2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx context.Context, sel ast.SelectionSet, v model.CreationResponse) graphql.Marshaler {
	return ec._CreationResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreationResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCreationResponse(ctx context.Context, sel ast.SelectionSet, v *model.CreationResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreationResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNCurrency2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrency(ctx context.Context, sel ast.SelectionSet, v model.Currency) graphql.Marshaler {
	return ec._Currency(ctx, sel, &v)
}

func (ec *executionContext) marshalNCurrency2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrencyᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Currency) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNCurrency2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrency(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNCurrency2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐCurrency(ctx context.Context, sel ast.SelectionSet, v *model.Currency) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Currency(ctx, sel, v)
}

func (ec *executionContext) marshalNDeal2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDeal(ctx context.Context, sel ast.SelectionSet, v model.Deal) graphql.Marshaler {
	return ec._Deal(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeal2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDealᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Deal) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeal2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDeal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNDeal2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDeal(ctx context.Context, sel ast.SelectionSet, v *model.Deal) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Deal(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDragRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐDragRequest(ctx context.Context, v interface{}) (model.DragRequest, error) {
	return ec.unmarshalInputDragRequest(ctx, v)
}

func (ec *executionContext) marshalNInfo2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInfo(ctx context.Context, sel ast.SelectionSet, v model.Info) graphql.Marshaler {
	return ec._Info(ctx, sel, &v)
}

func (ec *executionContext) marshalNInfo2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInfo(ctx context.Context, sel ast.SelectionSet, v *model.Info) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Info(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNInterest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterest(ctx context.Context, sel ast.SelectionSet, v model.Interest) graphql.Marshaler {
	return ec._Interest(ctx, sel, &v)
}

func (ec *executionContext) marshalNInterest2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterestᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Interest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInterest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNInterest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInterest(ctx context.Context, sel ast.SelectionSet, v *model.Interest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Interest(ctx, sel, v)
}

func (ec *executionContext) marshalNInvest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx context.Context, sel ast.SelectionSet, v model.Invest) graphql.Marshaler {
	return ec._Invest(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvest2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvestᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Invest) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNInvest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNInvest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvest(ctx context.Context, sel ast.SelectionSet, v *model.Invest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Invest(ctx, sel, v)
}

func (ec *executionContext) marshalNInvoice2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvoice(ctx context.Context, sel ast.SelectionSet, v model.Invoice) graphql.Marshaler {
	return ec._Invoice(ctx, sel, &v)
}

func (ec *executionContext) marshalNInvoice2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvoice(ctx context.Context, sel ast.SelectionSet, v *model.Invoice) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Invoice(ctx, sel, v)
}

func (ec *executionContext) unmarshalNInvoiceSendToEmailRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐInvoiceSendToEmailRequest(ctx context.Context, v interface{}) (model.InvoiceSendToEmailRequest, error) {
	return ec.unmarshalInputInvoiceSendToEmailRequest(ctx, v)
}

func (ec *executionContext) marshalNLead2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐLead(ctx context.Context, sel ast.SelectionSet, v model.Lead) graphql.Marshaler {
	return ec._Lead(ctx, sel, &v)
}

func (ec *executionContext) marshalNLead2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐLeadᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Lead) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLead2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐLead(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLead2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐLead(ctx context.Context, sel ast.SelectionSet, v *model.Lead) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Lead(ctx, sel, v)
}

func (ec *executionContext) unmarshalNManagerAssignBankDetailsToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignBankDetailsToOfferRequest(ctx context.Context, v interface{}) (model.ManagerAssignBankDetailsToOfferRequest, error) {
	return ec.unmarshalInputManagerAssignBankDetailsToOfferRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerAssignInvestToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignInvestToOfferRequest(ctx context.Context, v interface{}) (model.ManagerAssignInvestToOfferRequest, error) {
	return ec.unmarshalInputManagerAssignInvestToOfferRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerAssignLeadToManagerRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignLeadToManagerRequest(ctx context.Context, v interface{}) (model.ManagerAssignLeadToManagerRequest, error) {
	return ec.unmarshalInputManagerAssignLeadToManagerRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerAssignManagerRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignManagerRequest(ctx context.Context, v interface{}) (model.ManagerAssignManagerRequest, error) {
	return ec.unmarshalInputManagerAssignManagerRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerAssignMemberToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerAssignMemberToOfferRequest(ctx context.Context, v interface{}) (model.ManagerAssignMemberToOfferRequest, error) {
	return ec.unmarshalInputManagerAssignMemberToOfferRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateAppointmentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateAppointmentRequest(ctx context.Context, v interface{}) (model.ManagerCreateAppointmentRequest, error) {
	return ec.unmarshalInputManagerCreateAppointmentRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateBankDetailsRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateBankDetailsRequest(ctx context.Context, v interface{}) (model.ManagerCreateBankDetailsRequest, error) {
	return ec.unmarshalInputManagerCreateBankDetailsRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateCampaignRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCampaignRequest(ctx context.Context, v interface{}) (model.ManagerCreateCampaignRequest, error) {
	return ec.unmarshalInputManagerCreateCampaignRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateCategoryRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCategoryRequest(ctx context.Context, v interface{}) (model.ManagerCreateCategoryRequest, error) {
	return ec.unmarshalInputManagerCreateCategoryRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateChecklistRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateChecklistRequest(ctx context.Context, v interface{}) (model.ManagerCreateChecklistRequest, error) {
	return ec.unmarshalInputManagerCreateChecklistRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateCommentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCommentRequest(ctx context.Context, v interface{}) (model.ManagerCreateCommentRequest, error) {
	return ec.unmarshalInputManagerCreateCommentRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateContractRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateContractRequest(ctx context.Context, v interface{}) (model.ManagerCreateContractRequest, error) {
	return ec.unmarshalInputManagerCreateContractRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateCurrencyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateCurrencyRequest(ctx context.Context, v interface{}) (model.ManagerCreateCurrencyRequest, error) {
	return ec.unmarshalInputManagerCreateCurrencyRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateInterestRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateInterestRequest(ctx context.Context, v interface{}) (model.ManagerCreateInterestRequest, error) {
	return ec.unmarshalInputManagerCreateInterestRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateInvestRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateInvestRequest(ctx context.Context, v interface{}) (model.ManagerCreateInvestRequest, error) {
	return ec.unmarshalInputManagerCreateInvestRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateLeadRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateLeadRequest(ctx context.Context, v interface{}) (model.ManagerCreateLeadRequest, error) {
	return ec.unmarshalInputManagerCreateLeadRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerCreateOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerCreateOfferRequest(ctx context.Context, v interface{}) (model.ManagerCreateOfferRequest, error) {
	return ec.unmarshalInputManagerCreateOfferRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerDuplicateAndAssignContractToOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDuplicateAndAssignContractToOfferRequest(ctx context.Context, v interface{}) (model.ManagerDuplicateAndAssignContractToOfferRequest, error) {
	return ec.unmarshalInputManagerDuplicateAndAssignContractToOfferRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerDuplicateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDuplicateRequest(ctx context.Context, v interface{}) (model.ManagerDuplicateRequest, error) {
	return ec.unmarshalInputManagerDuplicateRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditAppointmentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditAppointmentRequest(ctx context.Context, v interface{}) (model.ManagerEditAppointmentRequest, error) {
	return ec.unmarshalInputManagerEditAppointmentRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditBankDetailsRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditBankDetailsRequest(ctx context.Context, v interface{}) (model.ManagerEditBankDetailsRequest, error) {
	return ec.unmarshalInputManagerEditBankDetailsRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditCampaignRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCampaignRequest(ctx context.Context, v interface{}) (model.ManagerEditCampaignRequest, error) {
	return ec.unmarshalInputManagerEditCampaignRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditCategoryRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCategoryRequest(ctx context.Context, v interface{}) (model.ManagerEditCategoryRequest, error) {
	return ec.unmarshalInputManagerEditCategoryRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditChecklistRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditChecklistRequest(ctx context.Context, v interface{}) (model.ManagerEditChecklistRequest, error) {
	return ec.unmarshalInputManagerEditChecklistRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditCommentRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCommentRequest(ctx context.Context, v interface{}) (model.ManagerEditCommentRequest, error) {
	return ec.unmarshalInputManagerEditCommentRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditContractRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditContractRequest(ctx context.Context, v interface{}) (model.ManagerEditContractRequest, error) {
	return ec.unmarshalInputManagerEditContractRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditCurrencyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditCurrencyRequest(ctx context.Context, v interface{}) (model.ManagerEditCurrencyRequest, error) {
	return ec.unmarshalInputManagerEditCurrencyRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditInvestRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditInvestRequest(ctx context.Context, v interface{}) (model.ManagerEditInvestRequest, error) {
	return ec.unmarshalInputManagerEditInvestRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditInvoiceRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditInvoiceRequest(ctx context.Context, v interface{}) (model.ManagerEditInvoiceRequest, error) {
	return ec.unmarshalInputManagerEditInvoiceRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditLeadRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditLeadRequest(ctx context.Context, v interface{}) (model.ManagerEditLeadRequest, error) {
	return ec.unmarshalInputManagerEditLeadRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditMediaRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditMediaRequest(ctx context.Context, v interface{}) (model.ManagerEditMediaRequest, error) {
	return ec.unmarshalInputManagerEditMediaRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerEditOfferRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerEditOfferRequest(ctx context.Context, v interface{}) (model.ManagerEditOfferRequest, error) {
	return ec.unmarshalInputManagerEditOfferRequest(ctx, v)
}

func (ec *executionContext) unmarshalNManagerMediaByInvestIDRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerMediaByInvestIDRequest(ctx context.Context, v interface{}) (model.ManagerMediaByInvestIDRequest, error) {
	return ec.unmarshalInputManagerMediaByInvestIDRequest(ctx, v)
}

func (ec *executionContext) marshalNManagerOffer2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerOffer(ctx context.Context, sel ast.SelectionSet, v model.ManagerOffer) graphql.Marshaler {
	return ec._ManagerOffer(ctx, sel, &v)
}

func (ec *executionContext) marshalNManagerOffer2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerOfferᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ManagerOffer) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNManagerOffer2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerOffer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNManagerOffer2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerOffer(ctx context.Context, sel ast.SelectionSet, v *model.ManagerOffer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ManagerOffer(ctx, sel, v)
}

func (ec *executionContext) marshalNManagerSearch2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerSearch(ctx context.Context, sel ast.SelectionSet, v model.ManagerSearch) graphql.Marshaler {
	return ec._ManagerSearch(ctx, sel, &v)
}

func (ec *executionContext) marshalNManagerSearch2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerSearchᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ManagerSearch) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNManagerSearch2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerSearch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNManagerSearch2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerSearch(ctx context.Context, sel ast.SelectionSet, v *model.ManagerSearch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ManagerSearch(ctx, sel, v)
}

func (ec *executionContext) marshalNMedia2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v model.Media) graphql.Marshaler {
	return ec._Media(ctx, sel, &v)
}

func (ec *executionContext) marshalNMedia2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMediaᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Media) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMedia2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMedia2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v *model.Media) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) marshalNMember2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v model.Member) graphql.Marshaler {
	return ec._Member(ctx, sel, &v)
}

func (ec *executionContext) marshalNMember2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Member) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMember2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNMember2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v *model.Member) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Member(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMemberEmailUpdateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberEmailUpdateRequest(ctx context.Context, v interface{}) (model.MemberEmailUpdateRequest, error) {
	return ec.unmarshalInputMemberEmailUpdateRequest(ctx, v)
}

func (ec *executionContext) unmarshalNMemberPersonalUpdateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberPersonalUpdateRequest(ctx context.Context, v interface{}) (model.MemberPersonalUpdateRequest, error) {
	return ec.unmarshalInputMemberPersonalUpdateRequest(ctx, v)
}

func (ec *executionContext) unmarshalNMemberPhoneUpdateRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMemberPhoneUpdateRequest(ctx context.Context, v interface{}) (model.MemberPhoneUpdateRequest, error) {
	return ec.unmarshalInputMemberPhoneUpdateRequest(ctx, v)
}

func (ec *executionContext) marshalNOffer2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOffer(ctx context.Context, sel ast.SelectionSet, v model.Offer) graphql.Marshaler {
	return ec._Offer(ctx, sel, &v)
}

func (ec *executionContext) marshalNOffer2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOffer(ctx context.Context, sel ast.SelectionSet, v *model.Offer) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Offer(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOfferInitDealRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferInitDealRequest(ctx context.Context, v interface{}) (model.OfferInitDealRequest, error) {
	return ec.unmarshalInputOfferInitDealRequest(ctx, v)
}

func (ec *executionContext) marshalNOfferPDF2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferPdf(ctx context.Context, sel ast.SelectionSet, v model.OfferPdf) graphql.Marshaler {
	return ec._OfferPDF(ctx, sel, &v)
}

func (ec *executionContext) marshalNOfferPDF2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferPdf(ctx context.Context, sel ast.SelectionSet, v *model.OfferPdf) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OfferPDF(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOfferPhoneVerifyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferPhoneVerifyRequest(ctx context.Context, v interface{}) (model.OfferPhoneVerifyRequest, error) {
	return ec.unmarshalInputOfferPhoneVerifyRequest(ctx, v)
}

func (ec *executionContext) unmarshalNOfferSignRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferSignRequest(ctx context.Context, v interface{}) (model.OfferSignRequest, error) {
	return ec.unmarshalInputOfferSignRequest(ctx, v)
}

func (ec *executionContext) marshalNOfferSignResult2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferSignResult(ctx context.Context, sel ast.SelectionSet, v model.OfferSignResult) graphql.Marshaler {
	return ec._OfferSignResult(ctx, sel, &v)
}

func (ec *executionContext) marshalNOfferSignResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐOfferSignResult(ctx context.Context, sel ast.SelectionSet, v *model.OfferSignResult) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OfferSignResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPhoneVerifyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐPhoneVerifyRequest(ctx context.Context, v interface{}) (model.PhoneVerifyRequest, error) {
	return ec.unmarshalInputPhoneVerifyRequest(ctx, v)
}

func (ec *executionContext) marshalNPhoneVerifyResponse2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐPhoneVerifyResponse(ctx context.Context, sel ast.SelectionSet, v model.PhoneVerifyResponse) graphql.Marshaler {
	return ec._PhoneVerifyResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNPhoneVerifyResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐPhoneVerifyResponse(ctx context.Context, sel ast.SelectionSet, v *model.PhoneVerifyResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PhoneVerifyResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx context.Context, v interface{}) (model.RecordRequest, error) {
	return ec.unmarshalInputRecordRequest(ctx, v)
}

func (ec *executionContext) unmarshalNResetCompleteRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResetCompleteRequest(ctx context.Context, v interface{}) (model.ResetCompleteRequest, error) {
	return ec.unmarshalInputResetCompleteRequest(ctx, v)
}

func (ec *executionContext) unmarshalNResetRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResetRequest(ctx context.Context, v interface{}) (model.ResetRequest, error) {
	return ec.unmarshalInputResetRequest(ctx, v)
}

func (ec *executionContext) marshalNResult2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v model.Result) graphql.Marshaler {
	return ec._Result(ctx, sel, &v)
}

func (ec *executionContext) marshalNResult2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐResult(ctx context.Context, sel ast.SelectionSet, v *model.Result) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Result(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSignInRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSignInRequest(ctx context.Context, v interface{}) (model.SignInRequest, error) {
	return ec.unmarshalInputSignInRequest(ctx, v)
}

func (ec *executionContext) marshalNSignInResponse2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSignInResponse(ctx context.Context, sel ast.SelectionSet, v model.SignInResponse) graphql.Marshaler {
	return ec._SignInResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNSignInResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSignInResponse(ctx context.Context, sel ast.SelectionSet, v *model.SignInResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SignInResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSignUpRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSignUpRequest(ctx context.Context, v interface{}) (model.SignUpRequest, error) {
	return ec.unmarshalInputSignUpRequest(ctx, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNTX2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐTx(ctx context.Context, sel ast.SelectionSet, v model.Tx) graphql.Marshaler {
	return ec._TX(ctx, sel, &v)
}

func (ec *executionContext) marshalNTX2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐTxᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Tx) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNTX2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐTx(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNTX2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐTx(ctx context.Context, sel ast.SelectionSet, v *model.Tx) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._TX(ctx, sel, v)
}

func (ec *executionContext) unmarshalNValidateFieldRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐValidateFieldRequest(ctx context.Context, v interface{}) (model.ValidateFieldRequest, error) {
	return ec.unmarshalInputValidateFieldRequest(ctx, v)
}

func (ec *executionContext) marshalNValudationStatus2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐValudationStatus(ctx context.Context, sel ast.SelectionSet, v model.ValudationStatus) graphql.Marshaler {
	return ec._ValudationStatus(ctx, sel, &v)
}

func (ec *executionContext) marshalNValudationStatus2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐValudationStatus(ctx context.Context, sel ast.SelectionSet, v *model.ValudationStatus) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ValudationStatus(ctx, sel, v)
}

func (ec *executionContext) unmarshalNVerifyRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyRequest(ctx context.Context, v interface{}) (model.VerifyRequest, error) {
	return ec.unmarshalInputVerifyRequest(ctx, v)
}

func (ec *executionContext) unmarshalNVerifyResendRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResendRequest(ctx context.Context, v interface{}) (model.VerifyResendRequest, error) {
	return ec.unmarshalInputVerifyResendRequest(ctx, v)
}

func (ec *executionContext) marshalNVerifyResendResponse2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResendResponse(ctx context.Context, sel ast.SelectionSet, v model.VerifyResendResponse) graphql.Marshaler {
	return ec._VerifyResendResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNVerifyResendResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResendResponse(ctx context.Context, sel ast.SelectionSet, v *model.VerifyResendResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VerifyResendResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNVerifyResponse2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResponse(ctx context.Context, sel ast.SelectionSet, v model.VerifyResponse) graphql.Marshaler {
	return ec._VerifyResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNVerifyResponse2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐVerifyResponse(ctx context.Context, sel ast.SelectionSet, v *model.VerifyResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VerifyResponse(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	return graphql.UnmarshalBoolean(v)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOBoolean2bool(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOBoolean2bool(ctx, sel, *v)
}

func (ec *executionContext) marshalOContract2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v model.Contract) graphql.Marshaler {
	return ec._Contract(ctx, sel, &v)
}

func (ec *executionContext) marshalOContract2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐContract(ctx context.Context, sel ast.SelectionSet, v *model.Contract) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Contract(ctx, sel, v)
}

func (ec *executionContext) marshalOFAQ2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐFaq(ctx context.Context, sel ast.SelectionSet, v model.Faq) graphql.Marshaler {
	return ec._FAQ(ctx, sel, &v)
}

func (ec *executionContext) marshalOFAQ2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐFaq(ctx context.Context, sel ast.SelectionSet, v []*model.Faq) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFAQ2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐFaq(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFAQ2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐFaq(ctx context.Context, sel ast.SelectionSet, v *model.Faq) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FAQ(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2int(ctx context.Context, v interface{}) (int, error) {
	return graphql.UnmarshalInt(v)
}

func (ec *executionContext) marshalOInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	return graphql.MarshalInt(v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOInt2int(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOInt2int(ctx, sel, *v)
}

func (ec *executionContext) unmarshalOListRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx context.Context, v interface{}) (model.ListRequest, error) {
	return ec.unmarshalInputListRequest(ctx, v)
}

func (ec *executionContext) unmarshalOListRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx context.Context, v interface{}) (*model.ListRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOListRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐListRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOManagerDealByContractIDRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDealByContractIDRequest(ctx context.Context, v interface{}) (model.ManagerDealByContractIDRequest, error) {
	return ec.unmarshalInputManagerDealByContractIDRequest(ctx, v)
}

func (ec *executionContext) unmarshalOManagerDealByContractIDRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDealByContractIDRequest(ctx context.Context, v interface{}) (*model.ManagerDealByContractIDRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOManagerDealByContractIDRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐManagerDealByContractIDRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOMedia2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v model.Media) graphql.Marshaler {
	return ec._Media(ctx, sel, &v)
}

func (ec *executionContext) marshalOMedia2ᚕᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v []*model.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMedia2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOMedia2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐMedia(ctx context.Context, sel ast.SelectionSet, v *model.Media) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Media(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx context.Context, v interface{}) (model.RecordRequest, error) {
	return ec.unmarshalInputRecordRequest(ctx, v)
}

func (ec *executionContext) unmarshalORecordRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx context.Context, v interface{}) (*model.RecordRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalORecordRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐRecordRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOSearchRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx context.Context, v interface{}) (model.SearchRequest, error) {
	return ec.unmarshalInputSearchRequest(ctx, v)
}

func (ec *executionContext) unmarshalOSearchRequest2ᚖgithubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx context.Context, v interface{}) (*model.SearchRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOSearchRequest2githubᚗcomᚋianidiᚋexchangeᚑserverᚋgraphᚋmodelᚐSearchRequest(ctx, v)
	return &res, err
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	return graphql.UnmarshalString(v)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalOString2string(ctx, v)
	return &res, err
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.marshalOString2string(ctx, sel, *v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v introspection.Schema) graphql.Marshaler {
	return ec.___Schema(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
